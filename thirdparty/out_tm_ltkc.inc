
/*
 * Generated file - DO NOT EDIT
 *
 * This is the header file for the LLRP Tool Kit (LTK)
 * C implementation. It is generated into a .inc file
 * that is included by a platform specific .c source file.
 * That .c file takes care of prerequisites needed by this file.
 */



/*
 * Vendor descriptors
 */

  
const LLRP_tSVendorDescriptor
LLRP_vdescthingmagic =
{
  .pName            = "thingmagic",
  .VendorID         = 26554,
};


/*
 * Namespace descriptors
 */

  
const LLRP_tSNamespaceDescriptor
LLRP_nsdescthingmagic =
{
  .pPrefix          = "thingmagic",
  .pURI             = "http://www.thingmagic.com/ltk/schema/extension/xml/1.0/",
  .pSchemaLocation  = "http://www.thingmagic.com/ltk/schema/extension/xml/1.0/thingmagic.xsd",
};


/*
 * Enumeration string tables
 */

  
const LLRP_tSEnumTableEntry
LLRP_estThingMagicReaderOperatingStatus[] =
{
  
    {
        "IDLE",
        LLRP_ThingMagicReaderOperatingStatus_IDLE,
    },
    {
        "RUNNING",
        LLRP_ThingMagicReaderOperatingStatus_RUNNING,
    },
    {
        "ERROR",
        LLRP_ThingMagicReaderOperatingStatus_ERROR,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicControlCapabilities[] =
{
  
    {
        "All",
        LLRP_ThingMagicControlCapabilities_All,
    },
    {
        "DeviceInformationCapabilities",
        LLRP_ThingMagicControlCapabilities_DeviceInformationCapabilities,
    },
    {
        "DeviceProtocolCapabilities",
        LLRP_ThingMagicControlCapabilities_DeviceProtocolCapabilities,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicControlConfiguration[] =
{
  
    {
        "All",
        LLRP_ThingMagicControlConfiguration_All,
    },
    {
        "ThingMagicReaderConfiguration",
        LLRP_ThingMagicControlConfiguration_ThingMagicReaderConfiguration,
    },
    {
        "ThingMagicRegionConfiguration",
        LLRP_ThingMagicControlConfiguration_ThingMagicRegionConfiguration,
    },
    {
        "ThingMagicProtocolConfiguration",
        LLRP_ThingMagicControlConfiguration_ThingMagicProtocolConfiguration,
    },
    {
        "ThingMagicAntennaConfiguration",
        LLRP_ThingMagicControlConfiguration_ThingMagicAntennaConfiguration,
    },
    {
        "ThingMagicCurrentTime",
        LLRP_ThingMagicControlConfiguration_ThingMagicCurrentTime,
    },
    {
        "ThingMagicDeDuplication",
        LLRP_ThingMagicControlConfiguration_ThingMagicDeDuplication,
    },
    {
        "ThingMagicReaderModuleTemperature",
        LLRP_ThingMagicControlConfiguration_ThingMagicReaderModuleTemperature,
    },
    {
        "ThingMagicAntennaDetection",
        LLRP_ThingMagicControlConfiguration_ThingMagicAntennaDetection,
    },
    {
        "ThingMagicLicenseKey",
        LLRP_ThingMagicControlConfiguration_ThingMagicLicenseKey,
    },
    {
        "ThingMagicHopTime",
        LLRP_ThingMagicControlConfiguration_ThingMagicHopTime,
    },
    {
        "ThingMagicAsyncOFFTime",
        LLRP_ThingMagicControlConfiguration_ThingMagicAsyncOFFTime,
    },
    {
        "ThingMagicLicensedFeatures",
        LLRP_ThingMagicControlConfiguration_ThingMagicLicensedFeatures,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicRegionID[] =
{
  
    {
        "UnspecifiedRegion",
        LLRP_ThingMagicRegionID_UnspecifiedRegion,
    },
    {
        "NorthAmerica",
        LLRP_ThingMagicRegionID_NorthAmerica,
    },
    {
        "EuropeanUnion",
        LLRP_ThingMagicRegionID_EuropeanUnion,
    },
    {
        "Korea",
        LLRP_ThingMagicRegionID_Korea,
    },
    {
        "India",
        LLRP_ThingMagicRegionID_India,
    },
    {
        "Japan",
        LLRP_ThingMagicRegionID_Japan,
    },
    {
        "PeoplesRepublicofChina",
        LLRP_ThingMagicRegionID_PeoplesRepublicofChina,
    },
    {
        "EuropeanUnion2",
        LLRP_ThingMagicRegionID_EuropeanUnion2,
    },
    {
        "EuropeanUnion3",
        LLRP_ThingMagicRegionID_EuropeanUnion3,
    },
    {
        "Korea2",
        LLRP_ThingMagicRegionID_Korea2,
    },
    {
        "Australia",
        LLRP_ThingMagicRegionID_Australia,
    },
    {
        "NewZealand",
        LLRP_ThingMagicRegionID_NewZealand,
    },
    {
        "Open",
        LLRP_ThingMagicRegionID_Open,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicAntennaMode[] =
{
  
    {
        "MonoStatic",
        LLRP_ThingMagicAntennaMode_MonoStatic,
    },
    {
        "BiStatic",
        LLRP_ThingMagicAntennaMode_BiStatic,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estProtocolID[] =
{
  
    {
        "UnspecifiedProtocol",
        LLRP_ProtocolID_UnspecifiedProtocol,
    },
    {
        "ISO180006B",
        LLRP_ProtocolID_ISO180006B,
    },
    {
        "GEN2",
        LLRP_ProtocolID_GEN2,
    },
    {
        "ISO180006B_UCODE",
        LLRP_ProtocolID_ISO180006B_UCODE,
    },
    {
        "IPX64",
        LLRP_ProtocolID_IPX64,
    },
    {
        "IPX256",
        LLRP_ProtocolID_IPX256,
    },
    {
        "ATA",
        LLRP_ProtocolID_ATA,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estQType[] =
{
  
    {
        "Dynamic",
        LLRP_QType_Dynamic,
    },
    {
        "Static",
        LLRP_QType_Static,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicC1G2TargetStrategy[] =
{
  
    {
        "TargetA",
        LLRP_ThingMagicC1G2TargetStrategy_TargetA,
    },
    {
        "TargetB",
        LLRP_ThingMagicC1G2TargetStrategy_TargetB,
    },
    {
        "TargetAB",
        LLRP_ThingMagicC1G2TargetStrategy_TargetAB,
    },
    {
        "TargetBA",
        LLRP_ThingMagicC1G2TargetStrategy_TargetBA,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustomTagOpSpecResultType[] =
{
  
    {
        "Success",
        LLRP_ThingMagicCustomTagOpSpecResultType_Success,
    },
    {
        "Nonspecific_Tag_Error",
        LLRP_ThingMagicCustomTagOpSpecResultType_Nonspecific_Tag_Error,
    },
    {
        "No_Response_From_Tag",
        LLRP_ThingMagicCustomTagOpSpecResultType_No_Response_From_Tag,
    },
    {
        "Nonspecific_Reader_Error",
        LLRP_ThingMagicCustomTagOpSpecResultType_Nonspecific_Reader_Error,
    },
    {
        "Unsupported_Operation",
        LLRP_ThingMagicCustomTagOpSpecResultType_Unsupported_Operation,
    },
    {
        "Tag_Memory_Overrun_Error",
        LLRP_ThingMagicCustomTagOpSpecResultType_Tag_Memory_Overrun_Error,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicGen2DivideRatio[] =
{
  
    {
        "Divide_Ratio_8",
        LLRP_ThingMagicGen2DivideRatio_Divide_Ratio_8,
    },
    {
        "Divide_Ratio_64_3",
        LLRP_ThingMagicGen2DivideRatio_Divide_Ratio_64_3,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicGen2TagEncoding[] =
{
  
    {
        "FM0",
        LLRP_ThingMagicGen2TagEncoding_FM0,
    },
    {
        "M2",
        LLRP_ThingMagicGen2TagEncoding_M2,
    },
    {
        "M4",
        LLRP_ThingMagicGen2TagEncoding_M4,
    },
    {
        "M8",
        LLRP_ThingMagicGen2TagEncoding_M8,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustomAirProtocolList[] =
{
  
    {
        "Iso180006b",
        LLRP_ThingMagicCustomAirProtocolList_Iso180006b,
    },
    {
        "IPX64",
        LLRP_ThingMagicCustomAirProtocolList_IPX64,
    },
    {
        "IPX256",
        LLRP_ThingMagicCustomAirProtocolList_IPX256,
    },
    {
        "Ata",
        LLRP_ThingMagicCustomAirProtocolList_Ata,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicISO180006BFilterType[] =
{
  
    {
        "ISO180006BSelect",
        LLRP_ThingMagicISO180006BFilterType_ISO180006BSelect,
    },
    {
        "ISO180006BTagData",
        LLRP_ThingMagicISO180006BFilterType_ISO180006BTagData,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustom18K6BDelimiter[] =
{
  
    {
        "ISO180006B_Delimiter1",
        LLRP_ThingMagicCustom18K6BDelimiter_ISO180006B_Delimiter1,
    },
    {
        "ISO180006B_Delimiter4",
        LLRP_ThingMagicCustom18K6BDelimiter_ISO180006B_Delimiter4,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustom18K6BModulationDepth[] =
{
  
    {
        "ISO180006B_ModulationDepth99percent",
        LLRP_ThingMagicCustom18K6BModulationDepth_ISO180006B_ModulationDepth99percent,
    },
    {
        "ISO180006B_ModulationDepth11percent",
        LLRP_ThingMagicCustom18K6BModulationDepth_ISO180006B_ModulationDepth11percent,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustom18K6BLinkFrequency[] =
{
  
    {
        "ISO180006B_LINKFREQUENCY_40KHZ",
        LLRP_ThingMagicCustom18K6BLinkFrequency_ISO180006B_LINKFREQUENCY_40KHZ,
    },
    {
        "ISO180006B_LINKFREQUENCY_160KHZ",
        LLRP_ThingMagicCustom18K6BLinkFrequency_ISO180006B_LINKFREQUENCY_160KHZ,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustomIDSSensorType[] =
{
  
    {
        "IDSSL900A_SENSOR_TEMP",
        LLRP_ThingMagicCustomIDSSensorType_IDSSL900A_SENSOR_TEMP,
    },
    {
        "IDSSL900A_SENSOR_EXT1",
        LLRP_ThingMagicCustomIDSSensorType_IDSSL900A_SENSOR_EXT1,
    },
    {
        "IDSSL900A_SENSOR_EXT2",
        LLRP_ThingMagicCustomIDSSensorType_IDSSL900A_SENSOR_EXT2,
    },
    {
        "IDSSL900A_SENSOR_BATTV",
        LLRP_ThingMagicCustomIDSSensorType_IDSSL900A_SENSOR_BATTV,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustomIDSPasswordLevel[] =
{
  
    {
        "IDSSL900A_PASSWORD_NOTALLOWED",
        LLRP_ThingMagicCustomIDSPasswordLevel_IDSSL900A_PASSWORD_NOTALLOWED,
    },
    {
        "IDSSL900A_PASSWORD_SYSTEM",
        LLRP_ThingMagicCustomIDSPasswordLevel_IDSSL900A_PASSWORD_SYSTEM,
    },
    {
        "IDSSL900A_PASSWORD_APPLICATION",
        LLRP_ThingMagicCustomIDSPasswordLevel_IDSSL900A_PASSWORD_APPLICATION,
    },
    {
        "IDSSL900A_PASSWORD_MEASUREMENT",
        LLRP_ThingMagicCustomIDSPasswordLevel_IDSSL900A_PASSWORD_MEASUREMENT,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustomIDSLoggingForm[] =
{
  
    {
        "IDSSL900A_LOGGINGFORM_DENSE",
        LLRP_ThingMagicCustomIDSLoggingForm_IDSSL900A_LOGGINGFORM_DENSE,
    },
    {
        "IDSSL900A_LOGGINGFORM_OUTOFLIMITS",
        LLRP_ThingMagicCustomIDSLoggingForm_IDSSL900A_LOGGINGFORM_OUTOFLIMITS,
    },
    {
        "IDSSL900A_LOGGINGFORM_LIMITSCROSSING",
        LLRP_ThingMagicCustomIDSLoggingForm_IDSSL900A_LOGGINGFORM_LIMITSCROSSING,
    },
    {
        "IDSSL900A_LOGGINGFORM_IRQ1",
        LLRP_ThingMagicCustomIDSLoggingForm_IDSSL900A_LOGGINGFORM_IRQ1,
    },
    {
        "IDSSL900A_LOGGINGFORM_IRQ2",
        LLRP_ThingMagicCustomIDSLoggingForm_IDSSL900A_LOGGINGFORM_IRQ2,
    },
    {
        "IDSSL900A_LOGGINGFORM_IRQ1IRQ2",
        LLRP_ThingMagicCustomIDSLoggingForm_IDSSL900A_LOGGINGFORM_IRQ1IRQ2,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustomIDSStorageRule[] =
{
  
    {
        "IDSSL900A_STORAGERULE_NORMAL",
        LLRP_ThingMagicCustomIDSStorageRule_IDSSL900A_STORAGERULE_NORMAL,
    },
    {
        "IDSSL900A_STORAGERULE_ROLLING",
        LLRP_ThingMagicCustomIDSStorageRule_IDSSL900A_STORAGERULE_ROLLING,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustomIDSSFEType[] =
{
  
    {
        "IDSSL900A_SFE_RANG",
        LLRP_ThingMagicCustomIDSSFEType_IDSSL900A_SFE_RANG,
    },
    {
        "IDSSL900A_SFE_SETI",
        LLRP_ThingMagicCustomIDSSFEType_IDSSL900A_SFE_SETI,
    },
    {
        "IDSSL900A_SFE_EXT1",
        LLRP_ThingMagicCustomIDSSFEType_IDSSL900A_SFE_EXT1,
    },
    {
        "IDSSL900A_SFE_EXT2",
        LLRP_ThingMagicCustomIDSSFEType_IDSSL900A_SFE_EXT2,
    },
    {
        "IDSSL900A_SFE_AUTORANGEDISABLE",
        LLRP_ThingMagicCustomIDSSFEType_IDSSL900A_SFE_AUTORANGEDISABLE,
    },
    {
        "IDSSL900A_SFE_VERIFYSENSORID",
        LLRP_ThingMagicCustomIDSSFEType_IDSSL900A_SFE_VERIFYSENSORID,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicPhaseMode[] =
{
  
    {
        "Disabled",
        LLRP_ThingMagicPhaseMode_Disabled,
    },
    {
        "Enabled",
        LLRP_ThingMagicPhaseMode_Enabled,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicFastSearchValue[] =
{
  
    {
        "Disabled",
        LLRP_ThingMagicFastSearchValue_Disabled,
    },
    {
        "Enabled",
        LLRP_ThingMagicFastSearchValue_Enabled,
    },
    { 0, 0 }
};



/*
*****************************************************************
**
** Custom message THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER =
{
    .bIsMessage             = TRUE,
    .pName                  = "THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 1,
    .pResponseType          = 
          &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER,
    .ppFieldDescriptorTable = LLRP_apfdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER,
    .nSizeBytes             = sizeof(LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_encode,

  
    .pfIsAllowedIn          = NULL,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER[] =
{
  
    &LLRP_fdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_MagicNumber,
    &LLRP_fdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_BootToSafeMode,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_MagicNumber =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "MagicNumber",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_BootToSafeMode =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "BootToSafeMode",
    .pEnumTable         = NULL,
};

LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER *
LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_construct (void)
{
    LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER *pNew;

    pNew = (LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER *)
        LLRP_Element_construct(&LLRP_tdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER);

    return pNew;
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_destruct (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_decodeFields (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->MagicNumber =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_MagicNumber);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_MagicNumber);
    }
    
    if(NULL != pThis)
    {
        pThis->BootToSafeMode =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_BootToSafeMode);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_BootToSafeMode);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_assimilateSubParameters (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u32_t
LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_getMagicNumber (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER *pThis)
{
    return pThis->MagicNumber;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_setMagicNumber (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER *pThis,
  llrp_u32_t Value)
{
    pThis->MagicNumber = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_getBootToSafeMode (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER *pThis)
{
    return pThis->BootToSafeMode;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_setBootToSafeMode (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER *pThis,
  llrp_u1_t Value)
{
    pThis->BootToSafeMode = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_beginCustom (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_addCustom (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_encode (
  const LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u32(pEncoderStream,
        pThis->MagicNumber,
        &LLRP_fdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_MagicNumber);

    pOps->pfPut_u1(pEncoderStream,
        pThis->BootToSafeMode,
        &LLRP_fdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_BootToSafeMode);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


/*
*****************************************************************
**
** Custom message THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER =
{
    .bIsMessage             = TRUE,
    .pName                  = "THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 2,
    .pResponseType          = 
          NULL
        ,
    .ppFieldDescriptorTable = LLRP_apfdTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER,
    .nSizeBytes             = sizeof(LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_encode,

  
    .pfIsAllowedIn          = NULL,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER[] =
{
  
    NULL
};


LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER *
LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_construct (void)
{
    LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER *pNew;

    pNew = (LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER *)
        LLRP_Element_construct(&LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER);

    return pNew;
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_destruct (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_decodeFields (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_assimilateSubParameters (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of LLRPStatus
    pType = &LLRP_tdLLRPStatus;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pLLRPStatus = (LLRP_tSLLRPStatus *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSLLRPStatus *
LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_getLLRPStatus (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER *pThis)
{
    return pThis->pLLRPStatus;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_setLLRPStatus (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER *pThis,
  LLRP_tSLLRPStatus * pValue)
{
    SUBPARAM_SET(pLLRPStatus, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_beginCustom (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_addCustom (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_encode (
  const LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdLLRPStatus;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pLLRPStatus,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


/*
*****************************************************************
**
** Custom message THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS =
{
    .bIsMessage             = TRUE,
    .pName                  = "THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 3,
    .pResponseType          = 
          &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS,
    .ppFieldDescriptorTable = LLRP_apfdTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS,
    .nSizeBytes             = sizeof(LLRP_tSTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS_encode,

  
    .pfIsAllowedIn          = NULL,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS[] =
{
  
    NULL
};


LLRP_tSTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS *
LLRP_THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS_construct (void)
{
    LLRP_tSTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS *pNew;

    pNew = (LLRP_tSTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS *)
        LLRP_Element_construct(&LLRP_tdTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS);

    return pNew;
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS_destruct (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS_decodeFields (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS_assimilateSubParameters (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS_beginCustom (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS_addCustom (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS_encode (
  const LLRP_tSTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


/*
*****************************************************************
**
** Custom message THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS =
{
    .bIsMessage             = TRUE,
    .pName                  = "THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 4,
    .pResponseType          = 
          NULL
        ,
    .ppFieldDescriptorTable = LLRP_apfdTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS,
    .nSizeBytes             = sizeof(LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_encode,

  
    .pfIsAllowedIn          = NULL,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS[] =
{
  
    NULL
};


LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS *
LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_construct (void)
{
    LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS *pNew;

    pNew = (LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS *)
        LLRP_Element_construct(&LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS);

    return pNew;
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_destruct (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_decodeFields (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_assimilateSubParameters (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of LLRPStatus
    pType = &LLRP_tdLLRPStatus;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pLLRPStatus = (LLRP_tSLLRPStatus *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSLLRPStatus *
LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_getLLRPStatus (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS *pThis)
{
    return pThis->pLLRPStatus;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_setLLRPStatus (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS *pThis,
  LLRP_tSLLRPStatus * pValue)
{
    SUBPARAM_SET(pLLRPStatus, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_beginCustom (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_addCustom (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_encode (
  const LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdLLRPStatus;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pLLRPStatus,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


/*
*****************************************************************
**
** Custom message THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME =
{
    .bIsMessage             = TRUE,
    .pName                  = "THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 5,
    .pResponseType          = 
          &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME,
    .ppFieldDescriptorTable = LLRP_apfdTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME,
    .nSizeBytes             = sizeof(LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME_encode,

  
    .pfIsAllowedIn          = NULL,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME[] =
{
  
    NULL
};


LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME *
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME_construct (void)
{
    LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME *pNew;

    pNew = (LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME *)
        LLRP_Element_construct(&LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME);

    return pNew;
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME_destruct (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME_decodeFields (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME_assimilateSubParameters (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME_beginCustom (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME_addCustom (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME_encode (
  const LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


/*
*****************************************************************
**
** Custom message THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME =
{
    .bIsMessage             = TRUE,
    .pName                  = "THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 6,
    .pResponseType          = 
          NULL
        ,
    .ppFieldDescriptorTable = LLRP_apfdTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME,
    .nSizeBytes             = sizeof(LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_encode,

  
    .pfIsAllowedIn          = NULL,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME[] =
{
  
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_Microseconds,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_Microseconds =
{
    .eFieldType         = LLRP_FT_U64,
    .eFieldFormat       = LLRP_FMT_DATETIME,
    .pName              = "Microseconds",
    .pEnumTable         = NULL,
};

LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME *
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_construct (void)
{
    LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME *pNew;

    pNew = (LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME *)
        LLRP_Element_construct(&LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME);

    return pNew;
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_destruct (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_decodeFields (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->Microseconds =
                pOps->pfGet_u64(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_Microseconds);
    }
    else
    {
        pOps->pfGet_u64(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_Microseconds);
    }
    
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_assimilateSubParameters (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of LLRPStatus
    pType = &LLRP_tdLLRPStatus;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pLLRPStatus = (LLRP_tSLLRPStatus *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u64_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_getMicroseconds (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME *pThis)
{
    return pThis->Microseconds;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_setMicroseconds (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME *pThis,
  llrp_u64_t Value)
{
    pThis->Microseconds = Value;
    return LLRP_RC_OK;
}


LLRP_tSLLRPStatus *
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_getLLRPStatus (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME *pThis)
{
    return pThis->pLLRPStatus;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_setLLRPStatus (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME *pThis,
  LLRP_tSLLRPStatus * pValue)
{
    SUBPARAM_SET(pLLRPStatus, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_beginCustom (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_addCustom (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_encode (
  const LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u64(pEncoderStream,
        pThis->Microseconds,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_Microseconds);

    pType = &LLRP_tdLLRPStatus;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pLLRPStatus,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


/*
*****************************************************************
**
** Custom message THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS =
{
    .bIsMessage             = TRUE,
    .pName                  = "THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 7,
    .pResponseType          = 
          &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS,
    .ppFieldDescriptorTable = LLRP_apfdTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS,
    .nSizeBytes             = sizeof(LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_encode,

  
    .pfIsAllowedIn          = NULL,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS[] =
{
  
    &LLRP_fdTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_AntennaID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_AntennaID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AntennaID",
    .pEnumTable         = NULL,
};

LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS *
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_construct (void)
{
    LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS *pNew;

    pNew = (LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS *)
        LLRP_Element_construct(&LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS);

    return pNew;
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_destruct (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_decodeFields (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->AntennaID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_AntennaID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_AntennaID);
    }
    
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_assimilateSubParameters (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_getAntennaID (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS *pThis)
{
    return pThis->AntennaID;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_setAntennaID (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS *pThis,
  llrp_u16_t Value)
{
    pThis->AntennaID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_beginCustom (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_addCustom (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_encode (
  const LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->AntennaID,
        &LLRP_fdTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_AntennaID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


/*
*****************************************************************
**
** Custom message THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS =
{
    .bIsMessage             = TRUE,
    .pName                  = "THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 8,
    .pResponseType          = 
          NULL
        ,
    .ppFieldDescriptorTable = LLRP_apfdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS,
    .nSizeBytes             = sizeof(LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_encode,

  
    .pfIsAllowedIn          = NULL,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS[] =
{
  
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TagsIdentified,
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TagsNotIdentified,
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_MemoryReadFailures,
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_WriteOperations,
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_WriteFailures,
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_KillOperations,
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_KillFailures,
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_EraseOperations,
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_EraseFailures,
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_LockOperations,
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_LockFailures,
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_NoiseLevel,
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TimeEnergised,
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_PowerLevel,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TagsIdentified =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "TagsIdentified",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TagsNotIdentified =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "TagsNotIdentified",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_MemoryReadFailures =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "MemoryReadFailures",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_WriteOperations =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "WriteOperations",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_WriteFailures =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "WriteFailures",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_KillOperations =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "KillOperations",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_KillFailures =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "KillFailures",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_EraseOperations =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "EraseOperations",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_EraseFailures =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "EraseFailures",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_LockOperations =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "LockOperations",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_LockFailures =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "LockFailures",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_NoiseLevel =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "NoiseLevel",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TimeEnergised =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "TimeEnergised",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_PowerLevel =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "PowerLevel",
    .pEnumTable         = NULL,
};

LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_construct (void)
{
    LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pNew;

    pNew = (LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *)
        LLRP_Element_construct(&LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS);

    return pNew;
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_destruct (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_decodeFields (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->TagsIdentified =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TagsIdentified);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TagsIdentified);
    }
    
    if(NULL != pThis)
    {
        pThis->TagsNotIdentified =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TagsNotIdentified);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TagsNotIdentified);
    }
    
    if(NULL != pThis)
    {
        pThis->MemoryReadFailures =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_MemoryReadFailures);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_MemoryReadFailures);
    }
    
    if(NULL != pThis)
    {
        pThis->WriteOperations =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_WriteOperations);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_WriteOperations);
    }
    
    if(NULL != pThis)
    {
        pThis->WriteFailures =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_WriteFailures);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_WriteFailures);
    }
    
    if(NULL != pThis)
    {
        pThis->KillOperations =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_KillOperations);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_KillOperations);
    }
    
    if(NULL != pThis)
    {
        pThis->KillFailures =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_KillFailures);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_KillFailures);
    }
    
    if(NULL != pThis)
    {
        pThis->EraseOperations =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_EraseOperations);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_EraseOperations);
    }
    
    if(NULL != pThis)
    {
        pThis->EraseFailures =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_EraseFailures);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_EraseFailures);
    }
    
    if(NULL != pThis)
    {
        pThis->LockOperations =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_LockOperations);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_LockOperations);
    }
    
    if(NULL != pThis)
    {
        pThis->LockFailures =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_LockFailures);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_LockFailures);
    }
    
    if(NULL != pThis)
    {
        pThis->NoiseLevel =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_NoiseLevel);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_NoiseLevel);
    }
    
    if(NULL != pThis)
    {
        pThis->TimeEnergised =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TimeEnergised);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TimeEnergised);
    }
    
    if(NULL != pThis)
    {
        pThis->PowerLevel =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_PowerLevel);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_PowerLevel);
    }
    
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_assimilateSubParameters (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of LLRPStatus
    pType = &LLRP_tdLLRPStatus;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pLLRPStatus = (LLRP_tSLLRPStatus *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getTagsIdentified (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->TagsIdentified;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setTagsIdentified (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->TagsIdentified = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getTagsNotIdentified (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->TagsNotIdentified;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setTagsNotIdentified (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->TagsNotIdentified = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getMemoryReadFailures (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->MemoryReadFailures;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setMemoryReadFailures (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->MemoryReadFailures = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getWriteOperations (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->WriteOperations;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setWriteOperations (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->WriteOperations = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getWriteFailures (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->WriteFailures;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setWriteFailures (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->WriteFailures = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getKillOperations (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->KillOperations;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setKillOperations (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->KillOperations = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getKillFailures (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->KillFailures;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setKillFailures (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->KillFailures = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getEraseOperations (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->EraseOperations;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setEraseOperations (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->EraseOperations = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getEraseFailures (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->EraseFailures;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setEraseFailures (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->EraseFailures = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getLockOperations (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->LockOperations;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setLockOperations (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->LockOperations = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getLockFailures (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->LockFailures;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setLockFailures (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->LockFailures = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getNoiseLevel (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->NoiseLevel;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setNoiseLevel (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->NoiseLevel = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getTimeEnergised (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->TimeEnergised;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setTimeEnergised (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->TimeEnergised = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getPowerLevel (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->PowerLevel;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setPowerLevel (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->PowerLevel = Value;
    return LLRP_RC_OK;
}


LLRP_tSLLRPStatus *
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getLLRPStatus (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->pLLRPStatus;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setLLRPStatus (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  LLRP_tSLLRPStatus * pValue)
{
    SUBPARAM_SET(pLLRPStatus, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_beginCustom (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_addCustom (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_encode (
  const LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u32(pEncoderStream,
        pThis->TagsIdentified,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TagsIdentified);

    pOps->pfPut_u32(pEncoderStream,
        pThis->TagsNotIdentified,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TagsNotIdentified);

    pOps->pfPut_u32(pEncoderStream,
        pThis->MemoryReadFailures,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_MemoryReadFailures);

    pOps->pfPut_u32(pEncoderStream,
        pThis->WriteOperations,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_WriteOperations);

    pOps->pfPut_u32(pEncoderStream,
        pThis->WriteFailures,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_WriteFailures);

    pOps->pfPut_u32(pEncoderStream,
        pThis->KillOperations,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_KillOperations);

    pOps->pfPut_u32(pEncoderStream,
        pThis->KillFailures,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_KillFailures);

    pOps->pfPut_u32(pEncoderStream,
        pThis->EraseOperations,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_EraseOperations);

    pOps->pfPut_u32(pEncoderStream,
        pThis->EraseFailures,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_EraseFailures);

    pOps->pfPut_u32(pEncoderStream,
        pThis->LockOperations,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_LockOperations);

    pOps->pfPut_u32(pEncoderStream,
        pThis->LockFailures,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_LockFailures);

    pOps->pfPut_u32(pEncoderStream,
        pThis->NoiseLevel,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_NoiseLevel);

    pOps->pfPut_u32(pEncoderStream,
        pThis->TimeEnergised,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TimeEnergised);

    pOps->pfPut_u32(pEncoderStream,
        pThis->PowerLevel,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_PowerLevel);

    pType = &LLRP_tdLLRPStatus;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pLLRPStatus,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


/*
*****************************************************************
**
** Custom message THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS =
{
    .bIsMessage             = TRUE,
    .pName                  = "THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 11,
    .pResponseType          = 
          &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS,
    .ppFieldDescriptorTable = LLRP_apfdTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS,
    .nSizeBytes             = sizeof(LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS_encode,

  
    .pfIsAllowedIn          = NULL,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS[] =
{
  
    NULL
};


LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS *
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS_construct (void)
{
    LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS *pNew;

    pNew = (LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS *)
        LLRP_Element_construct(&LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS);

    return pNew;
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS_destruct (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS_decodeFields (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS_assimilateSubParameters (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS_beginCustom (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS_addCustom (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS_encode (
  const LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


/*
*****************************************************************
**
** Custom message THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS =
{
    .bIsMessage             = TRUE,
    .pName                  = "THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 12,
    .pResponseType          = 
          NULL
        ,
    .ppFieldDescriptorTable = LLRP_apfdTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS,
    .nSizeBytes             = sizeof(LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_encode,

  
    .pfIsAllowedIn          = NULL,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS[] =
{
  
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_ReaderDeviceOperatingStatus,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_ReaderDeviceOperatingStatus =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ReaderDeviceOperatingStatus",
    .pEnumTable         = LLRP_estThingMagicReaderOperatingStatus,
};

LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS *
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_construct (void)
{
    LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS *pNew;

    pNew = (LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS *)
        LLRP_Element_construct(&LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS);

    return pNew;
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_destruct (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_decodeFields (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eReaderDeviceOperatingStatus =
                (LLRP_tEThingMagicReaderOperatingStatus) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_ReaderDeviceOperatingStatus);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_ReaderDeviceOperatingStatus);
    }

}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_assimilateSubParameters (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of LLRPStatus
    pType = &LLRP_tdLLRPStatus;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pLLRPStatus = (LLRP_tSLLRPStatus *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicReaderOperatingStatus
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_getReaderDeviceOperatingStatus (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS *pThis)
{
    return pThis->eReaderDeviceOperatingStatus;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_setReaderDeviceOperatingStatus (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS *pThis,
  LLRP_tEThingMagicReaderOperatingStatus eValue)
{
    pThis->eReaderDeviceOperatingStatus = eValue;
    return LLRP_RC_OK;
}


LLRP_tSLLRPStatus *
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_getLLRPStatus (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS *pThis)
{
    return pThis->pLLRPStatus;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_setLLRPStatus (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS *pThis,
  LLRP_tSLLRPStatus * pValue)
{
    SUBPARAM_SET(pLLRPStatus, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_beginCustom (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_addCustom (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_encode (
  const LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eReaderDeviceOperatingStatus,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_ReaderDeviceOperatingStatus);

    pType = &LLRP_tdLLRPStatus;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pLLRPStatus,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDeviceControlCapabilities
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDeviceControlCapabilities =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicDeviceControlCapabilities",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 1,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicDeviceControlCapabilities,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicDeviceControlCapabilities),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDeviceControlCapabilities_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDeviceControlCapabilities_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDeviceControlCapabilities_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDeviceControlCapabilities_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDeviceControlCapabilities_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicDeviceControlCapabilities_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDeviceControlCapabilities[] =
{
  
    &LLRP_fdThingMagicDeviceControlCapabilities_RequestedData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDeviceControlCapabilities_RequestedData =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "RequestedData",
    .pEnumTable         = LLRP_estThingMagicControlCapabilities,
};

LLRP_tSThingMagicDeviceControlCapabilities *
LLRP_ThingMagicDeviceControlCapabilities_construct (void)
{
    LLRP_tSThingMagicDeviceControlCapabilities *pNew;

    pNew = (LLRP_tSThingMagicDeviceControlCapabilities *)
        LLRP_Element_construct(&LLRP_tdThingMagicDeviceControlCapabilities);

    return pNew;
}

void
LLRP_ThingMagicDeviceControlCapabilities_destruct (
  LLRP_tSThingMagicDeviceControlCapabilities *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDeviceControlCapabilities_decodeFields (
  LLRP_tSThingMagicDeviceControlCapabilities *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eRequestedData =
                (LLRP_tEThingMagicControlCapabilities) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicDeviceControlCapabilities_RequestedData);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicDeviceControlCapabilities_RequestedData);
    }

}

void
LLRP_ThingMagicDeviceControlCapabilities_assimilateSubParameters (
  LLRP_tSThingMagicDeviceControlCapabilities *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDeviceControlCapabilities))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicControlCapabilities
LLRP_ThingMagicDeviceControlCapabilities_getRequestedData (
  LLRP_tSThingMagicDeviceControlCapabilities *pThis)
{
    return pThis->eRequestedData;
}

LLRP_tResultCode
LLRP_ThingMagicDeviceControlCapabilities_setRequestedData (
  LLRP_tSThingMagicDeviceControlCapabilities *pThis,
  LLRP_tEThingMagicControlCapabilities eValue)
{
    pThis->eRequestedData = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDeviceControlCapabilities_beginCustom (
  LLRP_tSThingMagicDeviceControlCapabilities *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDeviceControlCapabilities_addCustom (
  LLRP_tSThingMagicDeviceControlCapabilities *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDeviceControlCapabilities))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDeviceControlCapabilities_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDeviceControlCapabilities_encode (
  const LLRP_tSThingMagicDeviceControlCapabilities *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eRequestedData,
        &LLRP_fdThingMagicDeviceControlCapabilities_RequestedData);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDeviceControlCapabilities_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CAPABILITIES)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter DeviceInformationCapabilities
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdDeviceInformationCapabilities =
{
    .bIsMessage             = FALSE,
    .pName                  = "DeviceInformationCapabilities",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 2,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdDeviceInformationCapabilities,
    .nSizeBytes             = sizeof(LLRP_tSDeviceInformationCapabilities),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_DeviceInformationCapabilities_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_DeviceInformationCapabilities_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_DeviceInformationCapabilities_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_DeviceInformationCapabilities_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_DeviceInformationCapabilities_encode,

  
    .pfIsAllowedIn          = LLRP_DeviceInformationCapabilities_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdDeviceInformationCapabilities[] =
{
  
    &LLRP_fdDeviceInformationCapabilities_ReaderEPC,
    &LLRP_fdDeviceInformationCapabilities_ReaderSerialNumber,
    &LLRP_fdDeviceInformationCapabilities_HardwareVersion,
    &LLRP_fdDeviceInformationCapabilities_AFEVersion,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdDeviceInformationCapabilities_ReaderEPC =
{
    .eFieldType         = LLRP_FT_UTF8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ReaderEPC",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdDeviceInformationCapabilities_ReaderSerialNumber =
{
    .eFieldType         = LLRP_FT_UTF8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ReaderSerialNumber",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdDeviceInformationCapabilities_HardwareVersion =
{
    .eFieldType         = LLRP_FT_UTF8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "HardwareVersion",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdDeviceInformationCapabilities_AFEVersion =
{
    .eFieldType         = LLRP_FT_UTF8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AFEVersion",
    .pEnumTable         = NULL,
};

LLRP_tSDeviceInformationCapabilities *
LLRP_DeviceInformationCapabilities_construct (void)
{
    LLRP_tSDeviceInformationCapabilities *pNew;

    pNew = (LLRP_tSDeviceInformationCapabilities *)
        LLRP_Element_construct(&LLRP_tdDeviceInformationCapabilities);

    return pNew;
}

void
LLRP_DeviceInformationCapabilities_destruct (
  LLRP_tSDeviceInformationCapabilities *pThis)
{
  
    LLRP_utf8v_clear(&pThis->ReaderEPC);
      
    LLRP_utf8v_clear(&pThis->ReaderSerialNumber);
      
    LLRP_utf8v_clear(&pThis->HardwareVersion);
      
    LLRP_utf8v_clear(&pThis->AFEVersion);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_DeviceInformationCapabilities_decodeFields (
  LLRP_tSDeviceInformationCapabilities *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->ReaderEPC =
                pOps->pfGet_utf8v(pDecoderStream,
                        &LLRP_fdDeviceInformationCapabilities_ReaderEPC);
    }
    else
    {
        pOps->pfGet_utf8v(pDecoderStream,
                &LLRP_fdDeviceInformationCapabilities_ReaderEPC);
    }
    
    if(NULL != pThis)
    {
        pThis->ReaderSerialNumber =
                pOps->pfGet_utf8v(pDecoderStream,
                        &LLRP_fdDeviceInformationCapabilities_ReaderSerialNumber);
    }
    else
    {
        pOps->pfGet_utf8v(pDecoderStream,
                &LLRP_fdDeviceInformationCapabilities_ReaderSerialNumber);
    }
    
    if(NULL != pThis)
    {
        pThis->HardwareVersion =
                pOps->pfGet_utf8v(pDecoderStream,
                        &LLRP_fdDeviceInformationCapabilities_HardwareVersion);
    }
    else
    {
        pOps->pfGet_utf8v(pDecoderStream,
                &LLRP_fdDeviceInformationCapabilities_HardwareVersion);
    }
    
    if(NULL != pThis)
    {
        pThis->AFEVersion =
                pOps->pfGet_utf8v(pDecoderStream,
                        &LLRP_fdDeviceInformationCapabilities_AFEVersion);
    }
    else
    {
        pOps->pfGet_utf8v(pDecoderStream,
                &LLRP_fdDeviceInformationCapabilities_AFEVersion);
    }
    
}

void
LLRP_DeviceInformationCapabilities_assimilateSubParameters (
  LLRP_tSDeviceInformationCapabilities *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdDeviceInformationCapabilities))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_utf8v_t
LLRP_DeviceInformationCapabilities_getReaderEPC (
  LLRP_tSDeviceInformationCapabilities *pThis)
{
    return pThis->ReaderEPC;
}

LLRP_tResultCode
LLRP_DeviceInformationCapabilities_setReaderEPC (
  LLRP_tSDeviceInformationCapabilities *pThis,
  llrp_utf8v_t Value)
{
    LLRP_utf8v_clear(&pThis->ReaderEPC);

    pThis->ReaderEPC = Value;
    return LLRP_RC_OK;
}


llrp_utf8v_t
LLRP_DeviceInformationCapabilities_getReaderSerialNumber (
  LLRP_tSDeviceInformationCapabilities *pThis)
{
    return pThis->ReaderSerialNumber;
}

LLRP_tResultCode
LLRP_DeviceInformationCapabilities_setReaderSerialNumber (
  LLRP_tSDeviceInformationCapabilities *pThis,
  llrp_utf8v_t Value)
{
    LLRP_utf8v_clear(&pThis->ReaderSerialNumber);

    pThis->ReaderSerialNumber = Value;
    return LLRP_RC_OK;
}


llrp_utf8v_t
LLRP_DeviceInformationCapabilities_getHardwareVersion (
  LLRP_tSDeviceInformationCapabilities *pThis)
{
    return pThis->HardwareVersion;
}

LLRP_tResultCode
LLRP_DeviceInformationCapabilities_setHardwareVersion (
  LLRP_tSDeviceInformationCapabilities *pThis,
  llrp_utf8v_t Value)
{
    LLRP_utf8v_clear(&pThis->HardwareVersion);

    pThis->HardwareVersion = Value;
    return LLRP_RC_OK;
}


llrp_utf8v_t
LLRP_DeviceInformationCapabilities_getAFEVersion (
  LLRP_tSDeviceInformationCapabilities *pThis)
{
    return pThis->AFEVersion;
}

LLRP_tResultCode
LLRP_DeviceInformationCapabilities_setAFEVersion (
  LLRP_tSDeviceInformationCapabilities *pThis,
  llrp_utf8v_t Value)
{
    LLRP_utf8v_clear(&pThis->AFEVersion);

    pThis->AFEVersion = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_DeviceInformationCapabilities_beginCustom (
  LLRP_tSDeviceInformationCapabilities *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_DeviceInformationCapabilities_addCustom (
  LLRP_tSDeviceInformationCapabilities *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdDeviceInformationCapabilities))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_DeviceInformationCapabilities_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_DeviceInformationCapabilities_encode (
  const LLRP_tSDeviceInformationCapabilities *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_utf8v(pEncoderStream,
        pThis->ReaderEPC,
        &LLRP_fdDeviceInformationCapabilities_ReaderEPC);

    pOps->pfPut_utf8v(pEncoderStream,
        pThis->ReaderSerialNumber,
        &LLRP_fdDeviceInformationCapabilities_ReaderSerialNumber);

    pOps->pfPut_utf8v(pEncoderStream,
        pThis->HardwareVersion,
        &LLRP_fdDeviceInformationCapabilities_HardwareVersion);

    pOps->pfPut_utf8v(pEncoderStream,
        pThis->AFEVersion,
        &LLRP_fdDeviceInformationCapabilities_AFEVersion);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_DeviceInformationCapabilities_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CAPABILITIES_RESPONSE)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDeviceControlConfiguration
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDeviceControlConfiguration =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicDeviceControlConfiguration",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 3,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicDeviceControlConfiguration,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicDeviceControlConfiguration),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDeviceControlConfiguration_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDeviceControlConfiguration_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDeviceControlConfiguration_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDeviceControlConfiguration_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDeviceControlConfiguration_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicDeviceControlConfiguration_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDeviceControlConfiguration[] =
{
  
    &LLRP_fdThingMagicDeviceControlConfiguration_AntennaID,
    &LLRP_fdThingMagicDeviceControlConfiguration_RequestedData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDeviceControlConfiguration_AntennaID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AntennaID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDeviceControlConfiguration_RequestedData =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "RequestedData",
    .pEnumTable         = LLRP_estThingMagicControlConfiguration,
};

LLRP_tSThingMagicDeviceControlConfiguration *
LLRP_ThingMagicDeviceControlConfiguration_construct (void)
{
    LLRP_tSThingMagicDeviceControlConfiguration *pNew;

    pNew = (LLRP_tSThingMagicDeviceControlConfiguration *)
        LLRP_Element_construct(&LLRP_tdThingMagicDeviceControlConfiguration);

    return pNew;
}

void
LLRP_ThingMagicDeviceControlConfiguration_destruct (
  LLRP_tSThingMagicDeviceControlConfiguration *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDeviceControlConfiguration_decodeFields (
  LLRP_tSThingMagicDeviceControlConfiguration *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->AntennaID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDeviceControlConfiguration_AntennaID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDeviceControlConfiguration_AntennaID);
    }
    
    if(NULL != pThis)
    {
        pThis->eRequestedData =
                (LLRP_tEThingMagicControlConfiguration) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicDeviceControlConfiguration_RequestedData);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicDeviceControlConfiguration_RequestedData);
    }

}

void
LLRP_ThingMagicDeviceControlConfiguration_assimilateSubParameters (
  LLRP_tSThingMagicDeviceControlConfiguration *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDeviceControlConfiguration))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicDeviceControlConfiguration_getAntennaID (
  LLRP_tSThingMagicDeviceControlConfiguration *pThis)
{
    return pThis->AntennaID;
}

LLRP_tResultCode
LLRP_ThingMagicDeviceControlConfiguration_setAntennaID (
  LLRP_tSThingMagicDeviceControlConfiguration *pThis,
  llrp_u16_t Value)
{
    pThis->AntennaID = Value;
    return LLRP_RC_OK;
}


LLRP_tEThingMagicControlConfiguration
LLRP_ThingMagicDeviceControlConfiguration_getRequestedData (
  LLRP_tSThingMagicDeviceControlConfiguration *pThis)
{
    return pThis->eRequestedData;
}

LLRP_tResultCode
LLRP_ThingMagicDeviceControlConfiguration_setRequestedData (
  LLRP_tSThingMagicDeviceControlConfiguration *pThis,
  LLRP_tEThingMagicControlConfiguration eValue)
{
    pThis->eRequestedData = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDeviceControlConfiguration_beginCustom (
  LLRP_tSThingMagicDeviceControlConfiguration *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDeviceControlConfiguration_addCustom (
  LLRP_tSThingMagicDeviceControlConfiguration *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDeviceControlConfiguration))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDeviceControlConfiguration_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDeviceControlConfiguration_encode (
  const LLRP_tSThingMagicDeviceControlConfiguration *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->AntennaID,
        &LLRP_fdThingMagicDeviceControlConfiguration_AntennaID);

    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eRequestedData,
        &LLRP_fdThingMagicDeviceControlConfiguration_RequestedData);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDeviceControlConfiguration_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicReaderConfiguration
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicReaderConfiguration =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicReaderConfiguration",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 4,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicReaderConfiguration,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicReaderConfiguration),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicReaderConfiguration_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicReaderConfiguration_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicReaderConfiguration_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicReaderConfiguration_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicReaderConfiguration_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicReaderConfiguration_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicReaderConfiguration[] =
{
  
    &LLRP_fdThingMagicReaderConfiguration_ReaderDescription,
    &LLRP_fdThingMagicReaderConfiguration_ReaderRole,
    &LLRP_fdThingMagicReaderConfiguration_ReaderHostName,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicReaderConfiguration_ReaderDescription =
{
    .eFieldType         = LLRP_FT_UTF8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ReaderDescription",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicReaderConfiguration_ReaderRole =
{
    .eFieldType         = LLRP_FT_UTF8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ReaderRole",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicReaderConfiguration_ReaderHostName =
{
    .eFieldType         = LLRP_FT_UTF8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ReaderHostName",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicReaderConfiguration *
LLRP_ThingMagicReaderConfiguration_construct (void)
{
    LLRP_tSThingMagicReaderConfiguration *pNew;

    pNew = (LLRP_tSThingMagicReaderConfiguration *)
        LLRP_Element_construct(&LLRP_tdThingMagicReaderConfiguration);

    return pNew;
}

void
LLRP_ThingMagicReaderConfiguration_destruct (
  LLRP_tSThingMagicReaderConfiguration *pThis)
{
  
    LLRP_utf8v_clear(&pThis->ReaderDescription);
      
    LLRP_utf8v_clear(&pThis->ReaderRole);
      
    LLRP_utf8v_clear(&pThis->ReaderHostName);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicReaderConfiguration_decodeFields (
  LLRP_tSThingMagicReaderConfiguration *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->ReaderDescription =
                pOps->pfGet_utf8v(pDecoderStream,
                        &LLRP_fdThingMagicReaderConfiguration_ReaderDescription);
    }
    else
    {
        pOps->pfGet_utf8v(pDecoderStream,
                &LLRP_fdThingMagicReaderConfiguration_ReaderDescription);
    }
    
    if(NULL != pThis)
    {
        pThis->ReaderRole =
                pOps->pfGet_utf8v(pDecoderStream,
                        &LLRP_fdThingMagicReaderConfiguration_ReaderRole);
    }
    else
    {
        pOps->pfGet_utf8v(pDecoderStream,
                &LLRP_fdThingMagicReaderConfiguration_ReaderRole);
    }
    
    if(NULL != pThis)
    {
        pThis->ReaderHostName =
                pOps->pfGet_utf8v(pDecoderStream,
                        &LLRP_fdThingMagicReaderConfiguration_ReaderHostName);
    }
    else
    {
        pOps->pfGet_utf8v(pDecoderStream,
                &LLRP_fdThingMagicReaderConfiguration_ReaderHostName);
    }
    
}

void
LLRP_ThingMagicReaderConfiguration_assimilateSubParameters (
  LLRP_tSThingMagicReaderConfiguration *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicReaderConfiguration))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_utf8v_t
LLRP_ThingMagicReaderConfiguration_getReaderDescription (
  LLRP_tSThingMagicReaderConfiguration *pThis)
{
    return pThis->ReaderDescription;
}

LLRP_tResultCode
LLRP_ThingMagicReaderConfiguration_setReaderDescription (
  LLRP_tSThingMagicReaderConfiguration *pThis,
  llrp_utf8v_t Value)
{
    LLRP_utf8v_clear(&pThis->ReaderDescription);

    pThis->ReaderDescription = Value;
    return LLRP_RC_OK;
}


llrp_utf8v_t
LLRP_ThingMagicReaderConfiguration_getReaderRole (
  LLRP_tSThingMagicReaderConfiguration *pThis)
{
    return pThis->ReaderRole;
}

LLRP_tResultCode
LLRP_ThingMagicReaderConfiguration_setReaderRole (
  LLRP_tSThingMagicReaderConfiguration *pThis,
  llrp_utf8v_t Value)
{
    LLRP_utf8v_clear(&pThis->ReaderRole);

    pThis->ReaderRole = Value;
    return LLRP_RC_OK;
}


llrp_utf8v_t
LLRP_ThingMagicReaderConfiguration_getReaderHostName (
  LLRP_tSThingMagicReaderConfiguration *pThis)
{
    return pThis->ReaderHostName;
}

LLRP_tResultCode
LLRP_ThingMagicReaderConfiguration_setReaderHostName (
  LLRP_tSThingMagicReaderConfiguration *pThis,
  llrp_utf8v_t Value)
{
    LLRP_utf8v_clear(&pThis->ReaderHostName);

    pThis->ReaderHostName = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicReaderConfiguration_beginCustom (
  LLRP_tSThingMagicReaderConfiguration *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicReaderConfiguration_addCustom (
  LLRP_tSThingMagicReaderConfiguration *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicReaderConfiguration))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicReaderConfiguration_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicReaderConfiguration_encode (
  const LLRP_tSThingMagicReaderConfiguration *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_utf8v(pEncoderStream,
        pThis->ReaderDescription,
        &LLRP_fdThingMagicReaderConfiguration_ReaderDescription);

    pOps->pfPut_utf8v(pEncoderStream,
        pThis->ReaderRole,
        &LLRP_fdThingMagicReaderConfiguration_ReaderRole);

    pOps->pfPut_utf8v(pEncoderStream,
        pThis->ReaderHostName,
        &LLRP_fdThingMagicReaderConfiguration_ReaderHostName);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicReaderConfiguration_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicRegionConfiguration
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicRegionConfiguration =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicRegionConfiguration",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 5,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicRegionConfiguration,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicRegionConfiguration),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicRegionConfiguration_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicRegionConfiguration_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicRegionConfiguration_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicRegionConfiguration_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicRegionConfiguration_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicRegionConfiguration_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicRegionConfiguration[] =
{
  
    &LLRP_fdThingMagicRegionConfiguration_RegionID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicRegionConfiguration_RegionID =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "RegionID",
    .pEnumTable         = LLRP_estThingMagicRegionID,
};

LLRP_tSThingMagicRegionConfiguration *
LLRP_ThingMagicRegionConfiguration_construct (void)
{
    LLRP_tSThingMagicRegionConfiguration *pNew;

    pNew = (LLRP_tSThingMagicRegionConfiguration *)
        LLRP_Element_construct(&LLRP_tdThingMagicRegionConfiguration);

    return pNew;
}

void
LLRP_ThingMagicRegionConfiguration_destruct (
  LLRP_tSThingMagicRegionConfiguration *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicRegionConfiguration_decodeFields (
  LLRP_tSThingMagicRegionConfiguration *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eRegionID =
                (LLRP_tEThingMagicRegionID) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicRegionConfiguration_RegionID);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicRegionConfiguration_RegionID);
    }

}

void
LLRP_ThingMagicRegionConfiguration_assimilateSubParameters (
  LLRP_tSThingMagicRegionConfiguration *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicRegionConfiguration))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicRegionID
LLRP_ThingMagicRegionConfiguration_getRegionID (
  LLRP_tSThingMagicRegionConfiguration *pThis)
{
    return pThis->eRegionID;
}

LLRP_tResultCode
LLRP_ThingMagicRegionConfiguration_setRegionID (
  LLRP_tSThingMagicRegionConfiguration *pThis,
  LLRP_tEThingMagicRegionID eValue)
{
    pThis->eRegionID = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicRegionConfiguration_beginCustom (
  LLRP_tSThingMagicRegionConfiguration *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicRegionConfiguration_addCustom (
  LLRP_tSThingMagicRegionConfiguration *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicRegionConfiguration))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicRegionConfiguration_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicRegionConfiguration_encode (
  const LLRP_tSThingMagicRegionConfiguration *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eRegionID,
        &LLRP_fdThingMagicRegionConfiguration_RegionID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicRegionConfiguration_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicProtocolConfiguration
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicProtocolConfiguration =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicProtocolConfiguration",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 6,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicProtocolConfiguration,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicProtocolConfiguration),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicProtocolConfiguration_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicProtocolConfiguration_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicProtocolConfiguration_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicProtocolConfiguration_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicProtocolConfiguration_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicProtocolConfiguration_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicProtocolConfiguration[] =
{
  
    NULL
};


LLRP_tSThingMagicProtocolConfiguration *
LLRP_ThingMagicProtocolConfiguration_construct (void)
{
    LLRP_tSThingMagicProtocolConfiguration *pNew;

    pNew = (LLRP_tSThingMagicProtocolConfiguration *)
        LLRP_Element_construct(&LLRP_tdThingMagicProtocolConfiguration);

    return pNew;
}

void
LLRP_ThingMagicProtocolConfiguration_destruct (
  LLRP_tSThingMagicProtocolConfiguration *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicProtocolConfiguration_decodeFields (
  LLRP_tSThingMagicProtocolConfiguration *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicProtocolConfiguration_assimilateSubParameters (
  LLRP_tSThingMagicProtocolConfiguration *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-1 of Gen2CustomParameters
    pType = &LLRP_tdGen2CustomParameters;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pGen2CustomParameters = (LLRP_tSGen2CustomParameters *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of ISO18K6BCustomParameters
    pType = &LLRP_tdISO18K6BCustomParameters;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pISO18K6BCustomParameters = (LLRP_tSISO18K6BCustomParameters *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicProtocolConfiguration))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSGen2CustomParameters *
LLRP_ThingMagicProtocolConfiguration_getGen2CustomParameters (
  LLRP_tSThingMagicProtocolConfiguration *pThis)
{
    return pThis->pGen2CustomParameters;
}

LLRP_tResultCode
LLRP_ThingMagicProtocolConfiguration_setGen2CustomParameters (
  LLRP_tSThingMagicProtocolConfiguration *pThis,
  LLRP_tSGen2CustomParameters * pValue)
{
    SUBPARAM_SET(pGen2CustomParameters, pValue);

    return LLRP_RC_OK;
}


LLRP_tSISO18K6BCustomParameters *
LLRP_ThingMagicProtocolConfiguration_getISO18K6BCustomParameters (
  LLRP_tSThingMagicProtocolConfiguration *pThis)
{
    return pThis->pISO18K6BCustomParameters;
}

LLRP_tResultCode
LLRP_ThingMagicProtocolConfiguration_setISO18K6BCustomParameters (
  LLRP_tSThingMagicProtocolConfiguration *pThis,
  LLRP_tSISO18K6BCustomParameters * pValue)
{
    SUBPARAM_SET(pISO18K6BCustomParameters, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicProtocolConfiguration_beginCustom (
  LLRP_tSThingMagicProtocolConfiguration *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicProtocolConfiguration_addCustom (
  LLRP_tSThingMagicProtocolConfiguration *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicProtocolConfiguration))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicProtocolConfiguration_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicProtocolConfiguration_encode (
  const LLRP_tSThingMagicProtocolConfiguration *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdGen2CustomParameters;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pGen2CustomParameters,
        pType);
      
    pType = &LLRP_tdISO18K6BCustomParameters;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pISO18K6BCustomParameters,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicProtocolConfiguration_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter Gen2CustomParameters
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdGen2CustomParameters =
{
    .bIsMessage             = FALSE,
    .pName                  = "Gen2CustomParameters",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 7,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdGen2CustomParameters,
    .nSizeBytes             = sizeof(LLRP_tSGen2CustomParameters),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_Gen2CustomParameters_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_Gen2CustomParameters_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_Gen2CustomParameters_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_Gen2CustomParameters_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_Gen2CustomParameters_encode,

  
    .pfIsAllowedIn          = LLRP_Gen2CustomParameters_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdGen2CustomParameters[] =
{
  
    NULL
};


LLRP_tSGen2CustomParameters *
LLRP_Gen2CustomParameters_construct (void)
{
    LLRP_tSGen2CustomParameters *pNew;

    pNew = (LLRP_tSGen2CustomParameters *)
        LLRP_Element_construct(&LLRP_tdGen2CustomParameters);

    return pNew;
}

void
LLRP_Gen2CustomParameters_destruct (
  LLRP_tSGen2CustomParameters *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_Gen2CustomParameters_decodeFields (
  LLRP_tSGen2CustomParameters *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_Gen2CustomParameters_assimilateSubParameters (
  LLRP_tSGen2CustomParameters *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-1 of Gen2Q
    pType = &LLRP_tdGen2Q;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pGen2Q = (LLRP_tSGen2Q *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of ThingMagicTargetStrategy
    pType = &LLRP_tdThingMagicTargetStrategy;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pThingMagicTargetStrategy = (LLRP_tSThingMagicTargetStrategy *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdGen2CustomParameters))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSGen2Q *
LLRP_Gen2CustomParameters_getGen2Q (
  LLRP_tSGen2CustomParameters *pThis)
{
    return pThis->pGen2Q;
}

LLRP_tResultCode
LLRP_Gen2CustomParameters_setGen2Q (
  LLRP_tSGen2CustomParameters *pThis,
  LLRP_tSGen2Q * pValue)
{
    SUBPARAM_SET(pGen2Q, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicTargetStrategy *
LLRP_Gen2CustomParameters_getThingMagicTargetStrategy (
  LLRP_tSGen2CustomParameters *pThis)
{
    return pThis->pThingMagicTargetStrategy;
}

LLRP_tResultCode
LLRP_Gen2CustomParameters_setThingMagicTargetStrategy (
  LLRP_tSGen2CustomParameters *pThis,
  LLRP_tSThingMagicTargetStrategy * pValue)
{
    SUBPARAM_SET(pThingMagicTargetStrategy, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_Gen2CustomParameters_beginCustom (
  LLRP_tSGen2CustomParameters *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_Gen2CustomParameters_addCustom (
  LLRP_tSGen2CustomParameters *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdGen2CustomParameters))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_Gen2CustomParameters_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_Gen2CustomParameters_encode (
  const LLRP_tSGen2CustomParameters *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdGen2Q;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pGen2Q,
        pType);
      
    pType = &LLRP_tdThingMagicTargetStrategy;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicTargetStrategy,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_Gen2CustomParameters_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicAntennaConfiguration
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicAntennaConfiguration =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicAntennaConfiguration",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 8,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicAntennaConfiguration,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicAntennaConfiguration),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicAntennaConfiguration_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicAntennaConfiguration_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicAntennaConfiguration_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicAntennaConfiguration_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicAntennaConfiguration_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicAntennaConfiguration_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicAntennaConfiguration[] =
{
  
    &LLRP_fdThingMagicAntennaConfiguration_AntennaID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicAntennaConfiguration_AntennaID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AntennaID",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicAntennaConfiguration *
LLRP_ThingMagicAntennaConfiguration_construct (void)
{
    LLRP_tSThingMagicAntennaConfiguration *pNew;

    pNew = (LLRP_tSThingMagicAntennaConfiguration *)
        LLRP_Element_construct(&LLRP_tdThingMagicAntennaConfiguration);

    return pNew;
}

void
LLRP_ThingMagicAntennaConfiguration_destruct (
  LLRP_tSThingMagicAntennaConfiguration *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicAntennaConfiguration_decodeFields (
  LLRP_tSThingMagicAntennaConfiguration *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->AntennaID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicAntennaConfiguration_AntennaID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicAntennaConfiguration_AntennaID);
    }
    
}

void
LLRP_ThingMagicAntennaConfiguration_assimilateSubParameters (
  LLRP_tSThingMagicAntennaConfiguration *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-1 of AntennaMode
    pType = &LLRP_tdAntennaMode;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pAntennaMode = (LLRP_tSAntennaMode *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of WriteTransmitPower
    pType = &LLRP_tdWriteTransmitPower;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pWriteTransmitPower = (LLRP_tSWriteTransmitPower *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of ReadPointDescription
    pType = &LLRP_tdReadPointDescription;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pReadPointDescription = (LLRP_tSReadPointDescription *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicAntennaConfiguration))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicAntennaConfiguration_getAntennaID (
  LLRP_tSThingMagicAntennaConfiguration *pThis)
{
    return pThis->AntennaID;
}

LLRP_tResultCode
LLRP_ThingMagicAntennaConfiguration_setAntennaID (
  LLRP_tSThingMagicAntennaConfiguration *pThis,
  llrp_u16_t Value)
{
    pThis->AntennaID = Value;
    return LLRP_RC_OK;
}


LLRP_tSAntennaMode *
LLRP_ThingMagicAntennaConfiguration_getAntennaMode (
  LLRP_tSThingMagicAntennaConfiguration *pThis)
{
    return pThis->pAntennaMode;
}

LLRP_tResultCode
LLRP_ThingMagicAntennaConfiguration_setAntennaMode (
  LLRP_tSThingMagicAntennaConfiguration *pThis,
  LLRP_tSAntennaMode * pValue)
{
    SUBPARAM_SET(pAntennaMode, pValue);

    return LLRP_RC_OK;
}


LLRP_tSWriteTransmitPower *
LLRP_ThingMagicAntennaConfiguration_getWriteTransmitPower (
  LLRP_tSThingMagicAntennaConfiguration *pThis)
{
    return pThis->pWriteTransmitPower;
}

LLRP_tResultCode
LLRP_ThingMagicAntennaConfiguration_setWriteTransmitPower (
  LLRP_tSThingMagicAntennaConfiguration *pThis,
  LLRP_tSWriteTransmitPower * pValue)
{
    SUBPARAM_SET(pWriteTransmitPower, pValue);

    return LLRP_RC_OK;
}


LLRP_tSReadPointDescription *
LLRP_ThingMagicAntennaConfiguration_getReadPointDescription (
  LLRP_tSThingMagicAntennaConfiguration *pThis)
{
    return pThis->pReadPointDescription;
}

LLRP_tResultCode
LLRP_ThingMagicAntennaConfiguration_setReadPointDescription (
  LLRP_tSThingMagicAntennaConfiguration *pThis,
  LLRP_tSReadPointDescription * pValue)
{
    SUBPARAM_SET(pReadPointDescription, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicAntennaConfiguration_beginCustom (
  LLRP_tSThingMagicAntennaConfiguration *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicAntennaConfiguration_addCustom (
  LLRP_tSThingMagicAntennaConfiguration *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicAntennaConfiguration))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicAntennaConfiguration_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicAntennaConfiguration_encode (
  const LLRP_tSThingMagicAntennaConfiguration *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->AntennaID,
        &LLRP_fdThingMagicAntennaConfiguration_AntennaID);

    pType = &LLRP_tdAntennaMode;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pAntennaMode,
        pType);
      
    pType = &LLRP_tdWriteTransmitPower;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pWriteTransmitPower,
        pType);
      
    pType = &LLRP_tdReadPointDescription;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pReadPointDescription,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicAntennaConfiguration_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicCurrentTime
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicCurrentTime =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicCurrentTime",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 9,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicCurrentTime,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicCurrentTime),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicCurrentTime_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicCurrentTime_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicCurrentTime_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicCurrentTime_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicCurrentTime_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicCurrentTime_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicCurrentTime[] =
{
  
    &LLRP_fdThingMagicCurrentTime_ReaderCurrentTime,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicCurrentTime_ReaderCurrentTime =
{
    .eFieldType         = LLRP_FT_UTF8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ReaderCurrentTime",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicCurrentTime *
LLRP_ThingMagicCurrentTime_construct (void)
{
    LLRP_tSThingMagicCurrentTime *pNew;

    pNew = (LLRP_tSThingMagicCurrentTime *)
        LLRP_Element_construct(&LLRP_tdThingMagicCurrentTime);

    return pNew;
}

void
LLRP_ThingMagicCurrentTime_destruct (
  LLRP_tSThingMagicCurrentTime *pThis)
{
  
    LLRP_utf8v_clear(&pThis->ReaderCurrentTime);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicCurrentTime_decodeFields (
  LLRP_tSThingMagicCurrentTime *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->ReaderCurrentTime =
                pOps->pfGet_utf8v(pDecoderStream,
                        &LLRP_fdThingMagicCurrentTime_ReaderCurrentTime);
    }
    else
    {
        pOps->pfGet_utf8v(pDecoderStream,
                &LLRP_fdThingMagicCurrentTime_ReaderCurrentTime);
    }
    
}

void
LLRP_ThingMagicCurrentTime_assimilateSubParameters (
  LLRP_tSThingMagicCurrentTime *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicCurrentTime))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_utf8v_t
LLRP_ThingMagicCurrentTime_getReaderCurrentTime (
  LLRP_tSThingMagicCurrentTime *pThis)
{
    return pThis->ReaderCurrentTime;
}

LLRP_tResultCode
LLRP_ThingMagicCurrentTime_setReaderCurrentTime (
  LLRP_tSThingMagicCurrentTime *pThis,
  llrp_utf8v_t Value)
{
    LLRP_utf8v_clear(&pThis->ReaderCurrentTime);

    pThis->ReaderCurrentTime = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicCurrentTime_beginCustom (
  LLRP_tSThingMagicCurrentTime *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicCurrentTime_addCustom (
  LLRP_tSThingMagicCurrentTime *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicCurrentTime))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicCurrentTime_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicCurrentTime_encode (
  const LLRP_tSThingMagicCurrentTime *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_utf8v(pEncoderStream,
        pThis->ReaderCurrentTime,
        &LLRP_fdThingMagicCurrentTime_ReaderCurrentTime);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicCurrentTime_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDeDuplication
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDeDuplication =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicDeDuplication",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 10,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicDeDuplication,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicDeDuplication),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDeDuplication_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDeDuplication_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDeDuplication_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDeDuplication_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDeDuplication_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicDeDuplication_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDeDuplication[] =
{
  
    &LLRP_fdThingMagicDeDuplication_RecordHighestRSSI,
    &LLRP_fdThingMagicDeDuplication_UniqueByAntenna,
    &LLRP_fdThingMagicDeDuplication_UniqueByData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDeDuplication_RecordHighestRSSI =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "RecordHighestRSSI",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDeDuplication_UniqueByAntenna =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "UniqueByAntenna",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDeDuplication_UniqueByData =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "UniqueByData",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicDeDuplication *
LLRP_ThingMagicDeDuplication_construct (void)
{
    LLRP_tSThingMagicDeDuplication *pNew;

    pNew = (LLRP_tSThingMagicDeDuplication *)
        LLRP_Element_construct(&LLRP_tdThingMagicDeDuplication);

    return pNew;
}

void
LLRP_ThingMagicDeDuplication_destruct (
  LLRP_tSThingMagicDeDuplication *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDeDuplication_decodeFields (
  LLRP_tSThingMagicDeDuplication *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->RecordHighestRSSI =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicDeDuplication_RecordHighestRSSI);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicDeDuplication_RecordHighestRSSI);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

    if(NULL != pThis)
    {
        pThis->UniqueByAntenna =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicDeDuplication_UniqueByAntenna);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicDeDuplication_UniqueByAntenna);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

    if(NULL != pThis)
    {
        pThis->UniqueByData =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicDeDuplication_UniqueByData);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicDeDuplication_UniqueByData);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

}

void
LLRP_ThingMagicDeDuplication_assimilateSubParameters (
  LLRP_tSThingMagicDeDuplication *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDeDuplication))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u1_t
LLRP_ThingMagicDeDuplication_getRecordHighestRSSI (
  LLRP_tSThingMagicDeDuplication *pThis)
{
    return pThis->RecordHighestRSSI;
}

LLRP_tResultCode
LLRP_ThingMagicDeDuplication_setRecordHighestRSSI (
  LLRP_tSThingMagicDeDuplication *pThis,
  llrp_u1_t Value)
{
    pThis->RecordHighestRSSI = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicDeDuplication_getUniqueByAntenna (
  LLRP_tSThingMagicDeDuplication *pThis)
{
    return pThis->UniqueByAntenna;
}

LLRP_tResultCode
LLRP_ThingMagicDeDuplication_setUniqueByAntenna (
  LLRP_tSThingMagicDeDuplication *pThis,
  llrp_u1_t Value)
{
    pThis->UniqueByAntenna = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicDeDuplication_getUniqueByData (
  LLRP_tSThingMagicDeDuplication *pThis)
{
    return pThis->UniqueByData;
}

LLRP_tResultCode
LLRP_ThingMagicDeDuplication_setUniqueByData (
  LLRP_tSThingMagicDeDuplication *pThis,
  llrp_u1_t Value)
{
    pThis->UniqueByData = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDeDuplication_beginCustom (
  LLRP_tSThingMagicDeDuplication *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDeDuplication_addCustom (
  LLRP_tSThingMagicDeDuplication *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDeDuplication))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDeDuplication_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDeDuplication_encode (
  const LLRP_tSThingMagicDeDuplication *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u1(pEncoderStream,
        pThis->RecordHighestRSSI,
        &LLRP_fdThingMagicDeDuplication_RecordHighestRSSI);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pOps->pfPut_u1(pEncoderStream,
        pThis->UniqueByAntenna,
        &LLRP_fdThingMagicDeDuplication_UniqueByAntenna);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pOps->pfPut_u1(pEncoderStream,
        pThis->UniqueByData,
        &LLRP_fdThingMagicDeDuplication_UniqueByData);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDeDuplication_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter DeviceProtocolCapabilities
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdDeviceProtocolCapabilities =
{
    .bIsMessage             = FALSE,
    .pName                  = "DeviceProtocolCapabilities",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 11,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdDeviceProtocolCapabilities,
    .nSizeBytes             = sizeof(LLRP_tSDeviceProtocolCapabilities),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_DeviceProtocolCapabilities_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_DeviceProtocolCapabilities_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_DeviceProtocolCapabilities_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_DeviceProtocolCapabilities_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_DeviceProtocolCapabilities_encode,

  
    .pfIsAllowedIn          = LLRP_DeviceProtocolCapabilities_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdDeviceProtocolCapabilities[] =
{
  
    NULL
};


LLRP_tSDeviceProtocolCapabilities *
LLRP_DeviceProtocolCapabilities_construct (void)
{
    LLRP_tSDeviceProtocolCapabilities *pNew;

    pNew = (LLRP_tSDeviceProtocolCapabilities *)
        LLRP_Element_construct(&LLRP_tdDeviceProtocolCapabilities);

    return pNew;
}

void
LLRP_DeviceProtocolCapabilities_destruct (
  LLRP_tSDeviceProtocolCapabilities *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_DeviceProtocolCapabilities_decodeFields (
  LLRP_tSDeviceProtocolCapabilities *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_DeviceProtocolCapabilities_assimilateSubParameters (
  LLRP_tSDeviceProtocolCapabilities *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1-N of SupportedProtocols
    pType = &LLRP_tdSupportedProtocols;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    while(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        SUBPARAM_ATTACH(listSupportedProtocols, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdDeviceProtocolCapabilities))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSSupportedProtocols *
LLRP_DeviceProtocolCapabilities_beginSupportedProtocols (
  LLRP_tSDeviceProtocolCapabilities *pThis)
{
    return pThis->listSupportedProtocols;
}

LLRP_tResultCode
LLRP_DeviceProtocolCapabilities_addSupportedProtocols (
  LLRP_tSDeviceProtocolCapabilities *pThis,
  LLRP_tSSupportedProtocols *pValue)
{
    SUBPARAM_ADD(listSupportedProtocols, pValue);

    return LLRP_RC_OK;
}

LLRP_tSSupportedProtocols *
LLRP_DeviceProtocolCapabilities_nextSupportedProtocols (
  LLRP_tSSupportedProtocols *pCurrent)
{
    return (LLRP_tSSupportedProtocols *)
                pCurrent->hdr.pNextSubParameter;
}

void
LLRP_DeviceProtocolCapabilities_clearSupportedProtocols (
  LLRP_tSDeviceProtocolCapabilities *pThis)
{
    SUBPARAM_CLEAR(listSupportedProtocols);
}


LLRP_tSParameter *
LLRP_DeviceProtocolCapabilities_beginCustom (
  LLRP_tSDeviceProtocolCapabilities *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_DeviceProtocolCapabilities_addCustom (
  LLRP_tSDeviceProtocolCapabilities *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdDeviceProtocolCapabilities))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_DeviceProtocolCapabilities_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_DeviceProtocolCapabilities_encode (
  const LLRP_tSDeviceProtocolCapabilities *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdSupportedProtocols;
      
    pOps->pfPutRequiredSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listSupportedProtocols,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_DeviceProtocolCapabilities_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CAPABILITIES_RESPONSE)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter SupportedProtocols
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdSupportedProtocols =
{
    .bIsMessage             = FALSE,
    .pName                  = "SupportedProtocols",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 12,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdSupportedProtocols,
    .nSizeBytes             = sizeof(LLRP_tSSupportedProtocols),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_SupportedProtocols_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_SupportedProtocols_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_SupportedProtocols_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_SupportedProtocols_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_SupportedProtocols_encode,

  
    .pfIsAllowedIn          = LLRP_SupportedProtocols_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdSupportedProtocols[] =
{
  
    &LLRP_fdSupportedProtocols_Protocol,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdSupportedProtocols_Protocol =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Protocol",
    .pEnumTable         = LLRP_estProtocolID,
};

LLRP_tSSupportedProtocols *
LLRP_SupportedProtocols_construct (void)
{
    LLRP_tSSupportedProtocols *pNew;

    pNew = (LLRP_tSSupportedProtocols *)
        LLRP_Element_construct(&LLRP_tdSupportedProtocols);

    return pNew;
}

void
LLRP_SupportedProtocols_destruct (
  LLRP_tSSupportedProtocols *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_SupportedProtocols_decodeFields (
  LLRP_tSSupportedProtocols *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eProtocol =
                (LLRP_tEProtocolID) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdSupportedProtocols_Protocol);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdSupportedProtocols_Protocol);
    }

}

void
LLRP_SupportedProtocols_assimilateSubParameters (
  LLRP_tSSupportedProtocols *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdSupportedProtocols))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEProtocolID
LLRP_SupportedProtocols_getProtocol (
  LLRP_tSSupportedProtocols *pThis)
{
    return pThis->eProtocol;
}

LLRP_tResultCode
LLRP_SupportedProtocols_setProtocol (
  LLRP_tSSupportedProtocols *pThis,
  LLRP_tEProtocolID eValue)
{
    pThis->eProtocol = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_SupportedProtocols_beginCustom (
  LLRP_tSSupportedProtocols *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_SupportedProtocols_addCustom (
  LLRP_tSSupportedProtocols *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdSupportedProtocols))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_SupportedProtocols_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_SupportedProtocols_encode (
  const LLRP_tSSupportedProtocols *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eProtocol,
        &LLRP_fdSupportedProtocols_Protocol);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_SupportedProtocols_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicReaderModuleTemperature
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicReaderModuleTemperature =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicReaderModuleTemperature",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 13,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicReaderModuleTemperature,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicReaderModuleTemperature),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicReaderModuleTemperature_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicReaderModuleTemperature_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicReaderModuleTemperature_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicReaderModuleTemperature_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicReaderModuleTemperature_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicReaderModuleTemperature_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicReaderModuleTemperature[] =
{
  
    &LLRP_fdThingMagicReaderModuleTemperature_ReaderModuleTemperature,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicReaderModuleTemperature_ReaderModuleTemperature =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ReaderModuleTemperature",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicReaderModuleTemperature *
LLRP_ThingMagicReaderModuleTemperature_construct (void)
{
    LLRP_tSThingMagicReaderModuleTemperature *pNew;

    pNew = (LLRP_tSThingMagicReaderModuleTemperature *)
        LLRP_Element_construct(&LLRP_tdThingMagicReaderModuleTemperature);

    return pNew;
}

void
LLRP_ThingMagicReaderModuleTemperature_destruct (
  LLRP_tSThingMagicReaderModuleTemperature *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicReaderModuleTemperature_decodeFields (
  LLRP_tSThingMagicReaderModuleTemperature *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->ReaderModuleTemperature =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicReaderModuleTemperature_ReaderModuleTemperature);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicReaderModuleTemperature_ReaderModuleTemperature);
    }
    
}

void
LLRP_ThingMagicReaderModuleTemperature_assimilateSubParameters (
  LLRP_tSThingMagicReaderModuleTemperature *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicReaderModuleTemperature))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8_t
LLRP_ThingMagicReaderModuleTemperature_getReaderModuleTemperature (
  LLRP_tSThingMagicReaderModuleTemperature *pThis)
{
    return pThis->ReaderModuleTemperature;
}

LLRP_tResultCode
LLRP_ThingMagicReaderModuleTemperature_setReaderModuleTemperature (
  LLRP_tSThingMagicReaderModuleTemperature *pThis,
  llrp_u8_t Value)
{
    pThis->ReaderModuleTemperature = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicReaderModuleTemperature_beginCustom (
  LLRP_tSThingMagicReaderModuleTemperature *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicReaderModuleTemperature_addCustom (
  LLRP_tSThingMagicReaderModuleTemperature *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicReaderModuleTemperature))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicReaderModuleTemperature_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicReaderModuleTemperature_encode (
  const LLRP_tSThingMagicReaderModuleTemperature *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8(pEncoderStream,
        pThis->ReaderModuleTemperature,
        &LLRP_fdThingMagicReaderModuleTemperature_ReaderModuleTemperature);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicReaderModuleTemperature_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter Gen2Q
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdGen2Q =
{
    .bIsMessage             = FALSE,
    .pName                  = "Gen2Q",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 14,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdGen2Q,
    .nSizeBytes             = sizeof(LLRP_tSGen2Q),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_Gen2Q_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_Gen2Q_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_Gen2Q_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_Gen2Q_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_Gen2Q_encode,

  
    .pfIsAllowedIn          = LLRP_Gen2Q_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdGen2Q[] =
{
  
    &LLRP_fdGen2Q_Gen2QType,
    &LLRP_fdGen2Q_InitQValue,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdGen2Q_Gen2QType =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Gen2QType",
    .pEnumTable         = LLRP_estQType,
};


const LLRP_tSFieldDescriptor
LLRP_fdGen2Q_InitQValue =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "InitQValue",
    .pEnumTable         = NULL,
};

LLRP_tSGen2Q *
LLRP_Gen2Q_construct (void)
{
    LLRP_tSGen2Q *pNew;

    pNew = (LLRP_tSGen2Q *)
        LLRP_Element_construct(&LLRP_tdGen2Q);

    return pNew;
}

void
LLRP_Gen2Q_destruct (
  LLRP_tSGen2Q *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_Gen2Q_decodeFields (
  LLRP_tSGen2Q *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eGen2QType =
                (LLRP_tEQType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdGen2Q_Gen2QType);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdGen2Q_Gen2QType);
    }

    if(NULL != pThis)
    {
        pThis->InitQValue =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdGen2Q_InitQValue);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdGen2Q_InitQValue);
    }
    
}

void
LLRP_Gen2Q_assimilateSubParameters (
  LLRP_tSGen2Q *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdGen2Q))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEQType
LLRP_Gen2Q_getGen2QType (
  LLRP_tSGen2Q *pThis)
{
    return pThis->eGen2QType;
}

LLRP_tResultCode
LLRP_Gen2Q_setGen2QType (
  LLRP_tSGen2Q *pThis,
  LLRP_tEQType eValue)
{
    pThis->eGen2QType = eValue;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_Gen2Q_getInitQValue (
  LLRP_tSGen2Q *pThis)
{
    return pThis->InitQValue;
}

LLRP_tResultCode
LLRP_Gen2Q_setInitQValue (
  LLRP_tSGen2Q *pThis,
  llrp_u8_t Value)
{
    pThis->InitQValue = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_Gen2Q_beginCustom (
  LLRP_tSGen2Q *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_Gen2Q_addCustom (
  LLRP_tSGen2Q *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdGen2Q))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_Gen2Q_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_Gen2Q_encode (
  const LLRP_tSGen2Q *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eGen2QType,
        &LLRP_fdGen2Q_Gen2QType);

    pOps->pfPut_u8(pEncoderStream,
        pThis->InitQValue,
        &LLRP_fdGen2Q_InitQValue);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_Gen2Q_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicAntennaDetection
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicAntennaDetection =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicAntennaDetection",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 15,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicAntennaDetection,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicAntennaDetection),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicAntennaDetection_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicAntennaDetection_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicAntennaDetection_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicAntennaDetection_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicAntennaDetection_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicAntennaDetection_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicAntennaDetection[] =
{
  
    &LLRP_fdThingMagicAntennaDetection_AntennaDetection,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicAntennaDetection_AntennaDetection =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AntennaDetection",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicAntennaDetection *
LLRP_ThingMagicAntennaDetection_construct (void)
{
    LLRP_tSThingMagicAntennaDetection *pNew;

    pNew = (LLRP_tSThingMagicAntennaDetection *)
        LLRP_Element_construct(&LLRP_tdThingMagicAntennaDetection);

    return pNew;
}

void
LLRP_ThingMagicAntennaDetection_destruct (
  LLRP_tSThingMagicAntennaDetection *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicAntennaDetection_decodeFields (
  LLRP_tSThingMagicAntennaDetection *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->AntennaDetection =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicAntennaDetection_AntennaDetection);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicAntennaDetection_AntennaDetection);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

}

void
LLRP_ThingMagicAntennaDetection_assimilateSubParameters (
  LLRP_tSThingMagicAntennaDetection *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicAntennaDetection))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u1_t
LLRP_ThingMagicAntennaDetection_getAntennaDetection (
  LLRP_tSThingMagicAntennaDetection *pThis)
{
    return pThis->AntennaDetection;
}

LLRP_tResultCode
LLRP_ThingMagicAntennaDetection_setAntennaDetection (
  LLRP_tSThingMagicAntennaDetection *pThis,
  llrp_u1_t Value)
{
    pThis->AntennaDetection = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicAntennaDetection_beginCustom (
  LLRP_tSThingMagicAntennaDetection *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicAntennaDetection_addCustom (
  LLRP_tSThingMagicAntennaDetection *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicAntennaDetection))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicAntennaDetection_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicAntennaDetection_encode (
  const LLRP_tSThingMagicAntennaDetection *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u1(pEncoderStream,
        pThis->AntennaDetection,
        &LLRP_fdThingMagicAntennaDetection_AntennaDetection);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicAntennaDetection_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter WriteTransmitPower
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdWriteTransmitPower =
{
    .bIsMessage             = FALSE,
    .pName                  = "WriteTransmitPower",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 16,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdWriteTransmitPower,
    .nSizeBytes             = sizeof(LLRP_tSWriteTransmitPower),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_WriteTransmitPower_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_WriteTransmitPower_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_WriteTransmitPower_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_WriteTransmitPower_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_WriteTransmitPower_encode,

  
    .pfIsAllowedIn          = LLRP_WriteTransmitPower_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdWriteTransmitPower[] =
{
  
    &LLRP_fdWriteTransmitPower_WriteTransmitPower,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdWriteTransmitPower_WriteTransmitPower =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "WriteTransmitPower",
    .pEnumTable         = NULL,
};

LLRP_tSWriteTransmitPower *
LLRP_WriteTransmitPower_construct (void)
{
    LLRP_tSWriteTransmitPower *pNew;

    pNew = (LLRP_tSWriteTransmitPower *)
        LLRP_Element_construct(&LLRP_tdWriteTransmitPower);

    return pNew;
}

void
LLRP_WriteTransmitPower_destruct (
  LLRP_tSWriteTransmitPower *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_WriteTransmitPower_decodeFields (
  LLRP_tSWriteTransmitPower *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->WriteTransmitPower =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdWriteTransmitPower_WriteTransmitPower);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdWriteTransmitPower_WriteTransmitPower);
    }
    
}

void
LLRP_WriteTransmitPower_assimilateSubParameters (
  LLRP_tSWriteTransmitPower *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdWriteTransmitPower))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_WriteTransmitPower_getWriteTransmitPower (
  LLRP_tSWriteTransmitPower *pThis)
{
    return pThis->WriteTransmitPower;
}

LLRP_tResultCode
LLRP_WriteTransmitPower_setWriteTransmitPower (
  LLRP_tSWriteTransmitPower *pThis,
  llrp_u16_t Value)
{
    pThis->WriteTransmitPower = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_WriteTransmitPower_beginCustom (
  LLRP_tSWriteTransmitPower *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_WriteTransmitPower_addCustom (
  LLRP_tSWriteTransmitPower *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdWriteTransmitPower))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_WriteTransmitPower_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_WriteTransmitPower_encode (
  const LLRP_tSWriteTransmitPower *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->WriteTransmitPower,
        &LLRP_fdWriteTransmitPower_WriteTransmitPower);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_WriteTransmitPower_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ReadPointDescription
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdReadPointDescription =
{
    .bIsMessage             = FALSE,
    .pName                  = "ReadPointDescription",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 17,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdReadPointDescription,
    .nSizeBytes             = sizeof(LLRP_tSReadPointDescription),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ReadPointDescription_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ReadPointDescription_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ReadPointDescription_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ReadPointDescription_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ReadPointDescription_encode,

  
    .pfIsAllowedIn          = LLRP_ReadPointDescription_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdReadPointDescription[] =
{
  
    &LLRP_fdReadPointDescription_ReadPointDescription,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdReadPointDescription_ReadPointDescription =
{
    .eFieldType         = LLRP_FT_UTF8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ReadPointDescription",
    .pEnumTable         = NULL,
};

LLRP_tSReadPointDescription *
LLRP_ReadPointDescription_construct (void)
{
    LLRP_tSReadPointDescription *pNew;

    pNew = (LLRP_tSReadPointDescription *)
        LLRP_Element_construct(&LLRP_tdReadPointDescription);

    return pNew;
}

void
LLRP_ReadPointDescription_destruct (
  LLRP_tSReadPointDescription *pThis)
{
  
    LLRP_utf8v_clear(&pThis->ReadPointDescription);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ReadPointDescription_decodeFields (
  LLRP_tSReadPointDescription *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->ReadPointDescription =
                pOps->pfGet_utf8v(pDecoderStream,
                        &LLRP_fdReadPointDescription_ReadPointDescription);
    }
    else
    {
        pOps->pfGet_utf8v(pDecoderStream,
                &LLRP_fdReadPointDescription_ReadPointDescription);
    }
    
}

void
LLRP_ReadPointDescription_assimilateSubParameters (
  LLRP_tSReadPointDescription *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdReadPointDescription))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_utf8v_t
LLRP_ReadPointDescription_getReadPointDescription (
  LLRP_tSReadPointDescription *pThis)
{
    return pThis->ReadPointDescription;
}

LLRP_tResultCode
LLRP_ReadPointDescription_setReadPointDescription (
  LLRP_tSReadPointDescription *pThis,
  llrp_utf8v_t Value)
{
    LLRP_utf8v_clear(&pThis->ReadPointDescription);

    pThis->ReadPointDescription = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ReadPointDescription_beginCustom (
  LLRP_tSReadPointDescription *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ReadPointDescription_addCustom (
  LLRP_tSReadPointDescription *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdReadPointDescription))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ReadPointDescription_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ReadPointDescription_encode (
  const LLRP_tSReadPointDescription *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_utf8v(pEncoderStream,
        pThis->ReadPointDescription,
        &LLRP_fdReadPointDescription_ReadPointDescription);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ReadPointDescription_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter AntennaMode
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdAntennaMode =
{
    .bIsMessage             = FALSE,
    .pName                  = "AntennaMode",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 18,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdAntennaMode,
    .nSizeBytes             = sizeof(LLRP_tSAntennaMode),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_AntennaMode_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_AntennaMode_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_AntennaMode_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_AntennaMode_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_AntennaMode_encode,

  
    .pfIsAllowedIn          = LLRP_AntennaMode_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdAntennaMode[] =
{
  
    &LLRP_fdAntennaMode_AntennaMode,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdAntennaMode_AntennaMode =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AntennaMode",
    .pEnumTable         = LLRP_estThingMagicAntennaMode,
};

LLRP_tSAntennaMode *
LLRP_AntennaMode_construct (void)
{
    LLRP_tSAntennaMode *pNew;

    pNew = (LLRP_tSAntennaMode *)
        LLRP_Element_construct(&LLRP_tdAntennaMode);

    return pNew;
}

void
LLRP_AntennaMode_destruct (
  LLRP_tSAntennaMode *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_AntennaMode_decodeFields (
  LLRP_tSAntennaMode *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eAntennaMode =
                (LLRP_tEThingMagicAntennaMode) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdAntennaMode_AntennaMode);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdAntennaMode_AntennaMode);
    }

}

void
LLRP_AntennaMode_assimilateSubParameters (
  LLRP_tSAntennaMode *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdAntennaMode))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicAntennaMode
LLRP_AntennaMode_getAntennaMode (
  LLRP_tSAntennaMode *pThis)
{
    return pThis->eAntennaMode;
}

LLRP_tResultCode
LLRP_AntennaMode_setAntennaMode (
  LLRP_tSAntennaMode *pThis,
  LLRP_tEThingMagicAntennaMode eValue)
{
    pThis->eAntennaMode = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_AntennaMode_beginCustom (
  LLRP_tSAntennaMode *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_AntennaMode_addCustom (
  LLRP_tSAntennaMode *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdAntennaMode))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_AntennaMode_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_AntennaMode_encode (
  const LLRP_tSAntennaMode *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eAntennaMode,
        &LLRP_fdAntennaMode_AntennaMode);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_AntennaMode_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicTargetStrategy
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicTargetStrategy =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicTargetStrategy",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 19,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicTargetStrategy,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicTargetStrategy),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicTargetStrategy_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicTargetStrategy_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicTargetStrategy_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicTargetStrategy_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicTargetStrategy_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicTargetStrategy_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicTargetStrategy[] =
{
  
    &LLRP_fdThingMagicTargetStrategy_ThingMagicTargetStrategyValue,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicTargetStrategy_ThingMagicTargetStrategyValue =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ThingMagicTargetStrategyValue",
    .pEnumTable         = LLRP_estThingMagicC1G2TargetStrategy,
};

LLRP_tSThingMagicTargetStrategy *
LLRP_ThingMagicTargetStrategy_construct (void)
{
    LLRP_tSThingMagicTargetStrategy *pNew;

    pNew = (LLRP_tSThingMagicTargetStrategy *)
        LLRP_Element_construct(&LLRP_tdThingMagicTargetStrategy);

    return pNew;
}

void
LLRP_ThingMagicTargetStrategy_destruct (
  LLRP_tSThingMagicTargetStrategy *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicTargetStrategy_decodeFields (
  LLRP_tSThingMagicTargetStrategy *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eThingMagicTargetStrategyValue =
                (LLRP_tEThingMagicC1G2TargetStrategy) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicTargetStrategy_ThingMagicTargetStrategyValue);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicTargetStrategy_ThingMagicTargetStrategyValue);
    }

}

void
LLRP_ThingMagicTargetStrategy_assimilateSubParameters (
  LLRP_tSThingMagicTargetStrategy *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicTargetStrategy))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicC1G2TargetStrategy
LLRP_ThingMagicTargetStrategy_getThingMagicTargetStrategyValue (
  LLRP_tSThingMagicTargetStrategy *pThis)
{
    return pThis->eThingMagicTargetStrategyValue;
}

LLRP_tResultCode
LLRP_ThingMagicTargetStrategy_setThingMagicTargetStrategyValue (
  LLRP_tSThingMagicTargetStrategy *pThis,
  LLRP_tEThingMagicC1G2TargetStrategy eValue)
{
    pThis->eThingMagicTargetStrategyValue = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicTargetStrategy_beginCustom (
  LLRP_tSThingMagicTargetStrategy *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicTargetStrategy_addCustom (
  LLRP_tSThingMagicTargetStrategy *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicTargetStrategy))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicTargetStrategy_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicTargetStrategy_encode (
  const LLRP_tSThingMagicTargetStrategy *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eThingMagicTargetStrategyValue,
        &LLRP_fdThingMagicTargetStrategy_ThingMagicTargetStrategyValue);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicTargetStrategy_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicLicenseKey
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicLicenseKey =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicLicenseKey",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 20,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicLicenseKey,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicLicenseKey),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicLicenseKey_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicLicenseKey_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicLicenseKey_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicLicenseKey_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicLicenseKey_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicLicenseKey_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicLicenseKey[] =
{
  
    &LLRP_fdThingMagicLicenseKey_LicenseKey,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicLicenseKey_LicenseKey =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "LicenseKey",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicLicenseKey *
LLRP_ThingMagicLicenseKey_construct (void)
{
    LLRP_tSThingMagicLicenseKey *pNew;

    pNew = (LLRP_tSThingMagicLicenseKey *)
        LLRP_Element_construct(&LLRP_tdThingMagicLicenseKey);

    return pNew;
}

void
LLRP_ThingMagicLicenseKey_destruct (
  LLRP_tSThingMagicLicenseKey *pThis)
{
  
    LLRP_u8v_clear(&pThis->LicenseKey);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicLicenseKey_decodeFields (
  LLRP_tSThingMagicLicenseKey *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->LicenseKey =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicLicenseKey_LicenseKey);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicLicenseKey_LicenseKey);
    }
    
}

void
LLRP_ThingMagicLicenseKey_assimilateSubParameters (
  LLRP_tSThingMagicLicenseKey *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicLicenseKey))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8v_t
LLRP_ThingMagicLicenseKey_getLicenseKey (
  LLRP_tSThingMagicLicenseKey *pThis)
{
    return pThis->LicenseKey;
}

LLRP_tResultCode
LLRP_ThingMagicLicenseKey_setLicenseKey (
  LLRP_tSThingMagicLicenseKey *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->LicenseKey);

    pThis->LicenseKey = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicLicenseKey_beginCustom (
  LLRP_tSThingMagicLicenseKey *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicLicenseKey_addCustom (
  LLRP_tSThingMagicLicenseKey *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicLicenseKey))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicLicenseKey_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicLicenseKey_encode (
  const LLRP_tSThingMagicLicenseKey *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8v(pEncoderStream,
        pThis->LicenseKey,
        &LLRP_fdThingMagicLicenseKey_LicenseKey);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicLicenseKey_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicBlockPermalock
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicBlockPermalock =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicBlockPermalock",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 21,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicBlockPermalock,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicBlockPermalock),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicBlockPermalock_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicBlockPermalock_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicBlockPermalock_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicBlockPermalock_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicBlockPermalock_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicBlockPermalock_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicBlockPermalock[] =
{
  
    &LLRP_fdThingMagicBlockPermalock_OpSpecID,
    &LLRP_fdThingMagicBlockPermalock_AccessPassword,
    &LLRP_fdThingMagicBlockPermalock_ReadLock,
    &LLRP_fdThingMagicBlockPermalock_MB,
    &LLRP_fdThingMagicBlockPermalock_BlockPointer,
    &LLRP_fdThingMagicBlockPermalock_BlockMask,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicBlockPermalock_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicBlockPermalock_AccessPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AccessPassword",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicBlockPermalock_ReadLock =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ReadLock",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicBlockPermalock_MB =
{
    .eFieldType         = LLRP_FT_U2,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "MB",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicBlockPermalock_BlockPointer =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "BlockPointer",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicBlockPermalock_BlockMask =
{
    .eFieldType         = LLRP_FT_U16V,
    .eFieldFormat       = LLRP_FMT_HEX,
    .pName              = "BlockMask",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicBlockPermalock *
LLRP_ThingMagicBlockPermalock_construct (void)
{
    LLRP_tSThingMagicBlockPermalock *pNew;

    pNew = (LLRP_tSThingMagicBlockPermalock *)
        LLRP_Element_construct(&LLRP_tdThingMagicBlockPermalock);

    return pNew;
}

void
LLRP_ThingMagicBlockPermalock_destruct (
  LLRP_tSThingMagicBlockPermalock *pThis)
{
  
    LLRP_u16v_clear(&pThis->BlockMask);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicBlockPermalock_decodeFields (
  LLRP_tSThingMagicBlockPermalock *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicBlockPermalock_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicBlockPermalock_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicBlockPermalock_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicBlockPermalock_AccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->ReadLock =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicBlockPermalock_ReadLock);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicBlockPermalock_ReadLock);
    }
    
    if(NULL != pThis)
    {
        pThis->MB =
                pOps->pfGet_u2(pDecoderStream,
                        &LLRP_fdThingMagicBlockPermalock_MB);
    }
    else
    {
        pOps->pfGet_u2(pDecoderStream,
                &LLRP_fdThingMagicBlockPermalock_MB);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 6);

    if(NULL != pThis)
    {
        pThis->BlockPointer =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicBlockPermalock_BlockPointer);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicBlockPermalock_BlockPointer);
    }
    
    if(NULL != pThis)
    {
        pThis->BlockMask =
                pOps->pfGet_u16v(pDecoderStream,
                        &LLRP_fdThingMagicBlockPermalock_BlockMask);
    }
    else
    {
        pOps->pfGet_u16v(pDecoderStream,
                &LLRP_fdThingMagicBlockPermalock_BlockMask);
    }
    
}

void
LLRP_ThingMagicBlockPermalock_assimilateSubParameters (
  LLRP_tSThingMagicBlockPermalock *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicBlockPermalock))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicBlockPermalock_getOpSpecID (
  LLRP_tSThingMagicBlockPermalock *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicBlockPermalock_setOpSpecID (
  LLRP_tSThingMagicBlockPermalock *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicBlockPermalock_getAccessPassword (
  LLRP_tSThingMagicBlockPermalock *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicBlockPermalock_setAccessPassword (
  LLRP_tSThingMagicBlockPermalock *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicBlockPermalock_getReadLock (
  LLRP_tSThingMagicBlockPermalock *pThis)
{
    return pThis->ReadLock;
}

LLRP_tResultCode
LLRP_ThingMagicBlockPermalock_setReadLock (
  LLRP_tSThingMagicBlockPermalock *pThis,
  llrp_u8_t Value)
{
    pThis->ReadLock = Value;
    return LLRP_RC_OK;
}


llrp_u2_t
LLRP_ThingMagicBlockPermalock_getMB (
  LLRP_tSThingMagicBlockPermalock *pThis)
{
    return pThis->MB;
}

LLRP_tResultCode
LLRP_ThingMagicBlockPermalock_setMB (
  LLRP_tSThingMagicBlockPermalock *pThis,
  llrp_u2_t Value)
{
    pThis->MB = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicBlockPermalock_getBlockPointer (
  LLRP_tSThingMagicBlockPermalock *pThis)
{
    return pThis->BlockPointer;
}

LLRP_tResultCode
LLRP_ThingMagicBlockPermalock_setBlockPointer (
  LLRP_tSThingMagicBlockPermalock *pThis,
  llrp_u32_t Value)
{
    pThis->BlockPointer = Value;
    return LLRP_RC_OK;
}


llrp_u16v_t
LLRP_ThingMagicBlockPermalock_getBlockMask (
  LLRP_tSThingMagicBlockPermalock *pThis)
{
    return pThis->BlockMask;
}

LLRP_tResultCode
LLRP_ThingMagicBlockPermalock_setBlockMask (
  LLRP_tSThingMagicBlockPermalock *pThis,
  llrp_u16v_t Value)
{
    LLRP_u16v_clear(&pThis->BlockMask);

    pThis->BlockMask = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicBlockPermalock_beginCustom (
  LLRP_tSThingMagicBlockPermalock *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicBlockPermalock_addCustom (
  LLRP_tSThingMagicBlockPermalock *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicBlockPermalock))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicBlockPermalock_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicBlockPermalock_encode (
  const LLRP_tSThingMagicBlockPermalock *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicBlockPermalock_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicBlockPermalock_AccessPassword);

    pOps->pfPut_u8(pEncoderStream,
        pThis->ReadLock,
        &LLRP_fdThingMagicBlockPermalock_ReadLock);

    pOps->pfPut_u2(pEncoderStream,
        pThis->MB,
        &LLRP_fdThingMagicBlockPermalock_MB);

    pOps->pfPut_reserved(pEncoderStream, 6);

    pOps->pfPut_u32(pEncoderStream,
        pThis->BlockPointer,
        &LLRP_fdThingMagicBlockPermalock_BlockPointer);

    pOps->pfPut_u16v(pEncoderStream,
        pThis->BlockMask,
        &LLRP_fdThingMagicBlockPermalock_BlockMask);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicBlockPermalock_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicBlockPermalockOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicBlockPermalockOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicBlockPermalockOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 22,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicBlockPermalockOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicBlockPermalockOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicBlockPermalockOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicBlockPermalockOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicBlockPermalockOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicBlockPermalockOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicBlockPermalockOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicBlockPermalockOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicBlockPermalockOpSpecResult[] =
{
  
    &LLRP_fdThingMagicBlockPermalockOpSpecResult_Result,
    &LLRP_fdThingMagicBlockPermalockOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicBlockPermalockOpSpecResult_PermalockStatus,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicBlockPermalockOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicBlockPermalockOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicBlockPermalockOpSpecResult_PermalockStatus =
{
    .eFieldType         = LLRP_FT_U16V,
    .eFieldFormat       = LLRP_FMT_HEX,
    .pName              = "PermalockStatus",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicBlockPermalockOpSpecResult *
LLRP_ThingMagicBlockPermalockOpSpecResult_construct (void)
{
    LLRP_tSThingMagicBlockPermalockOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicBlockPermalockOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicBlockPermalockOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicBlockPermalockOpSpecResult_destruct (
  LLRP_tSThingMagicBlockPermalockOpSpecResult *pThis)
{
  
    LLRP_u16v_clear(&pThis->PermalockStatus);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicBlockPermalockOpSpecResult_decodeFields (
  LLRP_tSThingMagicBlockPermalockOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicBlockPermalockOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicBlockPermalockOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicBlockPermalockOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicBlockPermalockOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->PermalockStatus =
                pOps->pfGet_u16v(pDecoderStream,
                        &LLRP_fdThingMagicBlockPermalockOpSpecResult_PermalockStatus);
    }
    else
    {
        pOps->pfGet_u16v(pDecoderStream,
                &LLRP_fdThingMagicBlockPermalockOpSpecResult_PermalockStatus);
    }
    
}

void
LLRP_ThingMagicBlockPermalockOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicBlockPermalockOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicBlockPermalockOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicBlockPermalockOpSpecResult_getResult (
  LLRP_tSThingMagicBlockPermalockOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicBlockPermalockOpSpecResult_setResult (
  LLRP_tSThingMagicBlockPermalockOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicBlockPermalockOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicBlockPermalockOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicBlockPermalockOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicBlockPermalockOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u16v_t
LLRP_ThingMagicBlockPermalockOpSpecResult_getPermalockStatus (
  LLRP_tSThingMagicBlockPermalockOpSpecResult *pThis)
{
    return pThis->PermalockStatus;
}

LLRP_tResultCode
LLRP_ThingMagicBlockPermalockOpSpecResult_setPermalockStatus (
  LLRP_tSThingMagicBlockPermalockOpSpecResult *pThis,
  llrp_u16v_t Value)
{
    LLRP_u16v_clear(&pThis->PermalockStatus);

    pThis->PermalockStatus = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicBlockPermalockOpSpecResult_beginCustom (
  LLRP_tSThingMagicBlockPermalockOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicBlockPermalockOpSpecResult_addCustom (
  LLRP_tSThingMagicBlockPermalockOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicBlockPermalockOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicBlockPermalockOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicBlockPermalockOpSpecResult_encode (
  const LLRP_tSThingMagicBlockPermalockOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicBlockPermalockOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicBlockPermalockOpSpecResult_OpSpecID);

    pOps->pfPut_u16v(pEncoderStream,
        pThis->PermalockStatus,
        &LLRP_fdThingMagicBlockPermalockOpSpecResult_PermalockStatus);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicBlockPermalockOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicHiggs2PartialLoadImage
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicHiggs2PartialLoadImage =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicHiggs2PartialLoadImage",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 23,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicHiggs2PartialLoadImage,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicHiggs2PartialLoadImage),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicHiggs2PartialLoadImage_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicHiggs2PartialLoadImage_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicHiggs2PartialLoadImage_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicHiggs2PartialLoadImage_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicHiggs2PartialLoadImage_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicHiggs2PartialLoadImage_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicHiggs2PartialLoadImage[] =
{
  
    &LLRP_fdThingMagicHiggs2PartialLoadImage_OpSpecID,
    &LLRP_fdThingMagicHiggs2PartialLoadImage_CurrentAccessPassword,
    &LLRP_fdThingMagicHiggs2PartialLoadImage_KillPassword,
    &LLRP_fdThingMagicHiggs2PartialLoadImage_AccessPassword,
    &LLRP_fdThingMagicHiggs2PartialLoadImage_EPCData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2PartialLoadImage_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2PartialLoadImage_CurrentAccessPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "CurrentAccessPassword",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2PartialLoadImage_KillPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "KillPassword",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2PartialLoadImage_AccessPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AccessPassword",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2PartialLoadImage_EPCData =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_HEX,
    .pName              = "EPCData",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicHiggs2PartialLoadImage *
LLRP_ThingMagicHiggs2PartialLoadImage_construct (void)
{
    LLRP_tSThingMagicHiggs2PartialLoadImage *pNew;

    pNew = (LLRP_tSThingMagicHiggs2PartialLoadImage *)
        LLRP_Element_construct(&LLRP_tdThingMagicHiggs2PartialLoadImage);

    return pNew;
}

void
LLRP_ThingMagicHiggs2PartialLoadImage_destruct (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis)
{
  
    LLRP_u8v_clear(&pThis->EPCData);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicHiggs2PartialLoadImage_decodeFields (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2PartialLoadImage_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs2PartialLoadImage_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->CurrentAccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2PartialLoadImage_CurrentAccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHiggs2PartialLoadImage_CurrentAccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->KillPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2PartialLoadImage_KillPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHiggs2PartialLoadImage_KillPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2PartialLoadImage_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHiggs2PartialLoadImage_AccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->EPCData =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2PartialLoadImage_EPCData);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicHiggs2PartialLoadImage_EPCData);
    }
    
}

void
LLRP_ThingMagicHiggs2PartialLoadImage_assimilateSubParameters (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicHiggs2PartialLoadImage))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicHiggs2PartialLoadImage_getOpSpecID (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2PartialLoadImage_setOpSpecID (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicHiggs2PartialLoadImage_getCurrentAccessPassword (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis)
{
    return pThis->CurrentAccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2PartialLoadImage_setCurrentAccessPassword (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis,
  llrp_u32_t Value)
{
    pThis->CurrentAccessPassword = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicHiggs2PartialLoadImage_getKillPassword (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis)
{
    return pThis->KillPassword;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2PartialLoadImage_setKillPassword (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis,
  llrp_u32_t Value)
{
    pThis->KillPassword = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicHiggs2PartialLoadImage_getAccessPassword (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2PartialLoadImage_setAccessPassword (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicHiggs2PartialLoadImage_getEPCData (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis)
{
    return pThis->EPCData;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2PartialLoadImage_setEPCData (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->EPCData);

    pThis->EPCData = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicHiggs2PartialLoadImage_beginCustom (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2PartialLoadImage_addCustom (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicHiggs2PartialLoadImage))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicHiggs2PartialLoadImage_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicHiggs2PartialLoadImage_encode (
  const LLRP_tSThingMagicHiggs2PartialLoadImage *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicHiggs2PartialLoadImage_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->CurrentAccessPassword,
        &LLRP_fdThingMagicHiggs2PartialLoadImage_CurrentAccessPassword);

    pOps->pfPut_u32(pEncoderStream,
        pThis->KillPassword,
        &LLRP_fdThingMagicHiggs2PartialLoadImage_KillPassword);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicHiggs2PartialLoadImage_AccessPassword);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->EPCData,
        &LLRP_fdThingMagicHiggs2PartialLoadImage_EPCData);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicHiggs2PartialLoadImage_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicHiggs2PartialLoadImageOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicHiggs2PartialLoadImageOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicHiggs2PartialLoadImageOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 24,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicHiggs2PartialLoadImageOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicHiggs2PartialLoadImageOpSpecResult[] =
{
  
    &LLRP_fdThingMagicHiggs2PartialLoadImageOpSpecResult_Result,
    &LLRP_fdThingMagicHiggs2PartialLoadImageOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2PartialLoadImageOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2PartialLoadImageOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult *
LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_construct (void)
{
    LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicHiggs2PartialLoadImageOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_destruct (
  LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_decodeFields (
  LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2PartialLoadImageOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicHiggs2PartialLoadImageOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2PartialLoadImageOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs2PartialLoadImageOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicHiggs2PartialLoadImageOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_getResult (
  LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_setResult (
  LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_beginCustom (
  LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_addCustom (
  LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicHiggs2PartialLoadImageOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_encode (
  const LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicHiggs2PartialLoadImageOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicHiggs2PartialLoadImageOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicHiggs2FullLoadImage
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicHiggs2FullLoadImage =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicHiggs2FullLoadImage",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 25,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicHiggs2FullLoadImage,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicHiggs2FullLoadImage),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicHiggs2FullLoadImage_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicHiggs2FullLoadImage_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicHiggs2FullLoadImage_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicHiggs2FullLoadImage_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicHiggs2FullLoadImage_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicHiggs2FullLoadImage_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicHiggs2FullLoadImage[] =
{
  
    &LLRP_fdThingMagicHiggs2FullLoadImage_OpSpecID,
    &LLRP_fdThingMagicHiggs2FullLoadImage_CurrentAccessPassword,
    &LLRP_fdThingMagicHiggs2FullLoadImage_KillPassword,
    &LLRP_fdThingMagicHiggs2FullLoadImage_AccessPassword,
    &LLRP_fdThingMagicHiggs2FullLoadImage_LockBits,
    &LLRP_fdThingMagicHiggs2FullLoadImage_PCWord,
    &LLRP_fdThingMagicHiggs2FullLoadImage_EPCData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2FullLoadImage_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2FullLoadImage_CurrentAccessPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "CurrentAccessPassword",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2FullLoadImage_KillPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "KillPassword",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2FullLoadImage_AccessPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AccessPassword",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2FullLoadImage_LockBits =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "LockBits",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2FullLoadImage_PCWord =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "PCWord",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2FullLoadImage_EPCData =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_HEX,
    .pName              = "EPCData",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicHiggs2FullLoadImage *
LLRP_ThingMagicHiggs2FullLoadImage_construct (void)
{
    LLRP_tSThingMagicHiggs2FullLoadImage *pNew;

    pNew = (LLRP_tSThingMagicHiggs2FullLoadImage *)
        LLRP_Element_construct(&LLRP_tdThingMagicHiggs2FullLoadImage);

    return pNew;
}

void
LLRP_ThingMagicHiggs2FullLoadImage_destruct (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis)
{
  
    LLRP_u8v_clear(&pThis->EPCData);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicHiggs2FullLoadImage_decodeFields (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2FullLoadImage_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs2FullLoadImage_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->CurrentAccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2FullLoadImage_CurrentAccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHiggs2FullLoadImage_CurrentAccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->KillPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2FullLoadImage_KillPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHiggs2FullLoadImage_KillPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2FullLoadImage_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHiggs2FullLoadImage_AccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->LockBits =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2FullLoadImage_LockBits);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs2FullLoadImage_LockBits);
    }
    
    if(NULL != pThis)
    {
        pThis->PCWord =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2FullLoadImage_PCWord);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs2FullLoadImage_PCWord);
    }
    
    if(NULL != pThis)
    {
        pThis->EPCData =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2FullLoadImage_EPCData);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicHiggs2FullLoadImage_EPCData);
    }
    
}

void
LLRP_ThingMagicHiggs2FullLoadImage_assimilateSubParameters (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicHiggs2FullLoadImage))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicHiggs2FullLoadImage_getOpSpecID (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2FullLoadImage_setOpSpecID (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicHiggs2FullLoadImage_getCurrentAccessPassword (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis)
{
    return pThis->CurrentAccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2FullLoadImage_setCurrentAccessPassword (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis,
  llrp_u32_t Value)
{
    pThis->CurrentAccessPassword = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicHiggs2FullLoadImage_getKillPassword (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis)
{
    return pThis->KillPassword;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2FullLoadImage_setKillPassword (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis,
  llrp_u32_t Value)
{
    pThis->KillPassword = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicHiggs2FullLoadImage_getAccessPassword (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2FullLoadImage_setAccessPassword (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicHiggs2FullLoadImage_getLockBits (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis)
{
    return pThis->LockBits;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2FullLoadImage_setLockBits (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis,
  llrp_u16_t Value)
{
    pThis->LockBits = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicHiggs2FullLoadImage_getPCWord (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis)
{
    return pThis->PCWord;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2FullLoadImage_setPCWord (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis,
  llrp_u16_t Value)
{
    pThis->PCWord = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicHiggs2FullLoadImage_getEPCData (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis)
{
    return pThis->EPCData;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2FullLoadImage_setEPCData (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->EPCData);

    pThis->EPCData = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicHiggs2FullLoadImage_beginCustom (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2FullLoadImage_addCustom (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicHiggs2FullLoadImage))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicHiggs2FullLoadImage_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicHiggs2FullLoadImage_encode (
  const LLRP_tSThingMagicHiggs2FullLoadImage *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicHiggs2FullLoadImage_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->CurrentAccessPassword,
        &LLRP_fdThingMagicHiggs2FullLoadImage_CurrentAccessPassword);

    pOps->pfPut_u32(pEncoderStream,
        pThis->KillPassword,
        &LLRP_fdThingMagicHiggs2FullLoadImage_KillPassword);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicHiggs2FullLoadImage_AccessPassword);

    pOps->pfPut_u16(pEncoderStream,
        pThis->LockBits,
        &LLRP_fdThingMagicHiggs2FullLoadImage_LockBits);

    pOps->pfPut_u16(pEncoderStream,
        pThis->PCWord,
        &LLRP_fdThingMagicHiggs2FullLoadImage_PCWord);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->EPCData,
        &LLRP_fdThingMagicHiggs2FullLoadImage_EPCData);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicHiggs2FullLoadImage_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicHiggs2FullLoadImageOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicHiggs2FullLoadImageOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicHiggs2FullLoadImageOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 26,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicHiggs2FullLoadImageOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicHiggs2FullLoadImageOpSpecResult[] =
{
  
    &LLRP_fdThingMagicHiggs2FullLoadImageOpSpecResult_Result,
    &LLRP_fdThingMagicHiggs2FullLoadImageOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2FullLoadImageOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2FullLoadImageOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult *
LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_construct (void)
{
    LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicHiggs2FullLoadImageOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_destruct (
  LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_decodeFields (
  LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2FullLoadImageOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicHiggs2FullLoadImageOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2FullLoadImageOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs2FullLoadImageOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicHiggs2FullLoadImageOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_getResult (
  LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_setResult (
  LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_beginCustom (
  LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_addCustom (
  LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicHiggs2FullLoadImageOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_encode (
  const LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicHiggs2FullLoadImageOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicHiggs2FullLoadImageOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicHiggs3FastLoadImage
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicHiggs3FastLoadImage =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicHiggs3FastLoadImage",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 27,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicHiggs3FastLoadImage,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicHiggs3FastLoadImage),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicHiggs3FastLoadImage_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicHiggs3FastLoadImage_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicHiggs3FastLoadImage_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicHiggs3FastLoadImage_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicHiggs3FastLoadImage_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicHiggs3FastLoadImage_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicHiggs3FastLoadImage[] =
{
  
    &LLRP_fdThingMagicHiggs3FastLoadImage_OpSpecID,
    &LLRP_fdThingMagicHiggs3FastLoadImage_CurrentAccessPassword,
    &LLRP_fdThingMagicHiggs3FastLoadImage_KillPassword,
    &LLRP_fdThingMagicHiggs3FastLoadImage_AccessPassword,
    &LLRP_fdThingMagicHiggs3FastLoadImage_PCWord,
    &LLRP_fdThingMagicHiggs3FastLoadImage_EPCData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3FastLoadImage_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3FastLoadImage_CurrentAccessPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "CurrentAccessPassword",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3FastLoadImage_KillPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "KillPassword",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3FastLoadImage_AccessPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AccessPassword",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3FastLoadImage_PCWord =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "PCWord",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3FastLoadImage_EPCData =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_HEX,
    .pName              = "EPCData",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicHiggs3FastLoadImage *
LLRP_ThingMagicHiggs3FastLoadImage_construct (void)
{
    LLRP_tSThingMagicHiggs3FastLoadImage *pNew;

    pNew = (LLRP_tSThingMagicHiggs3FastLoadImage *)
        LLRP_Element_construct(&LLRP_tdThingMagicHiggs3FastLoadImage);

    return pNew;
}

void
LLRP_ThingMagicHiggs3FastLoadImage_destruct (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis)
{
  
    LLRP_u8v_clear(&pThis->EPCData);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicHiggs3FastLoadImage_decodeFields (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3FastLoadImage_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs3FastLoadImage_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->CurrentAccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3FastLoadImage_CurrentAccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHiggs3FastLoadImage_CurrentAccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->KillPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3FastLoadImage_KillPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHiggs3FastLoadImage_KillPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3FastLoadImage_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHiggs3FastLoadImage_AccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->PCWord =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3FastLoadImage_PCWord);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs3FastLoadImage_PCWord);
    }
    
    if(NULL != pThis)
    {
        pThis->EPCData =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3FastLoadImage_EPCData);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicHiggs3FastLoadImage_EPCData);
    }
    
}

void
LLRP_ThingMagicHiggs3FastLoadImage_assimilateSubParameters (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicHiggs3FastLoadImage))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicHiggs3FastLoadImage_getOpSpecID (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3FastLoadImage_setOpSpecID (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicHiggs3FastLoadImage_getCurrentAccessPassword (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis)
{
    return pThis->CurrentAccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3FastLoadImage_setCurrentAccessPassword (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis,
  llrp_u32_t Value)
{
    pThis->CurrentAccessPassword = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicHiggs3FastLoadImage_getKillPassword (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis)
{
    return pThis->KillPassword;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3FastLoadImage_setKillPassword (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis,
  llrp_u32_t Value)
{
    pThis->KillPassword = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicHiggs3FastLoadImage_getAccessPassword (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3FastLoadImage_setAccessPassword (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicHiggs3FastLoadImage_getPCWord (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis)
{
    return pThis->PCWord;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3FastLoadImage_setPCWord (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis,
  llrp_u16_t Value)
{
    pThis->PCWord = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicHiggs3FastLoadImage_getEPCData (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis)
{
    return pThis->EPCData;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3FastLoadImage_setEPCData (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->EPCData);

    pThis->EPCData = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicHiggs3FastLoadImage_beginCustom (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3FastLoadImage_addCustom (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicHiggs3FastLoadImage))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicHiggs3FastLoadImage_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicHiggs3FastLoadImage_encode (
  const LLRP_tSThingMagicHiggs3FastLoadImage *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicHiggs3FastLoadImage_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->CurrentAccessPassword,
        &LLRP_fdThingMagicHiggs3FastLoadImage_CurrentAccessPassword);

    pOps->pfPut_u32(pEncoderStream,
        pThis->KillPassword,
        &LLRP_fdThingMagicHiggs3FastLoadImage_KillPassword);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicHiggs3FastLoadImage_AccessPassword);

    pOps->pfPut_u16(pEncoderStream,
        pThis->PCWord,
        &LLRP_fdThingMagicHiggs3FastLoadImage_PCWord);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->EPCData,
        &LLRP_fdThingMagicHiggs3FastLoadImage_EPCData);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicHiggs3FastLoadImage_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicHiggs3FastLoadImageOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicHiggs3FastLoadImageOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicHiggs3FastLoadImageOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 28,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicHiggs3FastLoadImageOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicHiggs3FastLoadImageOpSpecResult[] =
{
  
    &LLRP_fdThingMagicHiggs3FastLoadImageOpSpecResult_Result,
    &LLRP_fdThingMagicHiggs3FastLoadImageOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3FastLoadImageOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3FastLoadImageOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult *
LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_construct (void)
{
    LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicHiggs3FastLoadImageOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_destruct (
  LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_decodeFields (
  LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3FastLoadImageOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicHiggs3FastLoadImageOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3FastLoadImageOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs3FastLoadImageOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicHiggs3FastLoadImageOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_getResult (
  LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_setResult (
  LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_beginCustom (
  LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_addCustom (
  LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicHiggs3FastLoadImageOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_encode (
  const LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicHiggs3FastLoadImageOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicHiggs3FastLoadImageOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicHiggs3LoadImage
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicHiggs3LoadImage =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicHiggs3LoadImage",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 29,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicHiggs3LoadImage,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicHiggs3LoadImage),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicHiggs3LoadImage_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicHiggs3LoadImage_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicHiggs3LoadImage_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicHiggs3LoadImage_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicHiggs3LoadImage_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicHiggs3LoadImage_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicHiggs3LoadImage[] =
{
  
    &LLRP_fdThingMagicHiggs3LoadImage_OpSpecID,
    &LLRP_fdThingMagicHiggs3LoadImage_CurrentAccessPassword,
    &LLRP_fdThingMagicHiggs3LoadImage_KillPassword,
    &LLRP_fdThingMagicHiggs3LoadImage_AccessPassword,
    &LLRP_fdThingMagicHiggs3LoadImage_PCWord,
    &LLRP_fdThingMagicHiggs3LoadImage_EPCAndUserData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3LoadImage_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3LoadImage_CurrentAccessPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "CurrentAccessPassword",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3LoadImage_KillPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "KillPassword",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3LoadImage_AccessPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AccessPassword",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3LoadImage_PCWord =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "PCWord",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3LoadImage_EPCAndUserData =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_HEX,
    .pName              = "EPCAndUserData",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicHiggs3LoadImage *
LLRP_ThingMagicHiggs3LoadImage_construct (void)
{
    LLRP_tSThingMagicHiggs3LoadImage *pNew;

    pNew = (LLRP_tSThingMagicHiggs3LoadImage *)
        LLRP_Element_construct(&LLRP_tdThingMagicHiggs3LoadImage);

    return pNew;
}

void
LLRP_ThingMagicHiggs3LoadImage_destruct (
  LLRP_tSThingMagicHiggs3LoadImage *pThis)
{
  
    LLRP_u8v_clear(&pThis->EPCAndUserData);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicHiggs3LoadImage_decodeFields (
  LLRP_tSThingMagicHiggs3LoadImage *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3LoadImage_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs3LoadImage_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->CurrentAccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3LoadImage_CurrentAccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHiggs3LoadImage_CurrentAccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->KillPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3LoadImage_KillPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHiggs3LoadImage_KillPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3LoadImage_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHiggs3LoadImage_AccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->PCWord =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3LoadImage_PCWord);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs3LoadImage_PCWord);
    }
    
    if(NULL != pThis)
    {
        pThis->EPCAndUserData =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3LoadImage_EPCAndUserData);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicHiggs3LoadImage_EPCAndUserData);
    }
    
}

void
LLRP_ThingMagicHiggs3LoadImage_assimilateSubParameters (
  LLRP_tSThingMagicHiggs3LoadImage *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicHiggs3LoadImage))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicHiggs3LoadImage_getOpSpecID (
  LLRP_tSThingMagicHiggs3LoadImage *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3LoadImage_setOpSpecID (
  LLRP_tSThingMagicHiggs3LoadImage *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicHiggs3LoadImage_getCurrentAccessPassword (
  LLRP_tSThingMagicHiggs3LoadImage *pThis)
{
    return pThis->CurrentAccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3LoadImage_setCurrentAccessPassword (
  LLRP_tSThingMagicHiggs3LoadImage *pThis,
  llrp_u32_t Value)
{
    pThis->CurrentAccessPassword = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicHiggs3LoadImage_getKillPassword (
  LLRP_tSThingMagicHiggs3LoadImage *pThis)
{
    return pThis->KillPassword;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3LoadImage_setKillPassword (
  LLRP_tSThingMagicHiggs3LoadImage *pThis,
  llrp_u32_t Value)
{
    pThis->KillPassword = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicHiggs3LoadImage_getAccessPassword (
  LLRP_tSThingMagicHiggs3LoadImage *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3LoadImage_setAccessPassword (
  LLRP_tSThingMagicHiggs3LoadImage *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicHiggs3LoadImage_getPCWord (
  LLRP_tSThingMagicHiggs3LoadImage *pThis)
{
    return pThis->PCWord;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3LoadImage_setPCWord (
  LLRP_tSThingMagicHiggs3LoadImage *pThis,
  llrp_u16_t Value)
{
    pThis->PCWord = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicHiggs3LoadImage_getEPCAndUserData (
  LLRP_tSThingMagicHiggs3LoadImage *pThis)
{
    return pThis->EPCAndUserData;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3LoadImage_setEPCAndUserData (
  LLRP_tSThingMagicHiggs3LoadImage *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->EPCAndUserData);

    pThis->EPCAndUserData = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicHiggs3LoadImage_beginCustom (
  LLRP_tSThingMagicHiggs3LoadImage *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3LoadImage_addCustom (
  LLRP_tSThingMagicHiggs3LoadImage *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicHiggs3LoadImage))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicHiggs3LoadImage_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicHiggs3LoadImage_encode (
  const LLRP_tSThingMagicHiggs3LoadImage *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicHiggs3LoadImage_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->CurrentAccessPassword,
        &LLRP_fdThingMagicHiggs3LoadImage_CurrentAccessPassword);

    pOps->pfPut_u32(pEncoderStream,
        pThis->KillPassword,
        &LLRP_fdThingMagicHiggs3LoadImage_KillPassword);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicHiggs3LoadImage_AccessPassword);

    pOps->pfPut_u16(pEncoderStream,
        pThis->PCWord,
        &LLRP_fdThingMagicHiggs3LoadImage_PCWord);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->EPCAndUserData,
        &LLRP_fdThingMagicHiggs3LoadImage_EPCAndUserData);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicHiggs3LoadImage_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicHiggs3LoadImageOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicHiggs3LoadImageOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicHiggs3LoadImageOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 30,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicHiggs3LoadImageOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicHiggs3LoadImageOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicHiggs3LoadImageOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicHiggs3LoadImageOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicHiggs3LoadImageOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicHiggs3LoadImageOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicHiggs3LoadImageOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicHiggs3LoadImageOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicHiggs3LoadImageOpSpecResult[] =
{
  
    &LLRP_fdThingMagicHiggs3LoadImageOpSpecResult_Result,
    &LLRP_fdThingMagicHiggs3LoadImageOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3LoadImageOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3LoadImageOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicHiggs3LoadImageOpSpecResult *
LLRP_ThingMagicHiggs3LoadImageOpSpecResult_construct (void)
{
    LLRP_tSThingMagicHiggs3LoadImageOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicHiggs3LoadImageOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicHiggs3LoadImageOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicHiggs3LoadImageOpSpecResult_destruct (
  LLRP_tSThingMagicHiggs3LoadImageOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicHiggs3LoadImageOpSpecResult_decodeFields (
  LLRP_tSThingMagicHiggs3LoadImageOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3LoadImageOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicHiggs3LoadImageOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3LoadImageOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs3LoadImageOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicHiggs3LoadImageOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicHiggs3LoadImageOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicHiggs3LoadImageOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicHiggs3LoadImageOpSpecResult_getResult (
  LLRP_tSThingMagicHiggs3LoadImageOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3LoadImageOpSpecResult_setResult (
  LLRP_tSThingMagicHiggs3LoadImageOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicHiggs3LoadImageOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicHiggs3LoadImageOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3LoadImageOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicHiggs3LoadImageOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicHiggs3LoadImageOpSpecResult_beginCustom (
  LLRP_tSThingMagicHiggs3LoadImageOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3LoadImageOpSpecResult_addCustom (
  LLRP_tSThingMagicHiggs3LoadImageOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicHiggs3LoadImageOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicHiggs3LoadImageOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicHiggs3LoadImageOpSpecResult_encode (
  const LLRP_tSThingMagicHiggs3LoadImageOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicHiggs3LoadImageOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicHiggs3LoadImageOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicHiggs3LoadImageOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicHiggs3BlockReadLock
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicHiggs3BlockReadLock =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicHiggs3BlockReadLock",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 31,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicHiggs3BlockReadLock,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicHiggs3BlockReadLock),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicHiggs3BlockReadLock_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicHiggs3BlockReadLock_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicHiggs3BlockReadLock_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicHiggs3BlockReadLock_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicHiggs3BlockReadLock_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicHiggs3BlockReadLock_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicHiggs3BlockReadLock[] =
{
  
    &LLRP_fdThingMagicHiggs3BlockReadLock_OpSpecID,
    &LLRP_fdThingMagicHiggs3BlockReadLock_AccessPassword,
    &LLRP_fdThingMagicHiggs3BlockReadLock_LockBits,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3BlockReadLock_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3BlockReadLock_AccessPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AccessPassword",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3BlockReadLock_LockBits =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "LockBits",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicHiggs3BlockReadLock *
LLRP_ThingMagicHiggs3BlockReadLock_construct (void)
{
    LLRP_tSThingMagicHiggs3BlockReadLock *pNew;

    pNew = (LLRP_tSThingMagicHiggs3BlockReadLock *)
        LLRP_Element_construct(&LLRP_tdThingMagicHiggs3BlockReadLock);

    return pNew;
}

void
LLRP_ThingMagicHiggs3BlockReadLock_destruct (
  LLRP_tSThingMagicHiggs3BlockReadLock *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicHiggs3BlockReadLock_decodeFields (
  LLRP_tSThingMagicHiggs3BlockReadLock *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3BlockReadLock_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs3BlockReadLock_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3BlockReadLock_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHiggs3BlockReadLock_AccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->LockBits =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3BlockReadLock_LockBits);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicHiggs3BlockReadLock_LockBits);
    }
    
}

void
LLRP_ThingMagicHiggs3BlockReadLock_assimilateSubParameters (
  LLRP_tSThingMagicHiggs3BlockReadLock *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicHiggs3BlockReadLock))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicHiggs3BlockReadLock_getOpSpecID (
  LLRP_tSThingMagicHiggs3BlockReadLock *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3BlockReadLock_setOpSpecID (
  LLRP_tSThingMagicHiggs3BlockReadLock *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicHiggs3BlockReadLock_getAccessPassword (
  LLRP_tSThingMagicHiggs3BlockReadLock *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3BlockReadLock_setAccessPassword (
  LLRP_tSThingMagicHiggs3BlockReadLock *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicHiggs3BlockReadLock_getLockBits (
  LLRP_tSThingMagicHiggs3BlockReadLock *pThis)
{
    return pThis->LockBits;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3BlockReadLock_setLockBits (
  LLRP_tSThingMagicHiggs3BlockReadLock *pThis,
  llrp_u8_t Value)
{
    pThis->LockBits = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicHiggs3BlockReadLock_beginCustom (
  LLRP_tSThingMagicHiggs3BlockReadLock *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3BlockReadLock_addCustom (
  LLRP_tSThingMagicHiggs3BlockReadLock *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicHiggs3BlockReadLock))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicHiggs3BlockReadLock_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicHiggs3BlockReadLock_encode (
  const LLRP_tSThingMagicHiggs3BlockReadLock *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicHiggs3BlockReadLock_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicHiggs3BlockReadLock_AccessPassword);

    pOps->pfPut_u8(pEncoderStream,
        pThis->LockBits,
        &LLRP_fdThingMagicHiggs3BlockReadLock_LockBits);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicHiggs3BlockReadLock_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicHiggs3BlockReadLockOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicHiggs3BlockReadLockOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicHiggs3BlockReadLockOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 32,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicHiggs3BlockReadLockOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicHiggs3BlockReadLockOpSpecResult[] =
{
  
    &LLRP_fdThingMagicHiggs3BlockReadLockOpSpecResult_Result,
    &LLRP_fdThingMagicHiggs3BlockReadLockOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3BlockReadLockOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3BlockReadLockOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult *
LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_construct (void)
{
    LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicHiggs3BlockReadLockOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_destruct (
  LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_decodeFields (
  LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3BlockReadLockOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicHiggs3BlockReadLockOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3BlockReadLockOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs3BlockReadLockOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicHiggs3BlockReadLockOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_getResult (
  LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_setResult (
  LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_beginCustom (
  LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_addCustom (
  LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicHiggs3BlockReadLockOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_encode (
  const LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicHiggs3BlockReadLockOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicHiggs3BlockReadLockOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2ISetReadProtect
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2ISetReadProtect =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicNXPG2ISetReadProtect",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 33,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicNXPG2ISetReadProtect,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicNXPG2ISetReadProtect),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2ISetReadProtect_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2ISetReadProtect_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2ISetReadProtect_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2ISetReadProtect_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2ISetReadProtect_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicNXPG2ISetReadProtect_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2ISetReadProtect[] =
{
  
    &LLRP_fdThingMagicNXPG2ISetReadProtect_OpSpecID,
    &LLRP_fdThingMagicNXPG2ISetReadProtect_AccessPassword,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2ISetReadProtect_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2ISetReadProtect_AccessPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AccessPassword",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicNXPG2ISetReadProtect *
LLRP_ThingMagicNXPG2ISetReadProtect_construct (void)
{
    LLRP_tSThingMagicNXPG2ISetReadProtect *pNew;

    pNew = (LLRP_tSThingMagicNXPG2ISetReadProtect *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2ISetReadProtect);

    return pNew;
}

void
LLRP_ThingMagicNXPG2ISetReadProtect_destruct (
  LLRP_tSThingMagicNXPG2ISetReadProtect *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2ISetReadProtect_decodeFields (
  LLRP_tSThingMagicNXPG2ISetReadProtect *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2ISetReadProtect_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2ISetReadProtect_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2ISetReadProtect_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicNXPG2ISetReadProtect_AccessPassword);
    }
    
}

void
LLRP_ThingMagicNXPG2ISetReadProtect_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2ISetReadProtect *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2ISetReadProtect))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicNXPG2ISetReadProtect_getOpSpecID (
  LLRP_tSThingMagicNXPG2ISetReadProtect *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2ISetReadProtect_setOpSpecID (
  LLRP_tSThingMagicNXPG2ISetReadProtect *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicNXPG2ISetReadProtect_getAccessPassword (
  LLRP_tSThingMagicNXPG2ISetReadProtect *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2ISetReadProtect_setAccessPassword (
  LLRP_tSThingMagicNXPG2ISetReadProtect *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2ISetReadProtect_beginCustom (
  LLRP_tSThingMagicNXPG2ISetReadProtect *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2ISetReadProtect_addCustom (
  LLRP_tSThingMagicNXPG2ISetReadProtect *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2ISetReadProtect))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2ISetReadProtect_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2ISetReadProtect_encode (
  const LLRP_tSThingMagicNXPG2ISetReadProtect *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2ISetReadProtect_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicNXPG2ISetReadProtect_AccessPassword);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2ISetReadProtect_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2ISetReadProtectOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2ISetReadProtectOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicNXPG2ISetReadProtectOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 34,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicNXPG2ISetReadProtectOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2ISetReadProtectOpSpecResult[] =
{
  
    &LLRP_fdThingMagicNXPG2ISetReadProtectOpSpecResult_Result,
    &LLRP_fdThingMagicNXPG2ISetReadProtectOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2ISetReadProtectOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2ISetReadProtectOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult *
LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_construct (void)
{
    LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2ISetReadProtectOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_destruct (
  LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_decodeFields (
  LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2ISetReadProtectOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2ISetReadProtectOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2ISetReadProtectOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2ISetReadProtectOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2ISetReadProtectOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_getResult (
  LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_setResult (
  LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_beginCustom (
  LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_addCustom (
  LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2ISetReadProtectOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_encode (
  const LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicNXPG2ISetReadProtectOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2ISetReadProtectOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2XSetReadProtect
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2XSetReadProtect =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicNXPG2XSetReadProtect",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 35,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicNXPG2XSetReadProtect,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicNXPG2XSetReadProtect),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2XSetReadProtect_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2XSetReadProtect_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2XSetReadProtect_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2XSetReadProtect_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2XSetReadProtect_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicNXPG2XSetReadProtect_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2XSetReadProtect[] =
{
  
    &LLRP_fdThingMagicNXPG2XSetReadProtect_OpSpecID,
    &LLRP_fdThingMagicNXPG2XSetReadProtect_AccessPassword,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XSetReadProtect_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XSetReadProtect_AccessPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AccessPassword",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicNXPG2XSetReadProtect *
LLRP_ThingMagicNXPG2XSetReadProtect_construct (void)
{
    LLRP_tSThingMagicNXPG2XSetReadProtect *pNew;

    pNew = (LLRP_tSThingMagicNXPG2XSetReadProtect *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2XSetReadProtect);

    return pNew;
}

void
LLRP_ThingMagicNXPG2XSetReadProtect_destruct (
  LLRP_tSThingMagicNXPG2XSetReadProtect *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2XSetReadProtect_decodeFields (
  LLRP_tSThingMagicNXPG2XSetReadProtect *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XSetReadProtect_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XSetReadProtect_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XSetReadProtect_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XSetReadProtect_AccessPassword);
    }
    
}

void
LLRP_ThingMagicNXPG2XSetReadProtect_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2XSetReadProtect *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2XSetReadProtect))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicNXPG2XSetReadProtect_getOpSpecID (
  LLRP_tSThingMagicNXPG2XSetReadProtect *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XSetReadProtect_setOpSpecID (
  LLRP_tSThingMagicNXPG2XSetReadProtect *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicNXPG2XSetReadProtect_getAccessPassword (
  LLRP_tSThingMagicNXPG2XSetReadProtect *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XSetReadProtect_setAccessPassword (
  LLRP_tSThingMagicNXPG2XSetReadProtect *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2XSetReadProtect_beginCustom (
  LLRP_tSThingMagicNXPG2XSetReadProtect *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XSetReadProtect_addCustom (
  LLRP_tSThingMagicNXPG2XSetReadProtect *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2XSetReadProtect))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2XSetReadProtect_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2XSetReadProtect_encode (
  const LLRP_tSThingMagicNXPG2XSetReadProtect *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2XSetReadProtect_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicNXPG2XSetReadProtect_AccessPassword);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2XSetReadProtect_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2XSetReadProtectOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2XSetReadProtectOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicNXPG2XSetReadProtectOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 36,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicNXPG2XSetReadProtectOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2XSetReadProtectOpSpecResult[] =
{
  
    &LLRP_fdThingMagicNXPG2XSetReadProtectOpSpecResult_Result,
    &LLRP_fdThingMagicNXPG2XSetReadProtectOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XSetReadProtectOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XSetReadProtectOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult *
LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_construct (void)
{
    LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2XSetReadProtectOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_destruct (
  LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_decodeFields (
  LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XSetReadProtectOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XSetReadProtectOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XSetReadProtectOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XSetReadProtectOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2XSetReadProtectOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_getResult (
  LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_setResult (
  LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_beginCustom (
  LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_addCustom (
  LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2XSetReadProtectOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_encode (
  const LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicNXPG2XSetReadProtectOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2XSetReadProtectOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2IResetReadProtect
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2IResetReadProtect =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicNXPG2IResetReadProtect",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 37,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicNXPG2IResetReadProtect,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicNXPG2IResetReadProtect),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2IResetReadProtect_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2IResetReadProtect_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2IResetReadProtect_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2IResetReadProtect_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2IResetReadProtect_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicNXPG2IResetReadProtect_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2IResetReadProtect[] =
{
  
    &LLRP_fdThingMagicNXPG2IResetReadProtect_OpSpecID,
    &LLRP_fdThingMagicNXPG2IResetReadProtect_AccessPassword,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IResetReadProtect_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IResetReadProtect_AccessPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AccessPassword",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicNXPG2IResetReadProtect *
LLRP_ThingMagicNXPG2IResetReadProtect_construct (void)
{
    LLRP_tSThingMagicNXPG2IResetReadProtect *pNew;

    pNew = (LLRP_tSThingMagicNXPG2IResetReadProtect *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2IResetReadProtect);

    return pNew;
}

void
LLRP_ThingMagicNXPG2IResetReadProtect_destruct (
  LLRP_tSThingMagicNXPG2IResetReadProtect *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2IResetReadProtect_decodeFields (
  LLRP_tSThingMagicNXPG2IResetReadProtect *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IResetReadProtect_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IResetReadProtect_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IResetReadProtect_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IResetReadProtect_AccessPassword);
    }
    
}

void
LLRP_ThingMagicNXPG2IResetReadProtect_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2IResetReadProtect *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2IResetReadProtect))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicNXPG2IResetReadProtect_getOpSpecID (
  LLRP_tSThingMagicNXPG2IResetReadProtect *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IResetReadProtect_setOpSpecID (
  LLRP_tSThingMagicNXPG2IResetReadProtect *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicNXPG2IResetReadProtect_getAccessPassword (
  LLRP_tSThingMagicNXPG2IResetReadProtect *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IResetReadProtect_setAccessPassword (
  LLRP_tSThingMagicNXPG2IResetReadProtect *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2IResetReadProtect_beginCustom (
  LLRP_tSThingMagicNXPG2IResetReadProtect *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IResetReadProtect_addCustom (
  LLRP_tSThingMagicNXPG2IResetReadProtect *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2IResetReadProtect))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2IResetReadProtect_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2IResetReadProtect_encode (
  const LLRP_tSThingMagicNXPG2IResetReadProtect *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2IResetReadProtect_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicNXPG2IResetReadProtect_AccessPassword);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2IResetReadProtect_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2IResetReadProtectOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2IResetReadProtectOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicNXPG2IResetReadProtectOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 38,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicNXPG2IResetReadProtectOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2IResetReadProtectOpSpecResult[] =
{
  
    &LLRP_fdThingMagicNXPG2IResetReadProtectOpSpecResult_Result,
    &LLRP_fdThingMagicNXPG2IResetReadProtectOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IResetReadProtectOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IResetReadProtectOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult *
LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_construct (void)
{
    LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2IResetReadProtectOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_destruct (
  LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_decodeFields (
  LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IResetReadProtectOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IResetReadProtectOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IResetReadProtectOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IResetReadProtectOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2IResetReadProtectOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_getResult (
  LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_setResult (
  LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_beginCustom (
  LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_addCustom (
  LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2IResetReadProtectOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_encode (
  const LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicNXPG2IResetReadProtectOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2IResetReadProtectOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2XResetReadProtect
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2XResetReadProtect =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicNXPG2XResetReadProtect",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 39,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicNXPG2XResetReadProtect,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicNXPG2XResetReadProtect),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2XResetReadProtect_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2XResetReadProtect_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2XResetReadProtect_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2XResetReadProtect_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2XResetReadProtect_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicNXPG2XResetReadProtect_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2XResetReadProtect[] =
{
  
    &LLRP_fdThingMagicNXPG2XResetReadProtect_OpSpecID,
    &LLRP_fdThingMagicNXPG2XResetReadProtect_AccessPassword,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XResetReadProtect_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XResetReadProtect_AccessPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AccessPassword",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicNXPG2XResetReadProtect *
LLRP_ThingMagicNXPG2XResetReadProtect_construct (void)
{
    LLRP_tSThingMagicNXPG2XResetReadProtect *pNew;

    pNew = (LLRP_tSThingMagicNXPG2XResetReadProtect *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2XResetReadProtect);

    return pNew;
}

void
LLRP_ThingMagicNXPG2XResetReadProtect_destruct (
  LLRP_tSThingMagicNXPG2XResetReadProtect *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2XResetReadProtect_decodeFields (
  LLRP_tSThingMagicNXPG2XResetReadProtect *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XResetReadProtect_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XResetReadProtect_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XResetReadProtect_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XResetReadProtect_AccessPassword);
    }
    
}

void
LLRP_ThingMagicNXPG2XResetReadProtect_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2XResetReadProtect *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2XResetReadProtect))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicNXPG2XResetReadProtect_getOpSpecID (
  LLRP_tSThingMagicNXPG2XResetReadProtect *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XResetReadProtect_setOpSpecID (
  LLRP_tSThingMagicNXPG2XResetReadProtect *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicNXPG2XResetReadProtect_getAccessPassword (
  LLRP_tSThingMagicNXPG2XResetReadProtect *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XResetReadProtect_setAccessPassword (
  LLRP_tSThingMagicNXPG2XResetReadProtect *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2XResetReadProtect_beginCustom (
  LLRP_tSThingMagicNXPG2XResetReadProtect *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XResetReadProtect_addCustom (
  LLRP_tSThingMagicNXPG2XResetReadProtect *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2XResetReadProtect))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2XResetReadProtect_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2XResetReadProtect_encode (
  const LLRP_tSThingMagicNXPG2XResetReadProtect *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2XResetReadProtect_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicNXPG2XResetReadProtect_AccessPassword);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2XResetReadProtect_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2XResetReadProtectOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2XResetReadProtectOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicNXPG2XResetReadProtectOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 40,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicNXPG2XResetReadProtectOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2XResetReadProtectOpSpecResult[] =
{
  
    &LLRP_fdThingMagicNXPG2XResetReadProtectOpSpecResult_Result,
    &LLRP_fdThingMagicNXPG2XResetReadProtectOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XResetReadProtectOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XResetReadProtectOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult *
LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_construct (void)
{
    LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2XResetReadProtectOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_destruct (
  LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_decodeFields (
  LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XResetReadProtectOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XResetReadProtectOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XResetReadProtectOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XResetReadProtectOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2XResetReadProtectOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_getResult (
  LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_setResult (
  LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_beginCustom (
  LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_addCustom (
  LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2XResetReadProtectOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_encode (
  const LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicNXPG2XResetReadProtectOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2XResetReadProtectOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2IChangeEAS
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2IChangeEAS =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicNXPG2IChangeEAS",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 41,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicNXPG2IChangeEAS,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicNXPG2IChangeEAS),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2IChangeEAS_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2IChangeEAS_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2IChangeEAS_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2IChangeEAS_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2IChangeEAS_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicNXPG2IChangeEAS_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2IChangeEAS[] =
{
  
    &LLRP_fdThingMagicNXPG2IChangeEAS_OpSpecID,
    &LLRP_fdThingMagicNXPG2IChangeEAS_AccessPassword,
    &LLRP_fdThingMagicNXPG2IChangeEAS_Reset,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IChangeEAS_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IChangeEAS_AccessPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AccessPassword",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IChangeEAS_Reset =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Reset",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicNXPG2IChangeEAS *
LLRP_ThingMagicNXPG2IChangeEAS_construct (void)
{
    LLRP_tSThingMagicNXPG2IChangeEAS *pNew;

    pNew = (LLRP_tSThingMagicNXPG2IChangeEAS *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2IChangeEAS);

    return pNew;
}

void
LLRP_ThingMagicNXPG2IChangeEAS_destruct (
  LLRP_tSThingMagicNXPG2IChangeEAS *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2IChangeEAS_decodeFields (
  LLRP_tSThingMagicNXPG2IChangeEAS *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IChangeEAS_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IChangeEAS_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IChangeEAS_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IChangeEAS_AccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->Reset =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IChangeEAS_Reset);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IChangeEAS_Reset);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

}

void
LLRP_ThingMagicNXPG2IChangeEAS_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2IChangeEAS *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2IChangeEAS))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicNXPG2IChangeEAS_getOpSpecID (
  LLRP_tSThingMagicNXPG2IChangeEAS *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeEAS_setOpSpecID (
  LLRP_tSThingMagicNXPG2IChangeEAS *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicNXPG2IChangeEAS_getAccessPassword (
  LLRP_tSThingMagicNXPG2IChangeEAS *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeEAS_setAccessPassword (
  LLRP_tSThingMagicNXPG2IChangeEAS *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPG2IChangeEAS_getReset (
  LLRP_tSThingMagicNXPG2IChangeEAS *pThis)
{
    return pThis->Reset;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeEAS_setReset (
  LLRP_tSThingMagicNXPG2IChangeEAS *pThis,
  llrp_u1_t Value)
{
    pThis->Reset = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2IChangeEAS_beginCustom (
  LLRP_tSThingMagicNXPG2IChangeEAS *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeEAS_addCustom (
  LLRP_tSThingMagicNXPG2IChangeEAS *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2IChangeEAS))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2IChangeEAS_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2IChangeEAS_encode (
  const LLRP_tSThingMagicNXPG2IChangeEAS *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2IChangeEAS_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicNXPG2IChangeEAS_AccessPassword);

    pOps->pfPut_u1(pEncoderStream,
        pThis->Reset,
        &LLRP_fdThingMagicNXPG2IChangeEAS_Reset);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2IChangeEAS_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2IChangeEASOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2IChangeEASOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicNXPG2IChangeEASOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 42,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicNXPG2IChangeEASOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2IChangeEASOpSpecResult[] =
{
  
    &LLRP_fdThingMagicNXPG2IChangeEASOpSpecResult_Result,
    &LLRP_fdThingMagicNXPG2IChangeEASOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IChangeEASOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IChangeEASOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult *
LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_construct (void)
{
    LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2IChangeEASOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_destruct (
  LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_decodeFields (
  LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IChangeEASOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IChangeEASOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IChangeEASOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IChangeEASOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2IChangeEASOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_getResult (
  LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_setResult (
  LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_beginCustom (
  LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_addCustom (
  LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2IChangeEASOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_encode (
  const LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicNXPG2IChangeEASOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2IChangeEASOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2XChangeEAS
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2XChangeEAS =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicNXPG2XChangeEAS",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 43,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicNXPG2XChangeEAS,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicNXPG2XChangeEAS),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2XChangeEAS_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2XChangeEAS_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2XChangeEAS_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2XChangeEAS_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2XChangeEAS_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicNXPG2XChangeEAS_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2XChangeEAS[] =
{
  
    &LLRP_fdThingMagicNXPG2XChangeEAS_OpSpecID,
    &LLRP_fdThingMagicNXPG2XChangeEAS_AccessPassword,
    &LLRP_fdThingMagicNXPG2XChangeEAS_Reset,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XChangeEAS_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XChangeEAS_AccessPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AccessPassword",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XChangeEAS_Reset =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Reset",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicNXPG2XChangeEAS *
LLRP_ThingMagicNXPG2XChangeEAS_construct (void)
{
    LLRP_tSThingMagicNXPG2XChangeEAS *pNew;

    pNew = (LLRP_tSThingMagicNXPG2XChangeEAS *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2XChangeEAS);

    return pNew;
}

void
LLRP_ThingMagicNXPG2XChangeEAS_destruct (
  LLRP_tSThingMagicNXPG2XChangeEAS *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2XChangeEAS_decodeFields (
  LLRP_tSThingMagicNXPG2XChangeEAS *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XChangeEAS_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XChangeEAS_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XChangeEAS_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XChangeEAS_AccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->Reset =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XChangeEAS_Reset);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XChangeEAS_Reset);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

}

void
LLRP_ThingMagicNXPG2XChangeEAS_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2XChangeEAS *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2XChangeEAS))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicNXPG2XChangeEAS_getOpSpecID (
  LLRP_tSThingMagicNXPG2XChangeEAS *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XChangeEAS_setOpSpecID (
  LLRP_tSThingMagicNXPG2XChangeEAS *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicNXPG2XChangeEAS_getAccessPassword (
  LLRP_tSThingMagicNXPG2XChangeEAS *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XChangeEAS_setAccessPassword (
  LLRP_tSThingMagicNXPG2XChangeEAS *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPG2XChangeEAS_getReset (
  LLRP_tSThingMagicNXPG2XChangeEAS *pThis)
{
    return pThis->Reset;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XChangeEAS_setReset (
  LLRP_tSThingMagicNXPG2XChangeEAS *pThis,
  llrp_u1_t Value)
{
    pThis->Reset = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2XChangeEAS_beginCustom (
  LLRP_tSThingMagicNXPG2XChangeEAS *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XChangeEAS_addCustom (
  LLRP_tSThingMagicNXPG2XChangeEAS *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2XChangeEAS))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2XChangeEAS_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2XChangeEAS_encode (
  const LLRP_tSThingMagicNXPG2XChangeEAS *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2XChangeEAS_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicNXPG2XChangeEAS_AccessPassword);

    pOps->pfPut_u1(pEncoderStream,
        pThis->Reset,
        &LLRP_fdThingMagicNXPG2XChangeEAS_Reset);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2XChangeEAS_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2XChangeEASOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2XChangeEASOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicNXPG2XChangeEASOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 44,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicNXPG2XChangeEASOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2XChangeEASOpSpecResult[] =
{
  
    &LLRP_fdThingMagicNXPG2XChangeEASOpSpecResult_Result,
    &LLRP_fdThingMagicNXPG2XChangeEASOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XChangeEASOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XChangeEASOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult *
LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_construct (void)
{
    LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2XChangeEASOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_destruct (
  LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_decodeFields (
  LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XChangeEASOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XChangeEASOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XChangeEASOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XChangeEASOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2XChangeEASOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_getResult (
  LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_setResult (
  LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_beginCustom (
  LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_addCustom (
  LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2XChangeEASOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_encode (
  const LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicNXPG2XChangeEASOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2XChangeEASOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2IEASAlarm
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2IEASAlarm =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicNXPG2IEASAlarm",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 45,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicNXPG2IEASAlarm,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicNXPG2IEASAlarm),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2IEASAlarm_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2IEASAlarm_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2IEASAlarm_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2IEASAlarm_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2IEASAlarm_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicNXPG2IEASAlarm_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2IEASAlarm[] =
{
  
    &LLRP_fdThingMagicNXPG2IEASAlarm_OpSpecID,
    &LLRP_fdThingMagicNXPG2IEASAlarm_AccessPassword,
    &LLRP_fdThingMagicNXPG2IEASAlarm_DivideRatio,
    &LLRP_fdThingMagicNXPG2IEASAlarm_TagEncoding,
    &LLRP_fdThingMagicNXPG2IEASAlarm_PilotTone,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IEASAlarm_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IEASAlarm_AccessPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AccessPassword",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IEASAlarm_DivideRatio =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "DivideRatio",
    .pEnumTable         = LLRP_estThingMagicGen2DivideRatio,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IEASAlarm_TagEncoding =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "TagEncoding",
    .pEnumTable         = LLRP_estThingMagicGen2TagEncoding,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IEASAlarm_PilotTone =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "PilotTone",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicNXPG2IEASAlarm *
LLRP_ThingMagicNXPG2IEASAlarm_construct (void)
{
    LLRP_tSThingMagicNXPG2IEASAlarm *pNew;

    pNew = (LLRP_tSThingMagicNXPG2IEASAlarm *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2IEASAlarm);

    return pNew;
}

void
LLRP_ThingMagicNXPG2IEASAlarm_destruct (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2IEASAlarm_decodeFields (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IEASAlarm_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IEASAlarm_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IEASAlarm_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IEASAlarm_AccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->eDivideRatio =
                (LLRP_tEThingMagicGen2DivideRatio) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IEASAlarm_DivideRatio);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IEASAlarm_DivideRatio);
    }

    if(NULL != pThis)
    {
        pThis->eTagEncoding =
                (LLRP_tEThingMagicGen2TagEncoding) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IEASAlarm_TagEncoding);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IEASAlarm_TagEncoding);
    }

    if(NULL != pThis)
    {
        pThis->PilotTone =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IEASAlarm_PilotTone);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IEASAlarm_PilotTone);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

}

void
LLRP_ThingMagicNXPG2IEASAlarm_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2IEASAlarm))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicNXPG2IEASAlarm_getOpSpecID (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IEASAlarm_setOpSpecID (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicNXPG2IEASAlarm_getAccessPassword (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IEASAlarm_setAccessPassword (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tEThingMagicGen2DivideRatio
LLRP_ThingMagicNXPG2IEASAlarm_getDivideRatio (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis)
{
    return pThis->eDivideRatio;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IEASAlarm_setDivideRatio (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis,
  LLRP_tEThingMagicGen2DivideRatio eValue)
{
    pThis->eDivideRatio = eValue;
    return LLRP_RC_OK;
}


LLRP_tEThingMagicGen2TagEncoding
LLRP_ThingMagicNXPG2IEASAlarm_getTagEncoding (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis)
{
    return pThis->eTagEncoding;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IEASAlarm_setTagEncoding (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis,
  LLRP_tEThingMagicGen2TagEncoding eValue)
{
    pThis->eTagEncoding = eValue;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPG2IEASAlarm_getPilotTone (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis)
{
    return pThis->PilotTone;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IEASAlarm_setPilotTone (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis,
  llrp_u1_t Value)
{
    pThis->PilotTone = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2IEASAlarm_beginCustom (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IEASAlarm_addCustom (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2IEASAlarm))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2IEASAlarm_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2IEASAlarm_encode (
  const LLRP_tSThingMagicNXPG2IEASAlarm *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2IEASAlarm_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicNXPG2IEASAlarm_AccessPassword);

    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eDivideRatio,
        &LLRP_fdThingMagicNXPG2IEASAlarm_DivideRatio);

    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eTagEncoding,
        &LLRP_fdThingMagicNXPG2IEASAlarm_TagEncoding);

    pOps->pfPut_u1(pEncoderStream,
        pThis->PilotTone,
        &LLRP_fdThingMagicNXPG2IEASAlarm_PilotTone);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2IEASAlarm_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2IEASAlarmOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2IEASAlarmOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicNXPG2IEASAlarmOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 46,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicNXPG2IEASAlarmOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2IEASAlarmOpSpecResult[] =
{
  
    &LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_Result,
    &LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_EASAlarmCode,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_EASAlarmCode =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "EASAlarmCode",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_construct (void)
{
    LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2IEASAlarmOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_destruct (
  LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->EASAlarmCode);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_decodeFields (
  LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->EASAlarmCode =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_EASAlarmCode);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_EASAlarmCode);
    }
    
}

void
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2IEASAlarmOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_getResult (
  LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_setResult (
  LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_getEASAlarmCode (
  LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *pThis)
{
    return pThis->EASAlarmCode;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_setEASAlarmCode (
  LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->EASAlarmCode);

    pThis->EASAlarmCode = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_beginCustom (
  LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_addCustom (
  LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2IEASAlarmOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_encode (
  const LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->EASAlarmCode,
        &LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_EASAlarmCode);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2XEASAlarm
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2XEASAlarm =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicNXPG2XEASAlarm",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 47,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicNXPG2XEASAlarm,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicNXPG2XEASAlarm),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2XEASAlarm_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2XEASAlarm_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2XEASAlarm_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2XEASAlarm_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2XEASAlarm_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicNXPG2XEASAlarm_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2XEASAlarm[] =
{
  
    &LLRP_fdThingMagicNXPG2XEASAlarm_OpSpecID,
    &LLRP_fdThingMagicNXPG2XEASAlarm_AccessPassword,
    &LLRP_fdThingMagicNXPG2XEASAlarm_DivideRatio,
    &LLRP_fdThingMagicNXPG2XEASAlarm_TagEncoding,
    &LLRP_fdThingMagicNXPG2XEASAlarm_PilotTone,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XEASAlarm_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XEASAlarm_AccessPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AccessPassword",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XEASAlarm_DivideRatio =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "DivideRatio",
    .pEnumTable         = LLRP_estThingMagicGen2DivideRatio,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XEASAlarm_TagEncoding =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "TagEncoding",
    .pEnumTable         = LLRP_estThingMagicGen2TagEncoding,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XEASAlarm_PilotTone =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "PilotTone",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicNXPG2XEASAlarm *
LLRP_ThingMagicNXPG2XEASAlarm_construct (void)
{
    LLRP_tSThingMagicNXPG2XEASAlarm *pNew;

    pNew = (LLRP_tSThingMagicNXPG2XEASAlarm *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2XEASAlarm);

    return pNew;
}

void
LLRP_ThingMagicNXPG2XEASAlarm_destruct (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2XEASAlarm_decodeFields (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XEASAlarm_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XEASAlarm_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XEASAlarm_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XEASAlarm_AccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->eDivideRatio =
                (LLRP_tEThingMagicGen2DivideRatio) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XEASAlarm_DivideRatio);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XEASAlarm_DivideRatio);
    }

    if(NULL != pThis)
    {
        pThis->eTagEncoding =
                (LLRP_tEThingMagicGen2TagEncoding) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XEASAlarm_TagEncoding);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XEASAlarm_TagEncoding);
    }

    if(NULL != pThis)
    {
        pThis->PilotTone =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XEASAlarm_PilotTone);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XEASAlarm_PilotTone);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

}

void
LLRP_ThingMagicNXPG2XEASAlarm_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2XEASAlarm))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicNXPG2XEASAlarm_getOpSpecID (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XEASAlarm_setOpSpecID (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicNXPG2XEASAlarm_getAccessPassword (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XEASAlarm_setAccessPassword (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tEThingMagicGen2DivideRatio
LLRP_ThingMagicNXPG2XEASAlarm_getDivideRatio (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis)
{
    return pThis->eDivideRatio;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XEASAlarm_setDivideRatio (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis,
  LLRP_tEThingMagicGen2DivideRatio eValue)
{
    pThis->eDivideRatio = eValue;
    return LLRP_RC_OK;
}


LLRP_tEThingMagicGen2TagEncoding
LLRP_ThingMagicNXPG2XEASAlarm_getTagEncoding (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis)
{
    return pThis->eTagEncoding;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XEASAlarm_setTagEncoding (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis,
  LLRP_tEThingMagicGen2TagEncoding eValue)
{
    pThis->eTagEncoding = eValue;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPG2XEASAlarm_getPilotTone (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis)
{
    return pThis->PilotTone;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XEASAlarm_setPilotTone (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis,
  llrp_u1_t Value)
{
    pThis->PilotTone = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2XEASAlarm_beginCustom (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XEASAlarm_addCustom (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2XEASAlarm))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2XEASAlarm_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2XEASAlarm_encode (
  const LLRP_tSThingMagicNXPG2XEASAlarm *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2XEASAlarm_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicNXPG2XEASAlarm_AccessPassword);

    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eDivideRatio,
        &LLRP_fdThingMagicNXPG2XEASAlarm_DivideRatio);

    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eTagEncoding,
        &LLRP_fdThingMagicNXPG2XEASAlarm_TagEncoding);

    pOps->pfPut_u1(pEncoderStream,
        pThis->PilotTone,
        &LLRP_fdThingMagicNXPG2XEASAlarm_PilotTone);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2XEASAlarm_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2XEASAlarmOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2XEASAlarmOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicNXPG2XEASAlarmOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 48,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicNXPG2XEASAlarmOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2XEASAlarmOpSpecResult[] =
{
  
    &LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_Result,
    &LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_EASAlarmCode,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_EASAlarmCode =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "EASAlarmCode",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_construct (void)
{
    LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2XEASAlarmOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_destruct (
  LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->EASAlarmCode);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_decodeFields (
  LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->EASAlarmCode =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_EASAlarmCode);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_EASAlarmCode);
    }
    
}

void
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2XEASAlarmOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_getResult (
  LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_setResult (
  LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_getEASAlarmCode (
  LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *pThis)
{
    return pThis->EASAlarmCode;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_setEASAlarmCode (
  LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->EASAlarmCode);

    pThis->EASAlarmCode = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_beginCustom (
  LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_addCustom (
  LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2XEASAlarmOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_encode (
  const LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->EASAlarmCode,
        &LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_EASAlarmCode);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2ICalibrate
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2ICalibrate =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicNXPG2ICalibrate",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 49,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicNXPG2ICalibrate,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicNXPG2ICalibrate),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2ICalibrate_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2ICalibrate_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2ICalibrate_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2ICalibrate_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2ICalibrate_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicNXPG2ICalibrate_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2ICalibrate[] =
{
  
    &LLRP_fdThingMagicNXPG2ICalibrate_OpSpecID,
    &LLRP_fdThingMagicNXPG2ICalibrate_AccessPassword,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2ICalibrate_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2ICalibrate_AccessPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AccessPassword",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicNXPG2ICalibrate *
LLRP_ThingMagicNXPG2ICalibrate_construct (void)
{
    LLRP_tSThingMagicNXPG2ICalibrate *pNew;

    pNew = (LLRP_tSThingMagicNXPG2ICalibrate *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2ICalibrate);

    return pNew;
}

void
LLRP_ThingMagicNXPG2ICalibrate_destruct (
  LLRP_tSThingMagicNXPG2ICalibrate *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2ICalibrate_decodeFields (
  LLRP_tSThingMagicNXPG2ICalibrate *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2ICalibrate_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2ICalibrate_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2ICalibrate_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicNXPG2ICalibrate_AccessPassword);
    }
    
}

void
LLRP_ThingMagicNXPG2ICalibrate_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2ICalibrate *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2ICalibrate))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicNXPG2ICalibrate_getOpSpecID (
  LLRP_tSThingMagicNXPG2ICalibrate *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2ICalibrate_setOpSpecID (
  LLRP_tSThingMagicNXPG2ICalibrate *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicNXPG2ICalibrate_getAccessPassword (
  LLRP_tSThingMagicNXPG2ICalibrate *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2ICalibrate_setAccessPassword (
  LLRP_tSThingMagicNXPG2ICalibrate *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2ICalibrate_beginCustom (
  LLRP_tSThingMagicNXPG2ICalibrate *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2ICalibrate_addCustom (
  LLRP_tSThingMagicNXPG2ICalibrate *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2ICalibrate))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2ICalibrate_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2ICalibrate_encode (
  const LLRP_tSThingMagicNXPG2ICalibrate *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2ICalibrate_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicNXPG2ICalibrate_AccessPassword);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2ICalibrate_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2ICalibrateOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2ICalibrateOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicNXPG2ICalibrateOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 50,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicNXPG2ICalibrateOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2ICalibrateOpSpecResult[] =
{
  
    &LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_Result,
    &LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_CalibrateData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_CalibrateData =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "CalibrateData",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_construct (void)
{
    LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2ICalibrateOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_destruct (
  LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->CalibrateData);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_decodeFields (
  LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->CalibrateData =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_CalibrateData);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_CalibrateData);
    }
    
}

void
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2ICalibrateOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_getResult (
  LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_setResult (
  LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_getCalibrateData (
  LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *pThis)
{
    return pThis->CalibrateData;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_setCalibrateData (
  LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->CalibrateData);

    pThis->CalibrateData = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_beginCustom (
  LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_addCustom (
  LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2ICalibrateOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_encode (
  const LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->CalibrateData,
        &LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_CalibrateData);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2XCalibrate
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2XCalibrate =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicNXPG2XCalibrate",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 51,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicNXPG2XCalibrate,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicNXPG2XCalibrate),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2XCalibrate_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2XCalibrate_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2XCalibrate_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2XCalibrate_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2XCalibrate_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicNXPG2XCalibrate_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2XCalibrate[] =
{
  
    &LLRP_fdThingMagicNXPG2XCalibrate_OpSpecID,
    &LLRP_fdThingMagicNXPG2XCalibrate_AccessPassword,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XCalibrate_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XCalibrate_AccessPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AccessPassword",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicNXPG2XCalibrate *
LLRP_ThingMagicNXPG2XCalibrate_construct (void)
{
    LLRP_tSThingMagicNXPG2XCalibrate *pNew;

    pNew = (LLRP_tSThingMagicNXPG2XCalibrate *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2XCalibrate);

    return pNew;
}

void
LLRP_ThingMagicNXPG2XCalibrate_destruct (
  LLRP_tSThingMagicNXPG2XCalibrate *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2XCalibrate_decodeFields (
  LLRP_tSThingMagicNXPG2XCalibrate *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XCalibrate_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XCalibrate_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XCalibrate_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XCalibrate_AccessPassword);
    }
    
}

void
LLRP_ThingMagicNXPG2XCalibrate_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2XCalibrate *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2XCalibrate))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicNXPG2XCalibrate_getOpSpecID (
  LLRP_tSThingMagicNXPG2XCalibrate *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XCalibrate_setOpSpecID (
  LLRP_tSThingMagicNXPG2XCalibrate *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicNXPG2XCalibrate_getAccessPassword (
  LLRP_tSThingMagicNXPG2XCalibrate *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XCalibrate_setAccessPassword (
  LLRP_tSThingMagicNXPG2XCalibrate *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2XCalibrate_beginCustom (
  LLRP_tSThingMagicNXPG2XCalibrate *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XCalibrate_addCustom (
  LLRP_tSThingMagicNXPG2XCalibrate *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2XCalibrate))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2XCalibrate_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2XCalibrate_encode (
  const LLRP_tSThingMagicNXPG2XCalibrate *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2XCalibrate_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicNXPG2XCalibrate_AccessPassword);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2XCalibrate_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2XCalibrateOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2XCalibrateOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicNXPG2XCalibrateOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 52,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicNXPG2XCalibrateOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2XCalibrateOpSpecResult[] =
{
  
    &LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_Result,
    &LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_CalibrateData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_CalibrateData =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "CalibrateData",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_construct (void)
{
    LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2XCalibrateOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_destruct (
  LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->CalibrateData);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_decodeFields (
  LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->CalibrateData =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_CalibrateData);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_CalibrateData);
    }
    
}

void
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2XCalibrateOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_getResult (
  LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_setResult (
  LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_getCalibrateData (
  LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *pThis)
{
    return pThis->CalibrateData;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_setCalibrateData (
  LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->CalibrateData);

    pThis->CalibrateData = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_beginCustom (
  LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_addCustom (
  LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2XCalibrateOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_encode (
  const LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->CalibrateData,
        &LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_CalibrateData);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2IChangeConfig
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2IChangeConfig =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicNXPG2IChangeConfig",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 53,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicNXPG2IChangeConfig,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicNXPG2IChangeConfig),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2IChangeConfig_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2IChangeConfig_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2IChangeConfig_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2IChangeConfig_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2IChangeConfig_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicNXPG2IChangeConfig_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2IChangeConfig[] =
{
  
    &LLRP_fdThingMagicNXPG2IChangeConfig_OpSpecID,
    &LLRP_fdThingMagicNXPG2IChangeConfig_AccessPassword,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IChangeConfig_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IChangeConfig_AccessPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AccessPassword",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicNXPG2IChangeConfig *
LLRP_ThingMagicNXPG2IChangeConfig_construct (void)
{
    LLRP_tSThingMagicNXPG2IChangeConfig *pNew;

    pNew = (LLRP_tSThingMagicNXPG2IChangeConfig *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2IChangeConfig);

    return pNew;
}

void
LLRP_ThingMagicNXPG2IChangeConfig_destruct (
  LLRP_tSThingMagicNXPG2IChangeConfig *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2IChangeConfig_decodeFields (
  LLRP_tSThingMagicNXPG2IChangeConfig *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IChangeConfig_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IChangeConfig_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IChangeConfig_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IChangeConfig_AccessPassword);
    }
    
}

void
LLRP_ThingMagicNXPG2IChangeConfig_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2IChangeConfig *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicNXPConfigWord
    pType = &LLRP_tdThingMagicNXPConfigWord;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicNXPConfigWord = (LLRP_tSThingMagicNXPConfigWord *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2IChangeConfig))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicNXPG2IChangeConfig_getOpSpecID (
  LLRP_tSThingMagicNXPG2IChangeConfig *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeConfig_setOpSpecID (
  LLRP_tSThingMagicNXPG2IChangeConfig *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicNXPG2IChangeConfig_getAccessPassword (
  LLRP_tSThingMagicNXPG2IChangeConfig *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeConfig_setAccessPassword (
  LLRP_tSThingMagicNXPG2IChangeConfig *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicNXPConfigWord *
LLRP_ThingMagicNXPG2IChangeConfig_getThingMagicNXPConfigWord (
  LLRP_tSThingMagicNXPG2IChangeConfig *pThis)
{
    return pThis->pThingMagicNXPConfigWord;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeConfig_setThingMagicNXPConfigWord (
  LLRP_tSThingMagicNXPG2IChangeConfig *pThis,
  LLRP_tSThingMagicNXPConfigWord * pValue)
{
    SUBPARAM_SET(pThingMagicNXPConfigWord, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2IChangeConfig_beginCustom (
  LLRP_tSThingMagicNXPG2IChangeConfig *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeConfig_addCustom (
  LLRP_tSThingMagicNXPG2IChangeConfig *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2IChangeConfig))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2IChangeConfig_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2IChangeConfig_encode (
  const LLRP_tSThingMagicNXPG2IChangeConfig *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2IChangeConfig_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicNXPG2IChangeConfig_AccessPassword);

    pType = &LLRP_tdThingMagicNXPConfigWord;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicNXPConfigWord,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2IChangeConfig_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2IChangeConfigOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2IChangeConfigOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicNXPG2IChangeConfigOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 54,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicNXPG2IChangeConfigOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2IChangeConfigOpSpecResult[] =
{
  
    &LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_Result,
    &LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_ConfigData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_ConfigData =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ConfigData",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_construct (void)
{
    LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2IChangeConfigOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_destruct (
  LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_decodeFields (
  LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->ConfigData =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_ConfigData);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_ConfigData);
    }
    
}

void
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2IChangeConfigOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_getResult (
  LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_setResult (
  LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_getConfigData (
  LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *pThis)
{
    return pThis->ConfigData;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_setConfigData (
  LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->ConfigData = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_beginCustom (
  LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_addCustom (
  LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2IChangeConfigOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_encode (
  const LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_OpSpecID);

    pOps->pfPut_u16(pEncoderStream,
        pThis->ConfigData,
        &LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_ConfigData);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPConfigWord
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPConfigWord =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicNXPConfigWord",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 55,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicNXPConfigWord,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicNXPConfigWord),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPConfigWord_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPConfigWord_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPConfigWord_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPConfigWord_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPConfigWord_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicNXPConfigWord_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPConfigWord[] =
{
  
    &LLRP_fdThingMagicNXPConfigWord_PSFAlarm,
    &LLRP_fdThingMagicNXPConfigWord_ReadProtectTID,
    &LLRP_fdThingMagicNXPConfigWord_ReadProtectEPC,
    &LLRP_fdThingMagicNXPConfigWord_ReadProtectUser,
    &LLRP_fdThingMagicNXPConfigWord_PrivacyMode,
    &LLRP_fdThingMagicNXPConfigWord_DigitalOutput,
    &LLRP_fdThingMagicNXPConfigWord_MaxBackscatterStrength,
    &LLRP_fdThingMagicNXPConfigWord_ConditionalReadRangeReduction_OpenShort,
    &LLRP_fdThingMagicNXPConfigWord_ConditionalReadRangeReduction_OnOff,
    &LLRP_fdThingMagicNXPConfigWord_DataMode,
    &LLRP_fdThingMagicNXPConfigWord_TransparentMode,
    &LLRP_fdThingMagicNXPConfigWord_InvertDigitalOutput,
    &LLRP_fdThingMagicNXPConfigWord_ExternalSupply,
    &LLRP_fdThingMagicNXPConfigWord_TamperAlarm,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_PSFAlarm =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "PSFAlarm",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_ReadProtectTID =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ReadProtectTID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_ReadProtectEPC =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ReadProtectEPC",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_ReadProtectUser =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ReadProtectUser",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_PrivacyMode =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "PrivacyMode",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_DigitalOutput =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "DigitalOutput",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_MaxBackscatterStrength =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "MaxBackscatterStrength",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_ConditionalReadRangeReduction_OpenShort =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ConditionalReadRangeReduction_OpenShort",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_ConditionalReadRangeReduction_OnOff =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ConditionalReadRangeReduction_OnOff",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_DataMode =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "DataMode",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_TransparentMode =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "TransparentMode",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_InvertDigitalOutput =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "InvertDigitalOutput",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_ExternalSupply =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ExternalSupply",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_TamperAlarm =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "TamperAlarm",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicNXPConfigWord *
LLRP_ThingMagicNXPConfigWord_construct (void)
{
    LLRP_tSThingMagicNXPConfigWord *pNew;

    pNew = (LLRP_tSThingMagicNXPConfigWord *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPConfigWord);

    return pNew;
}

void
LLRP_ThingMagicNXPConfigWord_destruct (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPConfigWord_decodeFields (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->PSFAlarm =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_PSFAlarm);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_PSFAlarm);
    }
    
    if(NULL != pThis)
    {
        pThis->ReadProtectTID =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_ReadProtectTID);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_ReadProtectTID);
    }
    
    if(NULL != pThis)
    {
        pThis->ReadProtectEPC =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_ReadProtectEPC);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_ReadProtectEPC);
    }
    
    if(NULL != pThis)
    {
        pThis->ReadProtectUser =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_ReadProtectUser);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_ReadProtectUser);
    }
    
    if(NULL != pThis)
    {
        pThis->PrivacyMode =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_PrivacyMode);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_PrivacyMode);
    }
    
    if(NULL != pThis)
    {
        pThis->DigitalOutput =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_DigitalOutput);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_DigitalOutput);
    }
    
    if(NULL != pThis)
    {
        pThis->MaxBackscatterStrength =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_MaxBackscatterStrength);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_MaxBackscatterStrength);
    }
    
    if(NULL != pThis)
    {
        pThis->ConditionalReadRangeReduction_OpenShort =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_ConditionalReadRangeReduction_OpenShort);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_ConditionalReadRangeReduction_OpenShort);
    }
    
    if(NULL != pThis)
    {
        pThis->ConditionalReadRangeReduction_OnOff =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_ConditionalReadRangeReduction_OnOff);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_ConditionalReadRangeReduction_OnOff);
    }
    
    if(NULL != pThis)
    {
        pThis->DataMode =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_DataMode);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_DataMode);
    }
    
    if(NULL != pThis)
    {
        pThis->TransparentMode =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_TransparentMode);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_TransparentMode);
    }
    
    if(NULL != pThis)
    {
        pThis->InvertDigitalOutput =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_InvertDigitalOutput);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_InvertDigitalOutput);
    }
    
    if(NULL != pThis)
    {
        pThis->ExternalSupply =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_ExternalSupply);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_ExternalSupply);
    }
    
    if(NULL != pThis)
    {
        pThis->TamperAlarm =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_TamperAlarm);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_TamperAlarm);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 2);

}

void
LLRP_ThingMagicNXPConfigWord_assimilateSubParameters (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPConfigWord))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getPSFAlarm (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->PSFAlarm;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setPSFAlarm (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->PSFAlarm = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getReadProtectTID (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->ReadProtectTID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setReadProtectTID (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->ReadProtectTID = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getReadProtectEPC (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->ReadProtectEPC;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setReadProtectEPC (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->ReadProtectEPC = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getReadProtectUser (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->ReadProtectUser;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setReadProtectUser (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->ReadProtectUser = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getPrivacyMode (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->PrivacyMode;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setPrivacyMode (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->PrivacyMode = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getDigitalOutput (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->DigitalOutput;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setDigitalOutput (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->DigitalOutput = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getMaxBackscatterStrength (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->MaxBackscatterStrength;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setMaxBackscatterStrength (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->MaxBackscatterStrength = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getConditionalReadRangeReduction_OpenShort (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->ConditionalReadRangeReduction_OpenShort;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setConditionalReadRangeReduction_OpenShort (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->ConditionalReadRangeReduction_OpenShort = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getConditionalReadRangeReduction_OnOff (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->ConditionalReadRangeReduction_OnOff;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setConditionalReadRangeReduction_OnOff (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->ConditionalReadRangeReduction_OnOff = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getDataMode (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->DataMode;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setDataMode (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->DataMode = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getTransparentMode (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->TransparentMode;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setTransparentMode (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->TransparentMode = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getInvertDigitalOutput (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->InvertDigitalOutput;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setInvertDigitalOutput (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->InvertDigitalOutput = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getExternalSupply (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->ExternalSupply;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setExternalSupply (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->ExternalSupply = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getTamperAlarm (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->TamperAlarm;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setTamperAlarm (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->TamperAlarm = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPConfigWord_beginCustom (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_addCustom (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPConfigWord))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPConfigWord_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPConfigWord_encode (
  const LLRP_tSThingMagicNXPConfigWord *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u1(pEncoderStream,
        pThis->PSFAlarm,
        &LLRP_fdThingMagicNXPConfigWord_PSFAlarm);

    pOps->pfPut_u1(pEncoderStream,
        pThis->ReadProtectTID,
        &LLRP_fdThingMagicNXPConfigWord_ReadProtectTID);

    pOps->pfPut_u1(pEncoderStream,
        pThis->ReadProtectEPC,
        &LLRP_fdThingMagicNXPConfigWord_ReadProtectEPC);

    pOps->pfPut_u1(pEncoderStream,
        pThis->ReadProtectUser,
        &LLRP_fdThingMagicNXPConfigWord_ReadProtectUser);

    pOps->pfPut_u1(pEncoderStream,
        pThis->PrivacyMode,
        &LLRP_fdThingMagicNXPConfigWord_PrivacyMode);

    pOps->pfPut_u1(pEncoderStream,
        pThis->DigitalOutput,
        &LLRP_fdThingMagicNXPConfigWord_DigitalOutput);

    pOps->pfPut_u1(pEncoderStream,
        pThis->MaxBackscatterStrength,
        &LLRP_fdThingMagicNXPConfigWord_MaxBackscatterStrength);

    pOps->pfPut_u1(pEncoderStream,
        pThis->ConditionalReadRangeReduction_OpenShort,
        &LLRP_fdThingMagicNXPConfigWord_ConditionalReadRangeReduction_OpenShort);

    pOps->pfPut_u1(pEncoderStream,
        pThis->ConditionalReadRangeReduction_OnOff,
        &LLRP_fdThingMagicNXPConfigWord_ConditionalReadRangeReduction_OnOff);

    pOps->pfPut_u1(pEncoderStream,
        pThis->DataMode,
        &LLRP_fdThingMagicNXPConfigWord_DataMode);

    pOps->pfPut_u1(pEncoderStream,
        pThis->TransparentMode,
        &LLRP_fdThingMagicNXPConfigWord_TransparentMode);

    pOps->pfPut_u1(pEncoderStream,
        pThis->InvertDigitalOutput,
        &LLRP_fdThingMagicNXPConfigWord_InvertDigitalOutput);

    pOps->pfPut_u1(pEncoderStream,
        pThis->ExternalSupply,
        &LLRP_fdThingMagicNXPConfigWord_ExternalSupply);

    pOps->pfPut_u1(pEncoderStream,
        pThis->TamperAlarm,
        &LLRP_fdThingMagicNXPConfigWord_TamperAlarm);

    pOps->pfPut_reserved(pEncoderStream, 2);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPConfigWord_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicImpinjMonza4QTReadWrite
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicImpinjMonza4QTReadWrite =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicImpinjMonza4QTReadWrite",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 56,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicImpinjMonza4QTReadWrite,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicImpinjMonza4QTReadWrite),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicImpinjMonza4QTReadWrite_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicImpinjMonza4QTReadWrite_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicImpinjMonza4QTReadWrite_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicImpinjMonza4QTReadWrite_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicImpinjMonza4QTReadWrite_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicImpinjMonza4QTReadWrite_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicImpinjMonza4QTReadWrite[] =
{
  
    &LLRP_fdThingMagicImpinjMonza4QTReadWrite_OpSpecID,
    &LLRP_fdThingMagicImpinjMonza4QTReadWrite_AccessPassword,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicImpinjMonza4QTReadWrite_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicImpinjMonza4QTReadWrite_AccessPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AccessPassword",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicImpinjMonza4QTReadWrite *
LLRP_ThingMagicImpinjMonza4QTReadWrite_construct (void)
{
    LLRP_tSThingMagicImpinjMonza4QTReadWrite *pNew;

    pNew = (LLRP_tSThingMagicImpinjMonza4QTReadWrite *)
        LLRP_Element_construct(&LLRP_tdThingMagicImpinjMonza4QTReadWrite);

    return pNew;
}

void
LLRP_ThingMagicImpinjMonza4QTReadWrite_destruct (
  LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicImpinjMonza4QTReadWrite_decodeFields (
  LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicImpinjMonza4QTReadWrite_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicImpinjMonza4QTReadWrite_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicImpinjMonza4QTReadWrite_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicImpinjMonza4QTReadWrite_AccessPassword);
    }
    
}

void
LLRP_ThingMagicImpinjMonza4QTReadWrite_assimilateSubParameters (
  LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicMonza4ControlByte
    pType = &LLRP_tdThingMagicMonza4ControlByte;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicMonza4ControlByte = (LLRP_tSThingMagicMonza4ControlByte *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicMonza4Payload
    pType = &LLRP_tdThingMagicMonza4Payload;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicMonza4Payload = (LLRP_tSThingMagicMonza4Payload *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicImpinjMonza4QTReadWrite))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicImpinjMonza4QTReadWrite_getOpSpecID (
  LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicImpinjMonza4QTReadWrite_setOpSpecID (
  LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicImpinjMonza4QTReadWrite_getAccessPassword (
  LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicImpinjMonza4QTReadWrite_setAccessPassword (
  LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicMonza4ControlByte *
LLRP_ThingMagicImpinjMonza4QTReadWrite_getThingMagicMonza4ControlByte (
  LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis)
{
    return pThis->pThingMagicMonza4ControlByte;
}

LLRP_tResultCode
LLRP_ThingMagicImpinjMonza4QTReadWrite_setThingMagicMonza4ControlByte (
  LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis,
  LLRP_tSThingMagicMonza4ControlByte * pValue)
{
    SUBPARAM_SET(pThingMagicMonza4ControlByte, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicMonza4Payload *
LLRP_ThingMagicImpinjMonza4QTReadWrite_getThingMagicMonza4Payload (
  LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis)
{
    return pThis->pThingMagicMonza4Payload;
}

LLRP_tResultCode
LLRP_ThingMagicImpinjMonza4QTReadWrite_setThingMagicMonza4Payload (
  LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis,
  LLRP_tSThingMagicMonza4Payload * pValue)
{
    SUBPARAM_SET(pThingMagicMonza4Payload, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicImpinjMonza4QTReadWrite_beginCustom (
  LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicImpinjMonza4QTReadWrite_addCustom (
  LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicImpinjMonza4QTReadWrite))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicImpinjMonza4QTReadWrite_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicImpinjMonza4QTReadWrite_encode (
  const LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicImpinjMonza4QTReadWrite_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicImpinjMonza4QTReadWrite_AccessPassword);

    pType = &LLRP_tdThingMagicMonza4ControlByte;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicMonza4ControlByte,
        pType);
      
    pType = &LLRP_tdThingMagicMonza4Payload;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicMonza4Payload,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicImpinjMonza4QTReadWrite_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicImpinjMonza4QTReadWriteOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicImpinjMonza4QTReadWriteOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicImpinjMonza4QTReadWriteOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 57,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicImpinjMonza4QTReadWriteOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicImpinjMonza4QTReadWriteOpSpecResult[] =
{
  
    &LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_Result,
    &LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_Payload,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_Payload =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Payload",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_construct (void)
{
    LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicImpinjMonza4QTReadWriteOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_destruct (
  LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_decodeFields (
  LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->Payload =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_Payload);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_Payload);
    }
    
}

void
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicImpinjMonza4QTReadWriteOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_getResult (
  LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_setResult (
  LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_getPayload (
  LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *pThis)
{
    return pThis->Payload;
}

LLRP_tResultCode
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_setPayload (
  LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->Payload = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_beginCustom (
  LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_addCustom (
  LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicImpinjMonza4QTReadWriteOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_encode (
  const LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_OpSpecID);

    pOps->pfPut_u16(pEncoderStream,
        pThis->Payload,
        &LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_Payload);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicMonza4ControlByte
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicMonza4ControlByte =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicMonza4ControlByte",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 58,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicMonza4ControlByte,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicMonza4ControlByte),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicMonza4ControlByte_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicMonza4ControlByte_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicMonza4ControlByte_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicMonza4ControlByte_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicMonza4ControlByte_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicMonza4ControlByte_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicMonza4ControlByte[] =
{
  
    &LLRP_fdThingMagicMonza4ControlByte_Persistance,
    &LLRP_fdThingMagicMonza4ControlByte_ReadWrite,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicMonza4ControlByte_Persistance =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Persistance",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicMonza4ControlByte_ReadWrite =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ReadWrite",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicMonza4ControlByte *
LLRP_ThingMagicMonza4ControlByte_construct (void)
{
    LLRP_tSThingMagicMonza4ControlByte *pNew;

    pNew = (LLRP_tSThingMagicMonza4ControlByte *)
        LLRP_Element_construct(&LLRP_tdThingMagicMonza4ControlByte);

    return pNew;
}

void
LLRP_ThingMagicMonza4ControlByte_destruct (
  LLRP_tSThingMagicMonza4ControlByte *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicMonza4ControlByte_decodeFields (
  LLRP_tSThingMagicMonza4ControlByte *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->Persistance =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicMonza4ControlByte_Persistance);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicMonza4ControlByte_Persistance);
    }
    
    if(NULL != pThis)
    {
        pThis->ReadWrite =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicMonza4ControlByte_ReadWrite);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicMonza4ControlByte_ReadWrite);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 6);

}

void
LLRP_ThingMagicMonza4ControlByte_assimilateSubParameters (
  LLRP_tSThingMagicMonza4ControlByte *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicMonza4ControlByte))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u1_t
LLRP_ThingMagicMonza4ControlByte_getPersistance (
  LLRP_tSThingMagicMonza4ControlByte *pThis)
{
    return pThis->Persistance;
}

LLRP_tResultCode
LLRP_ThingMagicMonza4ControlByte_setPersistance (
  LLRP_tSThingMagicMonza4ControlByte *pThis,
  llrp_u1_t Value)
{
    pThis->Persistance = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicMonza4ControlByte_getReadWrite (
  LLRP_tSThingMagicMonza4ControlByte *pThis)
{
    return pThis->ReadWrite;
}

LLRP_tResultCode
LLRP_ThingMagicMonza4ControlByte_setReadWrite (
  LLRP_tSThingMagicMonza4ControlByte *pThis,
  llrp_u1_t Value)
{
    pThis->ReadWrite = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicMonza4ControlByte_beginCustom (
  LLRP_tSThingMagicMonza4ControlByte *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicMonza4ControlByte_addCustom (
  LLRP_tSThingMagicMonza4ControlByte *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicMonza4ControlByte))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicMonza4ControlByte_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicMonza4ControlByte_encode (
  const LLRP_tSThingMagicMonza4ControlByte *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u1(pEncoderStream,
        pThis->Persistance,
        &LLRP_fdThingMagicMonza4ControlByte_Persistance);

    pOps->pfPut_u1(pEncoderStream,
        pThis->ReadWrite,
        &LLRP_fdThingMagicMonza4ControlByte_ReadWrite);

    pOps->pfPut_reserved(pEncoderStream, 6);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicMonza4ControlByte_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicMonza4Payload
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicMonza4Payload =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicMonza4Payload",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 59,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicMonza4Payload,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicMonza4Payload),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicMonza4Payload_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicMonza4Payload_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicMonza4Payload_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicMonza4Payload_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicMonza4Payload_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicMonza4Payload_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicMonza4Payload[] =
{
  
    &LLRP_fdThingMagicMonza4Payload_QT_MEM,
    &LLRP_fdThingMagicMonza4Payload_QT_SR,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicMonza4Payload_QT_MEM =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "QT_MEM",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicMonza4Payload_QT_SR =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "QT_SR",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicMonza4Payload *
LLRP_ThingMagicMonza4Payload_construct (void)
{
    LLRP_tSThingMagicMonza4Payload *pNew;

    pNew = (LLRP_tSThingMagicMonza4Payload *)
        LLRP_Element_construct(&LLRP_tdThingMagicMonza4Payload);

    return pNew;
}

void
LLRP_ThingMagicMonza4Payload_destruct (
  LLRP_tSThingMagicMonza4Payload *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicMonza4Payload_decodeFields (
  LLRP_tSThingMagicMonza4Payload *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->QT_MEM =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicMonza4Payload_QT_MEM);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicMonza4Payload_QT_MEM);
    }
    
    if(NULL != pThis)
    {
        pThis->QT_SR =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicMonza4Payload_QT_SR);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicMonza4Payload_QT_SR);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 14);

}

void
LLRP_ThingMagicMonza4Payload_assimilateSubParameters (
  LLRP_tSThingMagicMonza4Payload *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicMonza4Payload))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u1_t
LLRP_ThingMagicMonza4Payload_getQT_MEM (
  LLRP_tSThingMagicMonza4Payload *pThis)
{
    return pThis->QT_MEM;
}

LLRP_tResultCode
LLRP_ThingMagicMonza4Payload_setQT_MEM (
  LLRP_tSThingMagicMonza4Payload *pThis,
  llrp_u1_t Value)
{
    pThis->QT_MEM = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicMonza4Payload_getQT_SR (
  LLRP_tSThingMagicMonza4Payload *pThis)
{
    return pThis->QT_SR;
}

LLRP_tResultCode
LLRP_ThingMagicMonza4Payload_setQT_SR (
  LLRP_tSThingMagicMonza4Payload *pThis,
  llrp_u1_t Value)
{
    pThis->QT_SR = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicMonza4Payload_beginCustom (
  LLRP_tSThingMagicMonza4Payload *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicMonza4Payload_addCustom (
  LLRP_tSThingMagicMonza4Payload *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicMonza4Payload))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicMonza4Payload_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicMonza4Payload_encode (
  const LLRP_tSThingMagicMonza4Payload *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u1(pEncoderStream,
        pThis->QT_MEM,
        &LLRP_fdThingMagicMonza4Payload_QT_MEM);

    pOps->pfPut_u1(pEncoderStream,
        pThis->QT_SR,
        &LLRP_fdThingMagicMonza4Payload_QT_SR);

    pOps->pfPut_reserved(pEncoderStream, 14);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicMonza4Payload_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicWriteTag
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicWriteTag =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicWriteTag",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 60,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicWriteTag,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicWriteTag),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicWriteTag_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicWriteTag_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicWriteTag_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicWriteTag_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicWriteTag_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicWriteTag_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicWriteTag[] =
{
  
    &LLRP_fdThingMagicWriteTag_OpSpecID,
    &LLRP_fdThingMagicWriteTag_AccessPassword,
    &LLRP_fdThingMagicWriteTag_WriteData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicWriteTag_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicWriteTag_AccessPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AccessPassword",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicWriteTag_WriteData =
{
    .eFieldType         = LLRP_FT_U16V,
    .eFieldFormat       = LLRP_FMT_HEX,
    .pName              = "WriteData",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicWriteTag *
LLRP_ThingMagicWriteTag_construct (void)
{
    LLRP_tSThingMagicWriteTag *pNew;

    pNew = (LLRP_tSThingMagicWriteTag *)
        LLRP_Element_construct(&LLRP_tdThingMagicWriteTag);

    return pNew;
}

void
LLRP_ThingMagicWriteTag_destruct (
  LLRP_tSThingMagicWriteTag *pThis)
{
  
    LLRP_u16v_clear(&pThis->WriteData);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicWriteTag_decodeFields (
  LLRP_tSThingMagicWriteTag *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicWriteTag_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicWriteTag_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicWriteTag_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicWriteTag_AccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->WriteData =
                pOps->pfGet_u16v(pDecoderStream,
                        &LLRP_fdThingMagicWriteTag_WriteData);
    }
    else
    {
        pOps->pfGet_u16v(pDecoderStream,
                &LLRP_fdThingMagicWriteTag_WriteData);
    }
    
}

void
LLRP_ThingMagicWriteTag_assimilateSubParameters (
  LLRP_tSThingMagicWriteTag *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicWriteTag))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicWriteTag_getOpSpecID (
  LLRP_tSThingMagicWriteTag *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicWriteTag_setOpSpecID (
  LLRP_tSThingMagicWriteTag *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicWriteTag_getAccessPassword (
  LLRP_tSThingMagicWriteTag *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicWriteTag_setAccessPassword (
  LLRP_tSThingMagicWriteTag *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


llrp_u16v_t
LLRP_ThingMagicWriteTag_getWriteData (
  LLRP_tSThingMagicWriteTag *pThis)
{
    return pThis->WriteData;
}

LLRP_tResultCode
LLRP_ThingMagicWriteTag_setWriteData (
  LLRP_tSThingMagicWriteTag *pThis,
  llrp_u16v_t Value)
{
    LLRP_u16v_clear(&pThis->WriteData);

    pThis->WriteData = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicWriteTag_beginCustom (
  LLRP_tSThingMagicWriteTag *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicWriteTag_addCustom (
  LLRP_tSThingMagicWriteTag *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicWriteTag))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicWriteTag_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicWriteTag_encode (
  const LLRP_tSThingMagicWriteTag *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicWriteTag_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicWriteTag_AccessPassword);

    pOps->pfPut_u16v(pEncoderStream,
        pThis->WriteData,
        &LLRP_fdThingMagicWriteTag_WriteData);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicWriteTag_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicWriteTagOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicWriteTagOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicWriteTagOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 61,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicWriteTagOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicWriteTagOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicWriteTagOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicWriteTagOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicWriteTagOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicWriteTagOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicWriteTagOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicWriteTagOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicWriteTagOpSpecResult[] =
{
  
    &LLRP_fdThingMagicWriteTagOpSpecResult_Result,
    &LLRP_fdThingMagicWriteTagOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicWriteTagOpSpecResult_NumWordsWritten,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicWriteTagOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicWriteTagOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicWriteTagOpSpecResult_NumWordsWritten =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "NumWordsWritten",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicWriteTagOpSpecResult *
LLRP_ThingMagicWriteTagOpSpecResult_construct (void)
{
    LLRP_tSThingMagicWriteTagOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicWriteTagOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicWriteTagOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicWriteTagOpSpecResult_destruct (
  LLRP_tSThingMagicWriteTagOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicWriteTagOpSpecResult_decodeFields (
  LLRP_tSThingMagicWriteTagOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicWriteTagOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicWriteTagOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicWriteTagOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicWriteTagOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->NumWordsWritten =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicWriteTagOpSpecResult_NumWordsWritten);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicWriteTagOpSpecResult_NumWordsWritten);
    }
    
}

void
LLRP_ThingMagicWriteTagOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicWriteTagOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicWriteTagOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicWriteTagOpSpecResult_getResult (
  LLRP_tSThingMagicWriteTagOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicWriteTagOpSpecResult_setResult (
  LLRP_tSThingMagicWriteTagOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicWriteTagOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicWriteTagOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicWriteTagOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicWriteTagOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicWriteTagOpSpecResult_getNumWordsWritten (
  LLRP_tSThingMagicWriteTagOpSpecResult *pThis)
{
    return pThis->NumWordsWritten;
}

LLRP_tResultCode
LLRP_ThingMagicWriteTagOpSpecResult_setNumWordsWritten (
  LLRP_tSThingMagicWriteTagOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->NumWordsWritten = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicWriteTagOpSpecResult_beginCustom (
  LLRP_tSThingMagicWriteTagOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicWriteTagOpSpecResult_addCustom (
  LLRP_tSThingMagicWriteTagOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicWriteTagOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicWriteTagOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicWriteTagOpSpecResult_encode (
  const LLRP_tSThingMagicWriteTagOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicWriteTagOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicWriteTagOpSpecResult_OpSpecID);

    pOps->pfPut_u16(pEncoderStream,
        pThis->NumWordsWritten,
        &LLRP_fdThingMagicWriteTagOpSpecResult_NumWordsWritten);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicWriteTagOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicISO180006BInventoryCommand
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicISO180006BInventoryCommand =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicISO180006BInventoryCommand",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 62,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicISO180006BInventoryCommand,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicISO180006BInventoryCommand),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicISO180006BInventoryCommand_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicISO180006BInventoryCommand_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicISO180006BInventoryCommand_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicISO180006BInventoryCommand_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicISO180006BInventoryCommand_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicISO180006BInventoryCommand_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicISO180006BInventoryCommand[] =
{
  
    NULL
};


LLRP_tSThingMagicISO180006BInventoryCommand *
LLRP_ThingMagicISO180006BInventoryCommand_construct (void)
{
    LLRP_tSThingMagicISO180006BInventoryCommand *pNew;

    pNew = (LLRP_tSThingMagicISO180006BInventoryCommand *)
        LLRP_Element_construct(&LLRP_tdThingMagicISO180006BInventoryCommand);

    return pNew;
}

void
LLRP_ThingMagicISO180006BInventoryCommand_destruct (
  LLRP_tSThingMagicISO180006BInventoryCommand *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicISO180006BInventoryCommand_decodeFields (
  LLRP_tSThingMagicISO180006BInventoryCommand *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicISO180006BInventoryCommand_assimilateSubParameters (
  LLRP_tSThingMagicISO180006BInventoryCommand *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-1 of ThingMagicISO180006BTagPattern
    pType = &LLRP_tdThingMagicISO180006BTagPattern;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pThingMagicISO180006BTagPattern = (LLRP_tSThingMagicISO180006BTagPattern *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicISO180006BTagPattern *
LLRP_ThingMagicISO180006BInventoryCommand_getThingMagicISO180006BTagPattern (
  LLRP_tSThingMagicISO180006BInventoryCommand *pThis)
{
    return pThis->pThingMagicISO180006BTagPattern;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BInventoryCommand_setThingMagicISO180006BTagPattern (
  LLRP_tSThingMagicISO180006BInventoryCommand *pThis,
  LLRP_tSThingMagicISO180006BTagPattern * pValue)
{
    SUBPARAM_SET(pThingMagicISO180006BTagPattern, pValue);

    return LLRP_RC_OK;
}


void
LLRP_ThingMagicISO180006BInventoryCommand_encode (
  const LLRP_tSThingMagicISO180006BInventoryCommand *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicISO180006BTagPattern;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicISO180006BTagPattern,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicISO180006BInventoryCommand_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommand)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdAirProtocolInventoryCommandSettings)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicISO180006BTagPattern
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicISO180006BTagPattern =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicISO180006BTagPattern",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 63,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicISO180006BTagPattern,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicISO180006BTagPattern),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicISO180006BTagPattern_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicISO180006BTagPattern_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicISO180006BTagPattern_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicISO180006BTagPattern_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicISO180006BTagPattern_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicISO180006BTagPattern_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicISO180006BTagPattern[] =
{
  
    &LLRP_fdThingMagicISO180006BTagPattern_FilterType,
    &LLRP_fdThingMagicISO180006BTagPattern_Invert,
    &LLRP_fdThingMagicISO180006BTagPattern_SelectOp,
    &LLRP_fdThingMagicISO180006BTagPattern_Address,
    &LLRP_fdThingMagicISO180006BTagPattern_Mask,
    &LLRP_fdThingMagicISO180006BTagPattern_TagData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BTagPattern_FilterType =
{
    .eFieldType         = LLRP_FT_E1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "FilterType",
    .pEnumTable         = LLRP_estThingMagicISO180006BFilterType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BTagPattern_Invert =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Invert",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BTagPattern_SelectOp =
{
    .eFieldType         = LLRP_FT_U2,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "SelectOp",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BTagPattern_Address =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Address",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BTagPattern_Mask =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Mask",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BTagPattern_TagData =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_HEX,
    .pName              = "TagData",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicISO180006BTagPattern *
LLRP_ThingMagicISO180006BTagPattern_construct (void)
{
    LLRP_tSThingMagicISO180006BTagPattern *pNew;

    pNew = (LLRP_tSThingMagicISO180006BTagPattern *)
        LLRP_Element_construct(&LLRP_tdThingMagicISO180006BTagPattern);

    return pNew;
}

void
LLRP_ThingMagicISO180006BTagPattern_destruct (
  LLRP_tSThingMagicISO180006BTagPattern *pThis)
{
  
    LLRP_u8v_clear(&pThis->TagData);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicISO180006BTagPattern_decodeFields (
  LLRP_tSThingMagicISO180006BTagPattern *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eFilterType =
                (LLRP_tEThingMagicISO180006BFilterType) pOps->pfGet_e1(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BTagPattern_FilterType);
    }
    else
    {
        pOps->pfGet_e1(pDecoderStream,
                &LLRP_fdThingMagicISO180006BTagPattern_FilterType);
    }

    pOps->pfGet_reserved(pDecoderStream, 7);

    if(NULL != pThis)
    {
        pThis->Invert =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BTagPattern_Invert);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicISO180006BTagPattern_Invert);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

    if(NULL != pThis)
    {
        pThis->SelectOp =
                pOps->pfGet_u2(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BTagPattern_SelectOp);
    }
    else
    {
        pOps->pfGet_u2(pDecoderStream,
                &LLRP_fdThingMagicISO180006BTagPattern_SelectOp);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 6);

    if(NULL != pThis)
    {
        pThis->Address =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BTagPattern_Address);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicISO180006BTagPattern_Address);
    }
    
    if(NULL != pThis)
    {
        pThis->Mask =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BTagPattern_Mask);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicISO180006BTagPattern_Mask);
    }
    
    if(NULL != pThis)
    {
        pThis->TagData =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BTagPattern_TagData);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicISO180006BTagPattern_TagData);
    }
    
}

void
LLRP_ThingMagicISO180006BTagPattern_assimilateSubParameters (
  LLRP_tSThingMagicISO180006BTagPattern *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicISO180006BFilterType
LLRP_ThingMagicISO180006BTagPattern_getFilterType (
  LLRP_tSThingMagicISO180006BTagPattern *pThis)
{
    return pThis->eFilterType;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BTagPattern_setFilterType (
  LLRP_tSThingMagicISO180006BTagPattern *pThis,
  LLRP_tEThingMagicISO180006BFilterType eValue)
{
    pThis->eFilterType = eValue;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicISO180006BTagPattern_getInvert (
  LLRP_tSThingMagicISO180006BTagPattern *pThis)
{
    return pThis->Invert;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BTagPattern_setInvert (
  LLRP_tSThingMagicISO180006BTagPattern *pThis,
  llrp_u1_t Value)
{
    pThis->Invert = Value;
    return LLRP_RC_OK;
}


llrp_u2_t
LLRP_ThingMagicISO180006BTagPattern_getSelectOp (
  LLRP_tSThingMagicISO180006BTagPattern *pThis)
{
    return pThis->SelectOp;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BTagPattern_setSelectOp (
  LLRP_tSThingMagicISO180006BTagPattern *pThis,
  llrp_u2_t Value)
{
    pThis->SelectOp = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicISO180006BTagPattern_getAddress (
  LLRP_tSThingMagicISO180006BTagPattern *pThis)
{
    return pThis->Address;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BTagPattern_setAddress (
  LLRP_tSThingMagicISO180006BTagPattern *pThis,
  llrp_u8_t Value)
{
    pThis->Address = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicISO180006BTagPattern_getMask (
  LLRP_tSThingMagicISO180006BTagPattern *pThis)
{
    return pThis->Mask;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BTagPattern_setMask (
  LLRP_tSThingMagicISO180006BTagPattern *pThis,
  llrp_u8_t Value)
{
    pThis->Mask = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicISO180006BTagPattern_getTagData (
  LLRP_tSThingMagicISO180006BTagPattern *pThis)
{
    return pThis->TagData;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BTagPattern_setTagData (
  LLRP_tSThingMagicISO180006BTagPattern *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->TagData);

    pThis->TagData = Value;
    return LLRP_RC_OK;
}


void
LLRP_ThingMagicISO180006BTagPattern_encode (
  const LLRP_tSThingMagicISO180006BTagPattern *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e1(pEncoderStream,
        (int)pThis->eFilterType,
        &LLRP_fdThingMagicISO180006BTagPattern_FilterType);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pOps->pfPut_u1(pEncoderStream,
        pThis->Invert,
        &LLRP_fdThingMagicISO180006BTagPattern_Invert);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pOps->pfPut_u2(pEncoderStream,
        pThis->SelectOp,
        &LLRP_fdThingMagicISO180006BTagPattern_SelectOp);

    pOps->pfPut_reserved(pEncoderStream, 6);

    pOps->pfPut_u8(pEncoderStream,
        pThis->Address,
        &LLRP_fdThingMagicISO180006BTagPattern_Address);

    pOps->pfPut_u8(pEncoderStream,
        pThis->Mask,
        &LLRP_fdThingMagicISO180006BTagPattern_Mask);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->TagData,
        &LLRP_fdThingMagicISO180006BTagPattern_TagData);

}


llrp_bool_t
LLRP_ThingMagicISO180006BTagPattern_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicISO180006BRead
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicISO180006BRead =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicISO180006BRead",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 64,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicISO180006BRead,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicISO180006BRead),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicISO180006BRead_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicISO180006BRead_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicISO180006BRead_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicISO180006BRead_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicISO180006BRead_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicISO180006BRead_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicISO180006BRead[] =
{
  
    &LLRP_fdThingMagicISO180006BRead_OpSpecID,
    &LLRP_fdThingMagicISO180006BRead_ByteAddress,
    &LLRP_fdThingMagicISO180006BRead_ByteLen,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BRead_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BRead_ByteAddress =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ByteAddress",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BRead_ByteLen =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ByteLen",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicISO180006BRead *
LLRP_ThingMagicISO180006BRead_construct (void)
{
    LLRP_tSThingMagicISO180006BRead *pNew;

    pNew = (LLRP_tSThingMagicISO180006BRead *)
        LLRP_Element_construct(&LLRP_tdThingMagicISO180006BRead);

    return pNew;
}

void
LLRP_ThingMagicISO180006BRead_destruct (
  LLRP_tSThingMagicISO180006BRead *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicISO180006BRead_decodeFields (
  LLRP_tSThingMagicISO180006BRead *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BRead_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicISO180006BRead_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->ByteAddress =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BRead_ByteAddress);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicISO180006BRead_ByteAddress);
    }
    
    if(NULL != pThis)
    {
        pThis->ByteLen =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BRead_ByteLen);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicISO180006BRead_ByteLen);
    }
    
}

void
LLRP_ThingMagicISO180006BRead_assimilateSubParameters (
  LLRP_tSThingMagicISO180006BRead *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicISO180006BRead_getOpSpecID (
  LLRP_tSThingMagicISO180006BRead *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BRead_setOpSpecID (
  LLRP_tSThingMagicISO180006BRead *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicISO180006BRead_getByteAddress (
  LLRP_tSThingMagicISO180006BRead *pThis)
{
    return pThis->ByteAddress;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BRead_setByteAddress (
  LLRP_tSThingMagicISO180006BRead *pThis,
  llrp_u16_t Value)
{
    pThis->ByteAddress = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicISO180006BRead_getByteLen (
  LLRP_tSThingMagicISO180006BRead *pThis)
{
    return pThis->ByteLen;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BRead_setByteLen (
  LLRP_tSThingMagicISO180006BRead *pThis,
  llrp_u16_t Value)
{
    pThis->ByteLen = Value;
    return LLRP_RC_OK;
}


void
LLRP_ThingMagicISO180006BRead_encode (
  const LLRP_tSThingMagicISO180006BRead *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicISO180006BRead_OpSpecID);

    pOps->pfPut_u16(pEncoderStream,
        pThis->ByteAddress,
        &LLRP_fdThingMagicISO180006BRead_ByteAddress);

    pOps->pfPut_u16(pEncoderStream,
        pThis->ByteLen,
        &LLRP_fdThingMagicISO180006BRead_ByteLen);

}


llrp_bool_t
LLRP_ThingMagicISO180006BRead_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicISO180006BReadOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicISO180006BReadOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicISO180006BReadOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 65,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicISO180006BReadOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicISO180006BReadOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicISO180006BReadOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicISO180006BReadOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicISO180006BReadOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicISO180006BReadOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicISO180006BReadOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicISO180006BReadOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicISO180006BReadOpSpecResult[] =
{
  
    &LLRP_fdThingMagicISO180006BReadOpSpecResult_Result,
    &LLRP_fdThingMagicISO180006BReadOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicISO180006BReadOpSpecResult_ReadData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BReadOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BReadOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BReadOpSpecResult_ReadData =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_HEX,
    .pName              = "ReadData",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicISO180006BReadOpSpecResult *
LLRP_ThingMagicISO180006BReadOpSpecResult_construct (void)
{
    LLRP_tSThingMagicISO180006BReadOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicISO180006BReadOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicISO180006BReadOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicISO180006BReadOpSpecResult_destruct (
  LLRP_tSThingMagicISO180006BReadOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->ReadData);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicISO180006BReadOpSpecResult_decodeFields (
  LLRP_tSThingMagicISO180006BReadOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BReadOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicISO180006BReadOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BReadOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicISO180006BReadOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->ReadData =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BReadOpSpecResult_ReadData);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicISO180006BReadOpSpecResult_ReadData);
    }
    
}

void
LLRP_ThingMagicISO180006BReadOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicISO180006BReadOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicISO180006BReadOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicISO180006BReadOpSpecResult_getResult (
  LLRP_tSThingMagicISO180006BReadOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BReadOpSpecResult_setResult (
  LLRP_tSThingMagicISO180006BReadOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicISO180006BReadOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicISO180006BReadOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BReadOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicISO180006BReadOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicISO180006BReadOpSpecResult_getReadData (
  LLRP_tSThingMagicISO180006BReadOpSpecResult *pThis)
{
    return pThis->ReadData;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BReadOpSpecResult_setReadData (
  LLRP_tSThingMagicISO180006BReadOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->ReadData);

    pThis->ReadData = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicISO180006BReadOpSpecResult_beginCustom (
  LLRP_tSThingMagicISO180006BReadOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BReadOpSpecResult_addCustom (
  LLRP_tSThingMagicISO180006BReadOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicISO180006BReadOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicISO180006BReadOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicISO180006BReadOpSpecResult_encode (
  const LLRP_tSThingMagicISO180006BReadOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicISO180006BReadOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicISO180006BReadOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->ReadData,
        &LLRP_fdThingMagicISO180006BReadOpSpecResult_ReadData);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicISO180006BReadOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicCustomAirProtocols
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicCustomAirProtocols =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicCustomAirProtocols",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 66,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicCustomAirProtocols,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicCustomAirProtocols),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicCustomAirProtocols_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicCustomAirProtocols_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicCustomAirProtocols_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicCustomAirProtocols_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicCustomAirProtocols_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicCustomAirProtocols_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicCustomAirProtocols[] =
{
  
    &LLRP_fdThingMagicCustomAirProtocols_customProtocolId,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicCustomAirProtocols_customProtocolId =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "customProtocolId",
    .pEnumTable         = LLRP_estThingMagicCustomAirProtocolList,
};

LLRP_tSThingMagicCustomAirProtocols *
LLRP_ThingMagicCustomAirProtocols_construct (void)
{
    LLRP_tSThingMagicCustomAirProtocols *pNew;

    pNew = (LLRP_tSThingMagicCustomAirProtocols *)
        LLRP_Element_construct(&LLRP_tdThingMagicCustomAirProtocols);

    return pNew;
}

void
LLRP_ThingMagicCustomAirProtocols_destruct (
  LLRP_tSThingMagicCustomAirProtocols *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicCustomAirProtocols_decodeFields (
  LLRP_tSThingMagicCustomAirProtocols *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->ecustomProtocolId =
                (LLRP_tEThingMagicCustomAirProtocolList) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicCustomAirProtocols_customProtocolId);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicCustomAirProtocols_customProtocolId);
    }

}

void
LLRP_ThingMagicCustomAirProtocols_assimilateSubParameters (
  LLRP_tSThingMagicCustomAirProtocols *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomAirProtocolList
LLRP_ThingMagicCustomAirProtocols_getcustomProtocolId (
  LLRP_tSThingMagicCustomAirProtocols *pThis)
{
    return pThis->ecustomProtocolId;
}

LLRP_tResultCode
LLRP_ThingMagicCustomAirProtocols_setcustomProtocolId (
  LLRP_tSThingMagicCustomAirProtocols *pThis,
  LLRP_tEThingMagicCustomAirProtocolList eValue)
{
    pThis->ecustomProtocolId = eValue;
    return LLRP_RC_OK;
}


void
LLRP_ThingMagicCustomAirProtocols_encode (
  const LLRP_tSThingMagicCustomAirProtocols *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->ecustomProtocolId,
        &LLRP_fdThingMagicCustomAirProtocols_customProtocolId);

}


llrp_bool_t
LLRP_ThingMagicCustomAirProtocols_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommand)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdInventoryParameterSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicISO180006BWrite
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicISO180006BWrite =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicISO180006BWrite",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 67,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicISO180006BWrite,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicISO180006BWrite),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicISO180006BWrite_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicISO180006BWrite_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicISO180006BWrite_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicISO180006BWrite_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicISO180006BWrite_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicISO180006BWrite_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicISO180006BWrite[] =
{
  
    &LLRP_fdThingMagicISO180006BWrite_OpSpecID,
    &LLRP_fdThingMagicISO180006BWrite_ByteAddress,
    &LLRP_fdThingMagicISO180006BWrite_WriteData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BWrite_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BWrite_ByteAddress =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ByteAddress",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BWrite_WriteData =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_HEX,
    .pName              = "WriteData",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicISO180006BWrite *
LLRP_ThingMagicISO180006BWrite_construct (void)
{
    LLRP_tSThingMagicISO180006BWrite *pNew;

    pNew = (LLRP_tSThingMagicISO180006BWrite *)
        LLRP_Element_construct(&LLRP_tdThingMagicISO180006BWrite);

    return pNew;
}

void
LLRP_ThingMagicISO180006BWrite_destruct (
  LLRP_tSThingMagicISO180006BWrite *pThis)
{
  
    LLRP_u8v_clear(&pThis->WriteData);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicISO180006BWrite_decodeFields (
  LLRP_tSThingMagicISO180006BWrite *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BWrite_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicISO180006BWrite_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->ByteAddress =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BWrite_ByteAddress);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicISO180006BWrite_ByteAddress);
    }
    
    if(NULL != pThis)
    {
        pThis->WriteData =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BWrite_WriteData);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicISO180006BWrite_WriteData);
    }
    
}

void
LLRP_ThingMagicISO180006BWrite_assimilateSubParameters (
  LLRP_tSThingMagicISO180006BWrite *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicISO180006BWrite_getOpSpecID (
  LLRP_tSThingMagicISO180006BWrite *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BWrite_setOpSpecID (
  LLRP_tSThingMagicISO180006BWrite *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicISO180006BWrite_getByteAddress (
  LLRP_tSThingMagicISO180006BWrite *pThis)
{
    return pThis->ByteAddress;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BWrite_setByteAddress (
  LLRP_tSThingMagicISO180006BWrite *pThis,
  llrp_u16_t Value)
{
    pThis->ByteAddress = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicISO180006BWrite_getWriteData (
  LLRP_tSThingMagicISO180006BWrite *pThis)
{
    return pThis->WriteData;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BWrite_setWriteData (
  LLRP_tSThingMagicISO180006BWrite *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->WriteData);

    pThis->WriteData = Value;
    return LLRP_RC_OK;
}


void
LLRP_ThingMagicISO180006BWrite_encode (
  const LLRP_tSThingMagicISO180006BWrite *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicISO180006BWrite_OpSpecID);

    pOps->pfPut_u16(pEncoderStream,
        pThis->ByteAddress,
        &LLRP_fdThingMagicISO180006BWrite_ByteAddress);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->WriteData,
        &LLRP_fdThingMagicISO180006BWrite_WriteData);

}


llrp_bool_t
LLRP_ThingMagicISO180006BWrite_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicISO180006BWriteOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicISO180006BWriteOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicISO180006BWriteOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 68,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicISO180006BWriteOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicISO180006BWriteOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicISO180006BWriteOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicISO180006BWriteOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicISO180006BWriteOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicISO180006BWriteOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicISO180006BWriteOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicISO180006BWriteOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicISO180006BWriteOpSpecResult[] =
{
  
    &LLRP_fdThingMagicISO180006BWriteOpSpecResult_Result,
    &LLRP_fdThingMagicISO180006BWriteOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicISO180006BWriteOpSpecResult_NumBytesWritten,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BWriteOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BWriteOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BWriteOpSpecResult_NumBytesWritten =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "NumBytesWritten",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicISO180006BWriteOpSpecResult *
LLRP_ThingMagicISO180006BWriteOpSpecResult_construct (void)
{
    LLRP_tSThingMagicISO180006BWriteOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicISO180006BWriteOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicISO180006BWriteOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicISO180006BWriteOpSpecResult_destruct (
  LLRP_tSThingMagicISO180006BWriteOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicISO180006BWriteOpSpecResult_decodeFields (
  LLRP_tSThingMagicISO180006BWriteOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BWriteOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicISO180006BWriteOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BWriteOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicISO180006BWriteOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->NumBytesWritten =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BWriteOpSpecResult_NumBytesWritten);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicISO180006BWriteOpSpecResult_NumBytesWritten);
    }
    
}

void
LLRP_ThingMagicISO180006BWriteOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicISO180006BWriteOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicISO180006BWriteOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicISO180006BWriteOpSpecResult_getResult (
  LLRP_tSThingMagicISO180006BWriteOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BWriteOpSpecResult_setResult (
  LLRP_tSThingMagicISO180006BWriteOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicISO180006BWriteOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicISO180006BWriteOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BWriteOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicISO180006BWriteOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicISO180006BWriteOpSpecResult_getNumBytesWritten (
  LLRP_tSThingMagicISO180006BWriteOpSpecResult *pThis)
{
    return pThis->NumBytesWritten;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BWriteOpSpecResult_setNumBytesWritten (
  LLRP_tSThingMagicISO180006BWriteOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->NumBytesWritten = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicISO180006BWriteOpSpecResult_beginCustom (
  LLRP_tSThingMagicISO180006BWriteOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BWriteOpSpecResult_addCustom (
  LLRP_tSThingMagicISO180006BWriteOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicISO180006BWriteOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicISO180006BWriteOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicISO180006BWriteOpSpecResult_encode (
  const LLRP_tSThingMagicISO180006BWriteOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicISO180006BWriteOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicISO180006BWriteOpSpecResult_OpSpecID);

    pOps->pfPut_u16(pEncoderStream,
        pThis->NumBytesWritten,
        &LLRP_fdThingMagicISO180006BWriteOpSpecResult_NumBytesWritten);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicISO180006BWriteOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicISO180006BLock
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicISO180006BLock =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicISO180006BLock",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 69,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicISO180006BLock,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicISO180006BLock),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicISO180006BLock_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicISO180006BLock_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicISO180006BLock_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicISO180006BLock_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicISO180006BLock_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicISO180006BLock_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicISO180006BLock[] =
{
  
    &LLRP_fdThingMagicISO180006BLock_OpSpecID,
    &LLRP_fdThingMagicISO180006BLock_Address,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BLock_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BLock_Address =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Address",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicISO180006BLock *
LLRP_ThingMagicISO180006BLock_construct (void)
{
    LLRP_tSThingMagicISO180006BLock *pNew;

    pNew = (LLRP_tSThingMagicISO180006BLock *)
        LLRP_Element_construct(&LLRP_tdThingMagicISO180006BLock);

    return pNew;
}

void
LLRP_ThingMagicISO180006BLock_destruct (
  LLRP_tSThingMagicISO180006BLock *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicISO180006BLock_decodeFields (
  LLRP_tSThingMagicISO180006BLock *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BLock_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicISO180006BLock_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->Address =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BLock_Address);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicISO180006BLock_Address);
    }
    
}

void
LLRP_ThingMagicISO180006BLock_assimilateSubParameters (
  LLRP_tSThingMagicISO180006BLock *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicISO180006BLock_getOpSpecID (
  LLRP_tSThingMagicISO180006BLock *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BLock_setOpSpecID (
  LLRP_tSThingMagicISO180006BLock *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicISO180006BLock_getAddress (
  LLRP_tSThingMagicISO180006BLock *pThis)
{
    return pThis->Address;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BLock_setAddress (
  LLRP_tSThingMagicISO180006BLock *pThis,
  llrp_u8_t Value)
{
    pThis->Address = Value;
    return LLRP_RC_OK;
}


void
LLRP_ThingMagicISO180006BLock_encode (
  const LLRP_tSThingMagicISO180006BLock *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicISO180006BLock_OpSpecID);

    pOps->pfPut_u8(pEncoderStream,
        pThis->Address,
        &LLRP_fdThingMagicISO180006BLock_Address);

}


llrp_bool_t
LLRP_ThingMagicISO180006BLock_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicISO180006BLockOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicISO180006BLockOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicISO180006BLockOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 70,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicISO180006BLockOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicISO180006BLockOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicISO180006BLockOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicISO180006BLockOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicISO180006BLockOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicISO180006BLockOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicISO180006BLockOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicISO180006BLockOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicISO180006BLockOpSpecResult[] =
{
  
    &LLRP_fdThingMagicISO180006BLockOpSpecResult_Result,
    &LLRP_fdThingMagicISO180006BLockOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BLockOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BLockOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicISO180006BLockOpSpecResult *
LLRP_ThingMagicISO180006BLockOpSpecResult_construct (void)
{
    LLRP_tSThingMagicISO180006BLockOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicISO180006BLockOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicISO180006BLockOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicISO180006BLockOpSpecResult_destruct (
  LLRP_tSThingMagicISO180006BLockOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicISO180006BLockOpSpecResult_decodeFields (
  LLRP_tSThingMagicISO180006BLockOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BLockOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicISO180006BLockOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BLockOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicISO180006BLockOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicISO180006BLockOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicISO180006BLockOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicISO180006BLockOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicISO180006BLockOpSpecResult_getResult (
  LLRP_tSThingMagicISO180006BLockOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BLockOpSpecResult_setResult (
  LLRP_tSThingMagicISO180006BLockOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicISO180006BLockOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicISO180006BLockOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BLockOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicISO180006BLockOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicISO180006BLockOpSpecResult_beginCustom (
  LLRP_tSThingMagicISO180006BLockOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BLockOpSpecResult_addCustom (
  LLRP_tSThingMagicISO180006BLockOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicISO180006BLockOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicISO180006BLockOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicISO180006BLockOpSpecResult_encode (
  const LLRP_tSThingMagicISO180006BLockOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicISO180006BLockOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicISO180006BLockOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicISO180006BLockOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ISO18K6BCustomParameters
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdISO18K6BCustomParameters =
{
    .bIsMessage             = FALSE,
    .pName                  = "ISO18K6BCustomParameters",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 71,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdISO18K6BCustomParameters,
    .nSizeBytes             = sizeof(LLRP_tSISO18K6BCustomParameters),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ISO18K6BCustomParameters_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ISO18K6BCustomParameters_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ISO18K6BCustomParameters_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ISO18K6BCustomParameters_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ISO18K6BCustomParameters_encode,

  
    .pfIsAllowedIn          = LLRP_ISO18K6BCustomParameters_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdISO18K6BCustomParameters[] =
{
  
    NULL
};


LLRP_tSISO18K6BCustomParameters *
LLRP_ISO18K6BCustomParameters_construct (void)
{
    LLRP_tSISO18K6BCustomParameters *pNew;

    pNew = (LLRP_tSISO18K6BCustomParameters *)
        LLRP_Element_construct(&LLRP_tdISO18K6BCustomParameters);

    return pNew;
}

void
LLRP_ISO18K6BCustomParameters_destruct (
  LLRP_tSISO18K6BCustomParameters *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ISO18K6BCustomParameters_decodeFields (
  LLRP_tSISO18K6BCustomParameters *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ISO18K6BCustomParameters_assimilateSubParameters (
  LLRP_tSISO18K6BCustomParameters *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-1 of ThingMagicISO180006BDelimiter
    pType = &LLRP_tdThingMagicISO180006BDelimiter;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pThingMagicISO180006BDelimiter = (LLRP_tSThingMagicISO180006BDelimiter *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of ThingMagicISO18K6BModulationDepth
    pType = &LLRP_tdThingMagicISO18K6BModulationDepth;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pThingMagicISO18K6BModulationDepth = (LLRP_tSThingMagicISO18K6BModulationDepth *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of ThingMagicISO18K6BLinkFrequency
    pType = &LLRP_tdThingMagicISO18K6BLinkFrequency;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pThingMagicISO18K6BLinkFrequency = (LLRP_tSThingMagicISO18K6BLinkFrequency *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdISO18K6BCustomParameters))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicISO180006BDelimiter *
LLRP_ISO18K6BCustomParameters_getThingMagicISO180006BDelimiter (
  LLRP_tSISO18K6BCustomParameters *pThis)
{
    return pThis->pThingMagicISO180006BDelimiter;
}

LLRP_tResultCode
LLRP_ISO18K6BCustomParameters_setThingMagicISO180006BDelimiter (
  LLRP_tSISO18K6BCustomParameters *pThis,
  LLRP_tSThingMagicISO180006BDelimiter * pValue)
{
    SUBPARAM_SET(pThingMagicISO180006BDelimiter, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicISO18K6BModulationDepth *
LLRP_ISO18K6BCustomParameters_getThingMagicISO18K6BModulationDepth (
  LLRP_tSISO18K6BCustomParameters *pThis)
{
    return pThis->pThingMagicISO18K6BModulationDepth;
}

LLRP_tResultCode
LLRP_ISO18K6BCustomParameters_setThingMagicISO18K6BModulationDepth (
  LLRP_tSISO18K6BCustomParameters *pThis,
  LLRP_tSThingMagicISO18K6BModulationDepth * pValue)
{
    SUBPARAM_SET(pThingMagicISO18K6BModulationDepth, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicISO18K6BLinkFrequency *
LLRP_ISO18K6BCustomParameters_getThingMagicISO18K6BLinkFrequency (
  LLRP_tSISO18K6BCustomParameters *pThis)
{
    return pThis->pThingMagicISO18K6BLinkFrequency;
}

LLRP_tResultCode
LLRP_ISO18K6BCustomParameters_setThingMagicISO18K6BLinkFrequency (
  LLRP_tSISO18K6BCustomParameters *pThis,
  LLRP_tSThingMagicISO18K6BLinkFrequency * pValue)
{
    SUBPARAM_SET(pThingMagicISO18K6BLinkFrequency, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ISO18K6BCustomParameters_beginCustom (
  LLRP_tSISO18K6BCustomParameters *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ISO18K6BCustomParameters_addCustom (
  LLRP_tSISO18K6BCustomParameters *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdISO18K6BCustomParameters))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ISO18K6BCustomParameters_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ISO18K6BCustomParameters_encode (
  const LLRP_tSISO18K6BCustomParameters *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicISO180006BDelimiter;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicISO180006BDelimiter,
        pType);
      
    pType = &LLRP_tdThingMagicISO18K6BModulationDepth;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicISO18K6BModulationDepth,
        pType);
      
    pType = &LLRP_tdThingMagicISO18K6BLinkFrequency;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicISO18K6BLinkFrequency,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ISO18K6BCustomParameters_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicISO180006BDelimiter
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicISO180006BDelimiter =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicISO180006BDelimiter",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 72,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicISO180006BDelimiter,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicISO180006BDelimiter),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicISO180006BDelimiter_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicISO180006BDelimiter_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicISO180006BDelimiter_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicISO180006BDelimiter_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicISO180006BDelimiter_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicISO180006BDelimiter_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicISO180006BDelimiter[] =
{
  
    &LLRP_fdThingMagicISO180006BDelimiter_ISO18K6BDelimiter,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BDelimiter_ISO18K6BDelimiter =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ISO18K6BDelimiter",
    .pEnumTable         = LLRP_estThingMagicCustom18K6BDelimiter,
};

LLRP_tSThingMagicISO180006BDelimiter *
LLRP_ThingMagicISO180006BDelimiter_construct (void)
{
    LLRP_tSThingMagicISO180006BDelimiter *pNew;

    pNew = (LLRP_tSThingMagicISO180006BDelimiter *)
        LLRP_Element_construct(&LLRP_tdThingMagicISO180006BDelimiter);

    return pNew;
}

void
LLRP_ThingMagicISO180006BDelimiter_destruct (
  LLRP_tSThingMagicISO180006BDelimiter *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicISO180006BDelimiter_decodeFields (
  LLRP_tSThingMagicISO180006BDelimiter *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eISO18K6BDelimiter =
                (LLRP_tEThingMagicCustom18K6BDelimiter) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BDelimiter_ISO18K6BDelimiter);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicISO180006BDelimiter_ISO18K6BDelimiter);
    }

}

void
LLRP_ThingMagicISO180006BDelimiter_assimilateSubParameters (
  LLRP_tSThingMagicISO180006BDelimiter *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicISO180006BDelimiter))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustom18K6BDelimiter
LLRP_ThingMagicISO180006BDelimiter_getISO18K6BDelimiter (
  LLRP_tSThingMagicISO180006BDelimiter *pThis)
{
    return pThis->eISO18K6BDelimiter;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BDelimiter_setISO18K6BDelimiter (
  LLRP_tSThingMagicISO180006BDelimiter *pThis,
  LLRP_tEThingMagicCustom18K6BDelimiter eValue)
{
    pThis->eISO18K6BDelimiter = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicISO180006BDelimiter_beginCustom (
  LLRP_tSThingMagicISO180006BDelimiter *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BDelimiter_addCustom (
  LLRP_tSThingMagicISO180006BDelimiter *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicISO180006BDelimiter))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicISO180006BDelimiter_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicISO180006BDelimiter_encode (
  const LLRP_tSThingMagicISO180006BDelimiter *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eISO18K6BDelimiter,
        &LLRP_fdThingMagicISO180006BDelimiter_ISO18K6BDelimiter);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicISO180006BDelimiter_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicISO18K6BModulationDepth
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicISO18K6BModulationDepth =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicISO18K6BModulationDepth",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 73,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicISO18K6BModulationDepth,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicISO18K6BModulationDepth),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicISO18K6BModulationDepth_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicISO18K6BModulationDepth_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicISO18K6BModulationDepth_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicISO18K6BModulationDepth_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicISO18K6BModulationDepth_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicISO18K6BModulationDepth_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicISO18K6BModulationDepth[] =
{
  
    &LLRP_fdThingMagicISO18K6BModulationDepth_ISO18K6BModulationDepth,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO18K6BModulationDepth_ISO18K6BModulationDepth =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ISO18K6BModulationDepth",
    .pEnumTable         = LLRP_estThingMagicCustom18K6BModulationDepth,
};

LLRP_tSThingMagicISO18K6BModulationDepth *
LLRP_ThingMagicISO18K6BModulationDepth_construct (void)
{
    LLRP_tSThingMagicISO18K6BModulationDepth *pNew;

    pNew = (LLRP_tSThingMagicISO18K6BModulationDepth *)
        LLRP_Element_construct(&LLRP_tdThingMagicISO18K6BModulationDepth);

    return pNew;
}

void
LLRP_ThingMagicISO18K6BModulationDepth_destruct (
  LLRP_tSThingMagicISO18K6BModulationDepth *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicISO18K6BModulationDepth_decodeFields (
  LLRP_tSThingMagicISO18K6BModulationDepth *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eISO18K6BModulationDepth =
                (LLRP_tEThingMagicCustom18K6BModulationDepth) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicISO18K6BModulationDepth_ISO18K6BModulationDepth);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicISO18K6BModulationDepth_ISO18K6BModulationDepth);
    }

}

void
LLRP_ThingMagicISO18K6BModulationDepth_assimilateSubParameters (
  LLRP_tSThingMagicISO18K6BModulationDepth *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicISO18K6BModulationDepth))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustom18K6BModulationDepth
LLRP_ThingMagicISO18K6BModulationDepth_getISO18K6BModulationDepth (
  LLRP_tSThingMagicISO18K6BModulationDepth *pThis)
{
    return pThis->eISO18K6BModulationDepth;
}

LLRP_tResultCode
LLRP_ThingMagicISO18K6BModulationDepth_setISO18K6BModulationDepth (
  LLRP_tSThingMagicISO18K6BModulationDepth *pThis,
  LLRP_tEThingMagicCustom18K6BModulationDepth eValue)
{
    pThis->eISO18K6BModulationDepth = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicISO18K6BModulationDepth_beginCustom (
  LLRP_tSThingMagicISO18K6BModulationDepth *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicISO18K6BModulationDepth_addCustom (
  LLRP_tSThingMagicISO18K6BModulationDepth *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicISO18K6BModulationDepth))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicISO18K6BModulationDepth_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicISO18K6BModulationDepth_encode (
  const LLRP_tSThingMagicISO18K6BModulationDepth *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eISO18K6BModulationDepth,
        &LLRP_fdThingMagicISO18K6BModulationDepth_ISO18K6BModulationDepth);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicISO18K6BModulationDepth_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicISO18K6BLinkFrequency
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicISO18K6BLinkFrequency =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicISO18K6BLinkFrequency",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 74,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicISO18K6BLinkFrequency,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicISO18K6BLinkFrequency),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicISO18K6BLinkFrequency_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicISO18K6BLinkFrequency_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicISO18K6BLinkFrequency_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicISO18K6BLinkFrequency_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicISO18K6BLinkFrequency_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicISO18K6BLinkFrequency_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicISO18K6BLinkFrequency[] =
{
  
    &LLRP_fdThingMagicISO18K6BLinkFrequency_ISO18K6BLinkFrequency,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO18K6BLinkFrequency_ISO18K6BLinkFrequency =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ISO18K6BLinkFrequency",
    .pEnumTable         = LLRP_estThingMagicCustom18K6BLinkFrequency,
};

LLRP_tSThingMagicISO18K6BLinkFrequency *
LLRP_ThingMagicISO18K6BLinkFrequency_construct (void)
{
    LLRP_tSThingMagicISO18K6BLinkFrequency *pNew;

    pNew = (LLRP_tSThingMagicISO18K6BLinkFrequency *)
        LLRP_Element_construct(&LLRP_tdThingMagicISO18K6BLinkFrequency);

    return pNew;
}

void
LLRP_ThingMagicISO18K6BLinkFrequency_destruct (
  LLRP_tSThingMagicISO18K6BLinkFrequency *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicISO18K6BLinkFrequency_decodeFields (
  LLRP_tSThingMagicISO18K6BLinkFrequency *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eISO18K6BLinkFrequency =
                (LLRP_tEThingMagicCustom18K6BLinkFrequency) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicISO18K6BLinkFrequency_ISO18K6BLinkFrequency);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicISO18K6BLinkFrequency_ISO18K6BLinkFrequency);
    }

}

void
LLRP_ThingMagicISO18K6BLinkFrequency_assimilateSubParameters (
  LLRP_tSThingMagicISO18K6BLinkFrequency *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicISO18K6BLinkFrequency))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustom18K6BLinkFrequency
LLRP_ThingMagicISO18K6BLinkFrequency_getISO18K6BLinkFrequency (
  LLRP_tSThingMagicISO18K6BLinkFrequency *pThis)
{
    return pThis->eISO18K6BLinkFrequency;
}

LLRP_tResultCode
LLRP_ThingMagicISO18K6BLinkFrequency_setISO18K6BLinkFrequency (
  LLRP_tSThingMagicISO18K6BLinkFrequency *pThis,
  LLRP_tEThingMagicCustom18K6BLinkFrequency eValue)
{
    pThis->eISO18K6BLinkFrequency = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicISO18K6BLinkFrequency_beginCustom (
  LLRP_tSThingMagicISO18K6BLinkFrequency *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicISO18K6BLinkFrequency_addCustom (
  LLRP_tSThingMagicISO18K6BLinkFrequency *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicISO18K6BLinkFrequency))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicISO18K6BLinkFrequency_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicISO18K6BLinkFrequency_encode (
  const LLRP_tSThingMagicISO18K6BLinkFrequency *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eISO18K6BLinkFrequency,
        &LLRP_fdThingMagicISO18K6BLinkFrequency_ISO18K6BLinkFrequency);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicISO18K6BLinkFrequency_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicISO18K6BLLRPCapabilities
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicISO18K6BLLRPCapabilities =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicISO18K6BLLRPCapabilities",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 75,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicISO18K6BLLRPCapabilities,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicISO18K6BLLRPCapabilities),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicISO18K6BLLRPCapabilities_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicISO18K6BLLRPCapabilities_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicISO18K6BLLRPCapabilities_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicISO18K6BLLRPCapabilities_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicISO18K6BLLRPCapabilities_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicISO18K6BLLRPCapabilities_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicISO18K6BLLRPCapabilities[] =
{
  
    &LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportRead,
    &LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportWrite,
    &LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportLock,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportRead =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "CanSupportRead",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportWrite =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "CanSupportWrite",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportLock =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "CanSupportLock",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicISO18K6BLLRPCapabilities *
LLRP_ThingMagicISO18K6BLLRPCapabilities_construct (void)
{
    LLRP_tSThingMagicISO18K6BLLRPCapabilities *pNew;

    pNew = (LLRP_tSThingMagicISO18K6BLLRPCapabilities *)
        LLRP_Element_construct(&LLRP_tdThingMagicISO18K6BLLRPCapabilities);

    return pNew;
}

void
LLRP_ThingMagicISO18K6BLLRPCapabilities_destruct (
  LLRP_tSThingMagicISO18K6BLLRPCapabilities *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicISO18K6BLLRPCapabilities_decodeFields (
  LLRP_tSThingMagicISO18K6BLLRPCapabilities *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->CanSupportRead =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportRead);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportRead);
    }
    
    if(NULL != pThis)
    {
        pThis->CanSupportWrite =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportWrite);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportWrite);
    }
    
    if(NULL != pThis)
    {
        pThis->CanSupportLock =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportLock);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportLock);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 5);

}

void
LLRP_ThingMagicISO18K6BLLRPCapabilities_assimilateSubParameters (
  LLRP_tSThingMagicISO18K6BLLRPCapabilities *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicISO18K6BLLRPCapabilities))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u1_t
LLRP_ThingMagicISO18K6BLLRPCapabilities_getCanSupportRead (
  LLRP_tSThingMagicISO18K6BLLRPCapabilities *pThis)
{
    return pThis->CanSupportRead;
}

LLRP_tResultCode
LLRP_ThingMagicISO18K6BLLRPCapabilities_setCanSupportRead (
  LLRP_tSThingMagicISO18K6BLLRPCapabilities *pThis,
  llrp_u1_t Value)
{
    pThis->CanSupportRead = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicISO18K6BLLRPCapabilities_getCanSupportWrite (
  LLRP_tSThingMagicISO18K6BLLRPCapabilities *pThis)
{
    return pThis->CanSupportWrite;
}

LLRP_tResultCode
LLRP_ThingMagicISO18K6BLLRPCapabilities_setCanSupportWrite (
  LLRP_tSThingMagicISO18K6BLLRPCapabilities *pThis,
  llrp_u1_t Value)
{
    pThis->CanSupportWrite = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicISO18K6BLLRPCapabilities_getCanSupportLock (
  LLRP_tSThingMagicISO18K6BLLRPCapabilities *pThis)
{
    return pThis->CanSupportLock;
}

LLRP_tResultCode
LLRP_ThingMagicISO18K6BLLRPCapabilities_setCanSupportLock (
  LLRP_tSThingMagicISO18K6BLLRPCapabilities *pThis,
  llrp_u1_t Value)
{
    pThis->CanSupportLock = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicISO18K6BLLRPCapabilities_beginCustom (
  LLRP_tSThingMagicISO18K6BLLRPCapabilities *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicISO18K6BLLRPCapabilities_addCustom (
  LLRP_tSThingMagicISO18K6BLLRPCapabilities *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicISO18K6BLLRPCapabilities))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicISO18K6BLLRPCapabilities_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicISO18K6BLLRPCapabilities_encode (
  const LLRP_tSThingMagicISO18K6BLLRPCapabilities *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u1(pEncoderStream,
        pThis->CanSupportRead,
        &LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportRead);

    pOps->pfPut_u1(pEncoderStream,
        pThis->CanSupportWrite,
        &LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportWrite);

    pOps->pfPut_u1(pEncoderStream,
        pThis->CanSupportLock,
        &LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportLock);

    pOps->pfPut_reserved(pEncoderStream, 5);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicISO18K6BLLRPCapabilities_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAirProtocolLLRPCapabilities)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ASensorValue
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ASensorValue =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900ASensorValue",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 76,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900ASensorValue,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900ASensorValue),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ASensorValue_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ASensorValue_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ASensorValue_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ASensorValue_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ASensorValue_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900ASensorValue_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ASensorValue[] =
{
  
    &LLRP_fdThingMagicIDSSL900ASensorValue_SensorType,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASensorValue_SensorType =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "SensorType",
    .pEnumTable         = LLRP_estThingMagicCustomIDSSensorType,
};

LLRP_tSThingMagicIDSSL900ASensorValue *
LLRP_ThingMagicIDSSL900ASensorValue_construct (void)
{
    LLRP_tSThingMagicIDSSL900ASensorValue *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ASensorValue *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ASensorValue);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ASensorValue_destruct (
  LLRP_tSThingMagicIDSSL900ASensorValue *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ASensorValue_decodeFields (
  LLRP_tSThingMagicIDSSL900ASensorValue *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eSensorType =
                (LLRP_tEThingMagicCustomIDSSensorType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASensorValue_SensorType);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASensorValue_SensorType);
    }

}

void
LLRP_ThingMagicIDSSL900ASensorValue_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ASensorValue *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ASensorValue))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomIDSSensorType
LLRP_ThingMagicIDSSL900ASensorValue_getSensorType (
  LLRP_tSThingMagicIDSSL900ASensorValue *pThis)
{
    return pThis->eSensorType;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASensorValue_setSensorType (
  LLRP_tSThingMagicIDSSL900ASensorValue *pThis,
  LLRP_tEThingMagicCustomIDSSensorType eValue)
{
    pThis->eSensorType = eValue;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900ASensorValue_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900ASensorValue *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASensorValue_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900ASensorValue *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASensorValue_beginCustom (
  LLRP_tSThingMagicIDSSL900ASensorValue *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASensorValue_addCustom (
  LLRP_tSThingMagicIDSSL900ASensorValue *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ASensorValue))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASensorValue_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ASensorValue_encode (
  const LLRP_tSThingMagicIDSSL900ASensorValue *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eSensorType,
        &LLRP_fdThingMagicIDSSL900ASensorValue_SensorType);

    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ASensorValue_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ACommandRequest
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ACommandRequest =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900ACommandRequest",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 200,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900ACommandRequest,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900ACommandRequest),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ACommandRequest_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ACommandRequest_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ACommandRequest_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ACommandRequest_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ACommandRequest_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900ACommandRequest_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ACommandRequest[] =
{
  
    &LLRP_fdThingMagicIDSSL900ACommandRequest_OpSpecID,
    &LLRP_fdThingMagicIDSSL900ACommandRequest_AccessPassword,
    &LLRP_fdThingMagicIDSSL900ACommandRequest_PasswordLevel,
    &LLRP_fdThingMagicIDSSL900ACommandRequest_CommandCode,
    &LLRP_fdThingMagicIDSSL900ACommandRequest_IDSPassword,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ACommandRequest_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ACommandRequest_AccessPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AccessPassword",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ACommandRequest_PasswordLevel =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "PasswordLevel",
    .pEnumTable         = LLRP_estThingMagicCustomIDSPasswordLevel,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ACommandRequest_CommandCode =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "CommandCode",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ACommandRequest_IDSPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "IDSPassword",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900ACommandRequest_construct (void)
{
    LLRP_tSThingMagicIDSSL900ACommandRequest *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ACommandRequest *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ACommandRequest);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ACommandRequest_destruct (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ACommandRequest_decodeFields (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ACommandRequest_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ACommandRequest_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ACommandRequest_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ACommandRequest_AccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->ePasswordLevel =
                (LLRP_tEThingMagicCustomIDSPasswordLevel) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ACommandRequest_PasswordLevel);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ACommandRequest_PasswordLevel);
    }

    if(NULL != pThis)
    {
        pThis->CommandCode =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ACommandRequest_CommandCode);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ACommandRequest_CommandCode);
    }
    
    if(NULL != pThis)
    {
        pThis->IDSPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ACommandRequest_IDSPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ACommandRequest_IDSPassword);
    }
    
}

void
LLRP_ThingMagicIDSSL900ACommandRequest_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ACommandRequest))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicIDSSL900ACommandRequest_getOpSpecID (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ACommandRequest_setOpSpecID (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicIDSSL900ACommandRequest_getAccessPassword (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ACommandRequest_setAccessPassword (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tEThingMagicCustomIDSPasswordLevel
LLRP_ThingMagicIDSSL900ACommandRequest_getPasswordLevel (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis)
{
    return pThis->ePasswordLevel;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ACommandRequest_setPasswordLevel (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis,
  LLRP_tEThingMagicCustomIDSPasswordLevel eValue)
{
    pThis->ePasswordLevel = eValue;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSL900ACommandRequest_getCommandCode (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis)
{
    return pThis->CommandCode;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ACommandRequest_setCommandCode (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis,
  llrp_u8_t Value)
{
    pThis->CommandCode = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicIDSSL900ACommandRequest_getIDSPassword (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis)
{
    return pThis->IDSPassword;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ACommandRequest_setIDSPassword (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis,
  llrp_u32_t Value)
{
    pThis->IDSPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ACommandRequest_beginCustom (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ACommandRequest_addCustom (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ACommandRequest))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ACommandRequest_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ACommandRequest_encode (
  const LLRP_tSThingMagicIDSSL900ACommandRequest *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900ACommandRequest_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicIDSSL900ACommandRequest_AccessPassword);

    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->ePasswordLevel,
        &LLRP_fdThingMagicIDSSL900ACommandRequest_PasswordLevel);

    pOps->pfPut_u8(pEncoderStream,
        pThis->CommandCode,
        &LLRP_fdThingMagicIDSSL900ACommandRequest_CommandCode);

    pOps->pfPut_u32(pEncoderStream,
        pThis->IDSPassword,
        &LLRP_fdThingMagicIDSSL900ACommandRequest_IDSPassword);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ACommandRequest_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ASensorValueOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ASensorValueOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900ASensorValueOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 77,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900ASensorValueOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ASensorValueOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_reply,
    &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_raw,
    &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_ADError,
    &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_RangeLimit,
    &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_SensorValue,
    &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_SensorValueByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_reply =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "reply",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_raw =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "raw",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_ADError =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ADError",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_RangeLimit =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "RangeLimit",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_SensorValue =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "SensorValue",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_SensorValueByteStream =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "SensorValueByteStream",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ASensorValueOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->SensorValueByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->reply =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_reply);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_reply);
    }
    
    if(NULL != pThis)
    {
        pThis->raw =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_raw);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_raw);
    }
    
    if(NULL != pThis)
    {
        pThis->ADError =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_ADError);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_ADError);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

    if(NULL != pThis)
    {
        pThis->RangeLimit =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_RangeLimit);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_RangeLimit);
    }
    
    if(NULL != pThis)
    {
        pThis->SensorValue =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_SensorValue);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_SensorValue);
    }
    
    if(NULL != pThis)
    {
        pThis->SensorValueByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_SensorValueByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_SensorValueByteStream);
    }
    
}

void
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ASensorValueOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_getreply (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis)
{
    return pThis->reply;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_setreply (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->reply = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_getraw (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis)
{
    return pThis->raw;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_setraw (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->raw = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_getADError (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis)
{
    return pThis->ADError;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_setADError (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis,
  llrp_u1_t Value)
{
    pThis->ADError = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_getRangeLimit (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis)
{
    return pThis->RangeLimit;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_setRangeLimit (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis,
  llrp_u8_t Value)
{
    pThis->RangeLimit = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_getSensorValue (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis)
{
    return pThis->SensorValue;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_setSensorValue (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->SensorValue = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_getSensorValueByteStream (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis)
{
    return pThis->SensorValueByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_setSensorValueByteStream (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->SensorValueByteStream);

    pThis->SensorValueByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ASensorValueOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_OpSpecID);

    pOps->pfPut_u16(pEncoderStream,
        pThis->reply,
        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_reply);

    pOps->pfPut_u16(pEncoderStream,
        pThis->raw,
        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_raw);

    pOps->pfPut_u1(pEncoderStream,
        pThis->ADError,
        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_ADError);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pOps->pfPut_u8(pEncoderStream,
        pThis->RangeLimit,
        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_RangeLimit);

    pOps->pfPut_u16(pEncoderStream,
        pThis->SensorValue,
        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_SensorValue);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->SensorValueByteStream,
        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_SensorValueByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AGetLogState
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AGetLogState =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900AGetLogState",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 78,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900AGetLogState,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900AGetLogState),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AGetLogState_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AGetLogState_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AGetLogState_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AGetLogState_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AGetLogState_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900AGetLogState_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AGetLogState[] =
{
  
    NULL
};


LLRP_tSThingMagicIDSSL900AGetLogState *
LLRP_ThingMagicIDSSL900AGetLogState_construct (void)
{
    LLRP_tSThingMagicIDSSL900AGetLogState *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AGetLogState *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AGetLogState);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AGetLogState_destruct (
  LLRP_tSThingMagicIDSSL900AGetLogState *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AGetLogState_decodeFields (
  LLRP_tSThingMagicIDSSL900AGetLogState *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicIDSSL900AGetLogState_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AGetLogState *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AGetLogState))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900AGetLogState_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AGetLogState *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetLogState_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AGetLogState *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetLogState_beginCustom (
  LLRP_tSThingMagicIDSSL900AGetLogState *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetLogState_addCustom (
  LLRP_tSThingMagicIDSSL900AGetLogState *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AGetLogState))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetLogState_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AGetLogState_encode (
  const LLRP_tSThingMagicIDSSL900AGetLogState *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AGetLogState_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ALogStateOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ALogStateOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900ALogStateOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 79,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900ALogStateOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ALogStateOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_LogStateByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_LogStateByteStream =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "LogStateByteStream",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ALogStateOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->LogStateByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->LogStateByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_LogStateByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_LogStateByteStream);
    }
    
}

void
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSLogState
    pType = &LLRP_tdThingMagicIDSLogState;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSLogState = (LLRP_tSThingMagicIDSLogState *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ALogStateOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_getLogStateByteStream (
  LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis)
{
    return pThis->LogStateByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_setLogStateByteStream (
  LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->LogStateByteStream);

    pThis->LogStateByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSLogState *
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_getThingMagicIDSLogState (
  LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis)
{
    return pThis->pThingMagicIDSLogState;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_setThingMagicIDSLogState (
  LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis,
  LLRP_tSThingMagicIDSLogState * pValue)
{
    SUBPARAM_SET(pThingMagicIDSLogState, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ALogStateOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->LogStateByteStream,
        &LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_LogStateByteStream);

    pType = &LLRP_tdThingMagicIDSLogState;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSLogState,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSLogState
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSLogState =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSLogState",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 80,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSLogState,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSLogState),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSLogState_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSLogState_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSLogState_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSLogState_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSLogState_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSLogState_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSLogState[] =
{
  
    NULL
};


LLRP_tSThingMagicIDSLogState *
LLRP_ThingMagicIDSLogState_construct (void)
{
    LLRP_tSThingMagicIDSLogState *pNew;

    pNew = (LLRP_tSThingMagicIDSLogState *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSLogState);

    return pNew;
}

void
LLRP_ThingMagicIDSLogState_destruct (
  LLRP_tSThingMagicIDSLogState *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSLogState_decodeFields (
  LLRP_tSThingMagicIDSLogState *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicIDSLogState_assimilateSubParameters (
  LLRP_tSThingMagicIDSLogState *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSLogStateLimitCounter
    pType = &LLRP_tdThingMagicIDSLogStateLimitCounter;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSLogStateLimitCounter = (LLRP_tSThingMagicIDSLogStateLimitCounter *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicIDSLogStateSystemStatus
    pType = &LLRP_tdThingMagicIDSLogStateSystemStatus;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSLogStateSystemStatus = (LLRP_tSThingMagicIDSLogStateSystemStatus *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicIDSLogStateStatusFlag
    pType = &LLRP_tdThingMagicIDSLogStateStatusFlag;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSLogStateStatusFlag = (LLRP_tSThingMagicIDSLogStateStatusFlag *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-1 of ThingMagicIDSSLBlock0
    pType = &LLRP_tdThingMagicIDSSLBlock0;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pThingMagicIDSSLBlock0 = (LLRP_tSThingMagicIDSSLBlock0 *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of ThingMagicIDSSLBlock1
    pType = &LLRP_tdThingMagicIDSSLBlock1;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pThingMagicIDSSLBlock1 = (LLRP_tSThingMagicIDSSLBlock1 *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSLogState))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicIDSLogStateLimitCounter *
LLRP_ThingMagicIDSLogState_getThingMagicIDSLogStateLimitCounter (
  LLRP_tSThingMagicIDSLogState *pThis)
{
    return pThis->pThingMagicIDSLogStateLimitCounter;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogState_setThingMagicIDSLogStateLimitCounter (
  LLRP_tSThingMagicIDSLogState *pThis,
  LLRP_tSThingMagicIDSLogStateLimitCounter * pValue)
{
    SUBPARAM_SET(pThingMagicIDSLogStateLimitCounter, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSLogStateSystemStatus *
LLRP_ThingMagicIDSLogState_getThingMagicIDSLogStateSystemStatus (
  LLRP_tSThingMagicIDSLogState *pThis)
{
    return pThis->pThingMagicIDSLogStateSystemStatus;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogState_setThingMagicIDSLogStateSystemStatus (
  LLRP_tSThingMagicIDSLogState *pThis,
  LLRP_tSThingMagicIDSLogStateSystemStatus * pValue)
{
    SUBPARAM_SET(pThingMagicIDSLogStateSystemStatus, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSLogStateStatusFlag *
LLRP_ThingMagicIDSLogState_getThingMagicIDSLogStateStatusFlag (
  LLRP_tSThingMagicIDSLogState *pThis)
{
    return pThis->pThingMagicIDSLogStateStatusFlag;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogState_setThingMagicIDSLogStateStatusFlag (
  LLRP_tSThingMagicIDSLogState *pThis,
  LLRP_tSThingMagicIDSLogStateStatusFlag * pValue)
{
    SUBPARAM_SET(pThingMagicIDSLogStateStatusFlag, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSSLBlock0 *
LLRP_ThingMagicIDSLogState_getThingMagicIDSSLBlock0 (
  LLRP_tSThingMagicIDSLogState *pThis)
{
    return pThis->pThingMagicIDSSLBlock0;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogState_setThingMagicIDSSLBlock0 (
  LLRP_tSThingMagicIDSLogState *pThis,
  LLRP_tSThingMagicIDSSLBlock0 * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSLBlock0, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSSLBlock1 *
LLRP_ThingMagicIDSLogState_getThingMagicIDSSLBlock1 (
  LLRP_tSThingMagicIDSLogState *pThis)
{
    return pThis->pThingMagicIDSSLBlock1;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogState_setThingMagicIDSSLBlock1 (
  LLRP_tSThingMagicIDSLogState *pThis,
  LLRP_tSThingMagicIDSSLBlock1 * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSLBlock1, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSLogState_beginCustom (
  LLRP_tSThingMagicIDSLogState *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogState_addCustom (
  LLRP_tSThingMagicIDSLogState *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSLogState))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSLogState_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSLogState_encode (
  const LLRP_tSThingMagicIDSLogState *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicIDSLogStateLimitCounter;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSLogStateLimitCounter,
        pType);
      
    pType = &LLRP_tdThingMagicIDSLogStateSystemStatus;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSLogStateSystemStatus,
        pType);
      
    pType = &LLRP_tdThingMagicIDSLogStateStatusFlag;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSLogStateStatusFlag,
        pType);
      
    pType = &LLRP_tdThingMagicIDSSLBlock0;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSLBlock0,
        pType);
      
    pType = &LLRP_tdThingMagicIDSSLBlock1;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSLBlock1,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSLogState_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSLogStateLimitCounter
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSLogStateLimitCounter =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSLogStateLimitCounter",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 81,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSLogStateLimitCounter,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSLogStateLimitCounter),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSLogStateLimitCounter_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSLogStateLimitCounter_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSLogStateLimitCounter_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSLogStateLimitCounter_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSLogStateLimitCounter_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSLogStateLimitCounter_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSLogStateLimitCounter[] =
{
  
    &LLRP_fdThingMagicIDSLogStateLimitCounter_extremeLower,
    &LLRP_fdThingMagicIDSLogStateLimitCounter_lower,
    &LLRP_fdThingMagicIDSLogStateLimitCounter_upper,
    &LLRP_fdThingMagicIDSLogStateLimitCounter_extremeUpper,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateLimitCounter_extremeLower =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "extremeLower",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateLimitCounter_lower =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "lower",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateLimitCounter_upper =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "upper",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateLimitCounter_extremeUpper =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "extremeUpper",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSLogStateLimitCounter *
LLRP_ThingMagicIDSLogStateLimitCounter_construct (void)
{
    LLRP_tSThingMagicIDSLogStateLimitCounter *pNew;

    pNew = (LLRP_tSThingMagicIDSLogStateLimitCounter *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSLogStateLimitCounter);

    return pNew;
}

void
LLRP_ThingMagicIDSLogStateLimitCounter_destruct (
  LLRP_tSThingMagicIDSLogStateLimitCounter *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSLogStateLimitCounter_decodeFields (
  LLRP_tSThingMagicIDSLogStateLimitCounter *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->extremeLower =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateLimitCounter_extremeLower);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateLimitCounter_extremeLower);
    }
    
    if(NULL != pThis)
    {
        pThis->lower =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateLimitCounter_lower);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateLimitCounter_lower);
    }
    
    if(NULL != pThis)
    {
        pThis->upper =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateLimitCounter_upper);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateLimitCounter_upper);
    }
    
    if(NULL != pThis)
    {
        pThis->extremeUpper =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateLimitCounter_extremeUpper);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateLimitCounter_extremeUpper);
    }
    
}

void
LLRP_ThingMagicIDSLogStateLimitCounter_assimilateSubParameters (
  LLRP_tSThingMagicIDSLogStateLimitCounter *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSLogStateLimitCounter))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8_t
LLRP_ThingMagicIDSLogStateLimitCounter_getextremeLower (
  LLRP_tSThingMagicIDSLogStateLimitCounter *pThis)
{
    return pThis->extremeLower;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateLimitCounter_setextremeLower (
  LLRP_tSThingMagicIDSLogStateLimitCounter *pThis,
  llrp_u8_t Value)
{
    pThis->extremeLower = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSLogStateLimitCounter_getlower (
  LLRP_tSThingMagicIDSLogStateLimitCounter *pThis)
{
    return pThis->lower;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateLimitCounter_setlower (
  LLRP_tSThingMagicIDSLogStateLimitCounter *pThis,
  llrp_u8_t Value)
{
    pThis->lower = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSLogStateLimitCounter_getupper (
  LLRP_tSThingMagicIDSLogStateLimitCounter *pThis)
{
    return pThis->upper;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateLimitCounter_setupper (
  LLRP_tSThingMagicIDSLogStateLimitCounter *pThis,
  llrp_u8_t Value)
{
    pThis->upper = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSLogStateLimitCounter_getextremeUpper (
  LLRP_tSThingMagicIDSLogStateLimitCounter *pThis)
{
    return pThis->extremeUpper;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateLimitCounter_setextremeUpper (
  LLRP_tSThingMagicIDSLogStateLimitCounter *pThis,
  llrp_u8_t Value)
{
    pThis->extremeUpper = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSLogStateLimitCounter_beginCustom (
  LLRP_tSThingMagicIDSLogStateLimitCounter *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateLimitCounter_addCustom (
  LLRP_tSThingMagicIDSLogStateLimitCounter *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSLogStateLimitCounter))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSLogStateLimitCounter_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSLogStateLimitCounter_encode (
  const LLRP_tSThingMagicIDSLogStateLimitCounter *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8(pEncoderStream,
        pThis->extremeLower,
        &LLRP_fdThingMagicIDSLogStateLimitCounter_extremeLower);

    pOps->pfPut_u8(pEncoderStream,
        pThis->lower,
        &LLRP_fdThingMagicIDSLogStateLimitCounter_lower);

    pOps->pfPut_u8(pEncoderStream,
        pThis->upper,
        &LLRP_fdThingMagicIDSLogStateLimitCounter_upper);

    pOps->pfPut_u8(pEncoderStream,
        pThis->extremeUpper,
        &LLRP_fdThingMagicIDSLogStateLimitCounter_extremeUpper);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSLogStateLimitCounter_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSLogStateSystemStatus
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSLogStateSystemStatus =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSLogStateSystemStatus",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 82,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSLogStateSystemStatus,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSLogStateSystemStatus),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSLogStateSystemStatus_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSLogStateSystemStatus_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSLogStateSystemStatus_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSLogStateSystemStatus_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSLogStateSystemStatus_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSLogStateSystemStatus_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSLogStateSystemStatus[] =
{
  
    &LLRP_fdThingMagicIDSLogStateSystemStatus_MeasurementAddressPointer,
    &LLRP_fdThingMagicIDSLogStateSystemStatus_NumMemReplacements,
    &LLRP_fdThingMagicIDSLogStateSystemStatus_NumMeasurements,
    &LLRP_fdThingMagicIDSLogStateSystemStatus_Active,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateSystemStatus_MeasurementAddressPointer =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "MeasurementAddressPointer",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateSystemStatus_NumMemReplacements =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "NumMemReplacements",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateSystemStatus_NumMeasurements =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "NumMeasurements",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateSystemStatus_Active =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Active",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSLogStateSystemStatus *
LLRP_ThingMagicIDSLogStateSystemStatus_construct (void)
{
    LLRP_tSThingMagicIDSLogStateSystemStatus *pNew;

    pNew = (LLRP_tSThingMagicIDSLogStateSystemStatus *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSLogStateSystemStatus);

    return pNew;
}

void
LLRP_ThingMagicIDSLogStateSystemStatus_destruct (
  LLRP_tSThingMagicIDSLogStateSystemStatus *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSLogStateSystemStatus_decodeFields (
  LLRP_tSThingMagicIDSLogStateSystemStatus *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->MeasurementAddressPointer =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateSystemStatus_MeasurementAddressPointer);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateSystemStatus_MeasurementAddressPointer);
    }
    
    if(NULL != pThis)
    {
        pThis->NumMemReplacements =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateSystemStatus_NumMemReplacements);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateSystemStatus_NumMemReplacements);
    }
    
    if(NULL != pThis)
    {
        pThis->NumMeasurements =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateSystemStatus_NumMeasurements);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateSystemStatus_NumMeasurements);
    }
    
    if(NULL != pThis)
    {
        pThis->Active =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateSystemStatus_Active);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateSystemStatus_Active);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

}

void
LLRP_ThingMagicIDSLogStateSystemStatus_assimilateSubParameters (
  LLRP_tSThingMagicIDSLogStateSystemStatus *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSLogStateSystemStatus))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicIDSLogStateSystemStatus_getMeasurementAddressPointer (
  LLRP_tSThingMagicIDSLogStateSystemStatus *pThis)
{
    return pThis->MeasurementAddressPointer;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateSystemStatus_setMeasurementAddressPointer (
  LLRP_tSThingMagicIDSLogStateSystemStatus *pThis,
  llrp_u16_t Value)
{
    pThis->MeasurementAddressPointer = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSLogStateSystemStatus_getNumMemReplacements (
  LLRP_tSThingMagicIDSLogStateSystemStatus *pThis)
{
    return pThis->NumMemReplacements;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateSystemStatus_setNumMemReplacements (
  LLRP_tSThingMagicIDSLogStateSystemStatus *pThis,
  llrp_u8_t Value)
{
    pThis->NumMemReplacements = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSLogStateSystemStatus_getNumMeasurements (
  LLRP_tSThingMagicIDSLogStateSystemStatus *pThis)
{
    return pThis->NumMeasurements;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateSystemStatus_setNumMeasurements (
  LLRP_tSThingMagicIDSLogStateSystemStatus *pThis,
  llrp_u16_t Value)
{
    pThis->NumMeasurements = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSLogStateSystemStatus_getActive (
  LLRP_tSThingMagicIDSLogStateSystemStatus *pThis)
{
    return pThis->Active;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateSystemStatus_setActive (
  LLRP_tSThingMagicIDSLogStateSystemStatus *pThis,
  llrp_u1_t Value)
{
    pThis->Active = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSLogStateSystemStatus_beginCustom (
  LLRP_tSThingMagicIDSLogStateSystemStatus *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateSystemStatus_addCustom (
  LLRP_tSThingMagicIDSLogStateSystemStatus *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSLogStateSystemStatus))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSLogStateSystemStatus_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSLogStateSystemStatus_encode (
  const LLRP_tSThingMagicIDSLogStateSystemStatus *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->MeasurementAddressPointer,
        &LLRP_fdThingMagicIDSLogStateSystemStatus_MeasurementAddressPointer);

    pOps->pfPut_u8(pEncoderStream,
        pThis->NumMemReplacements,
        &LLRP_fdThingMagicIDSLogStateSystemStatus_NumMemReplacements);

    pOps->pfPut_u16(pEncoderStream,
        pThis->NumMeasurements,
        &LLRP_fdThingMagicIDSLogStateSystemStatus_NumMeasurements);

    pOps->pfPut_u1(pEncoderStream,
        pThis->Active,
        &LLRP_fdThingMagicIDSLogStateSystemStatus_Active);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSLogStateSystemStatus_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSLogStateStatusFlag
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSLogStateStatusFlag =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSLogStateStatusFlag",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 83,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSLogStateStatusFlag,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSLogStateStatusFlag),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSLogStateStatusFlag_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSLogStateStatusFlag_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSLogStateStatusFlag_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSLogStateStatusFlag_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSLogStateStatusFlag_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSLogStateStatusFlag_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSLogStateStatusFlag[] =
{
  
    &LLRP_fdThingMagicIDSLogStateStatusFlag_Active,
    &LLRP_fdThingMagicIDSLogStateStatusFlag_Full,
    &LLRP_fdThingMagicIDSLogStateStatusFlag_Overwritten,
    &LLRP_fdThingMagicIDSLogStateStatusFlag_ADError,
    &LLRP_fdThingMagicIDSLogStateStatusFlag_LowBattery,
    &LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeLow,
    &LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeHigh,
    &LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeExpired,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateStatusFlag_Active =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Active",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateStatusFlag_Full =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Full",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateStatusFlag_Overwritten =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Overwritten",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateStatusFlag_ADError =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ADError",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateStatusFlag_LowBattery =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "LowBattery",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeLow =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ShelfLifeLow",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeHigh =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ShelfLifeHigh",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeExpired =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ShelfLifeExpired",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSLogStateStatusFlag *
LLRP_ThingMagicIDSLogStateStatusFlag_construct (void)
{
    LLRP_tSThingMagicIDSLogStateStatusFlag *pNew;

    pNew = (LLRP_tSThingMagicIDSLogStateStatusFlag *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSLogStateStatusFlag);

    return pNew;
}

void
LLRP_ThingMagicIDSLogStateStatusFlag_destruct (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSLogStateStatusFlag_decodeFields (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->Active =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateStatusFlag_Active);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateStatusFlag_Active);
    }
    
    if(NULL != pThis)
    {
        pThis->Full =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateStatusFlag_Full);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateStatusFlag_Full);
    }
    
    if(NULL != pThis)
    {
        pThis->Overwritten =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateStatusFlag_Overwritten);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateStatusFlag_Overwritten);
    }
    
    if(NULL != pThis)
    {
        pThis->ADError =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateStatusFlag_ADError);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateStatusFlag_ADError);
    }
    
    if(NULL != pThis)
    {
        pThis->LowBattery =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateStatusFlag_LowBattery);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateStatusFlag_LowBattery);
    }
    
    if(NULL != pThis)
    {
        pThis->ShelfLifeLow =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeLow);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeLow);
    }
    
    if(NULL != pThis)
    {
        pThis->ShelfLifeHigh =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeHigh);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeHigh);
    }
    
    if(NULL != pThis)
    {
        pThis->ShelfLifeExpired =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeExpired);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeExpired);
    }
    
}

void
LLRP_ThingMagicIDSLogStateStatusFlag_assimilateSubParameters (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSLogStateStatusFlag))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u1_t
LLRP_ThingMagicIDSLogStateStatusFlag_getActive (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis)
{
    return pThis->Active;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateStatusFlag_setActive (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis,
  llrp_u1_t Value)
{
    pThis->Active = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSLogStateStatusFlag_getFull (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis)
{
    return pThis->Full;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateStatusFlag_setFull (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis,
  llrp_u1_t Value)
{
    pThis->Full = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSLogStateStatusFlag_getOverwritten (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis)
{
    return pThis->Overwritten;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateStatusFlag_setOverwritten (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis,
  llrp_u1_t Value)
{
    pThis->Overwritten = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSLogStateStatusFlag_getADError (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis)
{
    return pThis->ADError;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateStatusFlag_setADError (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis,
  llrp_u1_t Value)
{
    pThis->ADError = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSLogStateStatusFlag_getLowBattery (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis)
{
    return pThis->LowBattery;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateStatusFlag_setLowBattery (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis,
  llrp_u1_t Value)
{
    pThis->LowBattery = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSLogStateStatusFlag_getShelfLifeLow (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis)
{
    return pThis->ShelfLifeLow;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateStatusFlag_setShelfLifeLow (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis,
  llrp_u1_t Value)
{
    pThis->ShelfLifeLow = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSLogStateStatusFlag_getShelfLifeHigh (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis)
{
    return pThis->ShelfLifeHigh;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateStatusFlag_setShelfLifeHigh (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis,
  llrp_u1_t Value)
{
    pThis->ShelfLifeHigh = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSLogStateStatusFlag_getShelfLifeExpired (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis)
{
    return pThis->ShelfLifeExpired;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateStatusFlag_setShelfLifeExpired (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis,
  llrp_u1_t Value)
{
    pThis->ShelfLifeExpired = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSLogStateStatusFlag_beginCustom (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateStatusFlag_addCustom (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSLogStateStatusFlag))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSLogStateStatusFlag_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSLogStateStatusFlag_encode (
  const LLRP_tSThingMagicIDSLogStateStatusFlag *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u1(pEncoderStream,
        pThis->Active,
        &LLRP_fdThingMagicIDSLogStateStatusFlag_Active);

    pOps->pfPut_u1(pEncoderStream,
        pThis->Full,
        &LLRP_fdThingMagicIDSLogStateStatusFlag_Full);

    pOps->pfPut_u1(pEncoderStream,
        pThis->Overwritten,
        &LLRP_fdThingMagicIDSLogStateStatusFlag_Overwritten);

    pOps->pfPut_u1(pEncoderStream,
        pThis->ADError,
        &LLRP_fdThingMagicIDSLogStateStatusFlag_ADError);

    pOps->pfPut_u1(pEncoderStream,
        pThis->LowBattery,
        &LLRP_fdThingMagicIDSLogStateStatusFlag_LowBattery);

    pOps->pfPut_u1(pEncoderStream,
        pThis->ShelfLifeLow,
        &LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeLow);

    pOps->pfPut_u1(pEncoderStream,
        pThis->ShelfLifeHigh,
        &LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeHigh);

    pOps->pfPut_u1(pEncoderStream,
        pThis->ShelfLifeExpired,
        &LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeExpired);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSLogStateStatusFlag_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ASetLogMode
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ASetLogMode =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900ASetLogMode",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 84,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900ASetLogMode,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900ASetLogMode),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ASetLogMode_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ASetLogMode_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ASetLogMode_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ASetLogMode_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ASetLogMode_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900ASetLogMode_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ASetLogMode[] =
{
  
    &LLRP_fdThingMagicIDSSL900ASetLogMode_LoggingForm,
    &LLRP_fdThingMagicIDSSL900ASetLogMode_StorageRule,
    &LLRP_fdThingMagicIDSSL900ASetLogMode_Ext1Enable,
    &LLRP_fdThingMagicIDSSL900ASetLogMode_Ext2Enable,
    &LLRP_fdThingMagicIDSSL900ASetLogMode_TempEnable,
    &LLRP_fdThingMagicIDSSL900ASetLogMode_BattEnable,
    &LLRP_fdThingMagicIDSSL900ASetLogMode_LogInterval,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetLogMode_LoggingForm =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "LoggingForm",
    .pEnumTable         = LLRP_estThingMagicCustomIDSLoggingForm,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetLogMode_StorageRule =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "StorageRule",
    .pEnumTable         = LLRP_estThingMagicCustomIDSStorageRule,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetLogMode_Ext1Enable =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Ext1Enable",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetLogMode_Ext2Enable =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Ext2Enable",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetLogMode_TempEnable =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "TempEnable",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetLogMode_BattEnable =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "BattEnable",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetLogMode_LogInterval =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "LogInterval",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSSL900ASetLogMode *
LLRP_ThingMagicIDSSL900ASetLogMode_construct (void)
{
    LLRP_tSThingMagicIDSSL900ASetLogMode *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ASetLogMode *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ASetLogMode);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ASetLogMode_destruct (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ASetLogMode_decodeFields (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eLoggingForm =
                (LLRP_tEThingMagicCustomIDSLoggingForm) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetLogMode_LoggingForm);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetLogMode_LoggingForm);
    }

    if(NULL != pThis)
    {
        pThis->eStorageRule =
                (LLRP_tEThingMagicCustomIDSStorageRule) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetLogMode_StorageRule);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetLogMode_StorageRule);
    }

    if(NULL != pThis)
    {
        pThis->Ext1Enable =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetLogMode_Ext1Enable);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetLogMode_Ext1Enable);
    }
    
    if(NULL != pThis)
    {
        pThis->Ext2Enable =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetLogMode_Ext2Enable);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetLogMode_Ext2Enable);
    }
    
    if(NULL != pThis)
    {
        pThis->TempEnable =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetLogMode_TempEnable);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetLogMode_TempEnable);
    }
    
    if(NULL != pThis)
    {
        pThis->BattEnable =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetLogMode_BattEnable);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetLogMode_BattEnable);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 4);

    if(NULL != pThis)
    {
        pThis->LogInterval =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetLogMode_LogInterval);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetLogMode_LogInterval);
    }
    
}

void
LLRP_ThingMagicIDSSL900ASetLogMode_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ASetLogMode))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomIDSLoggingForm
LLRP_ThingMagicIDSSL900ASetLogMode_getLoggingForm (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis)
{
    return pThis->eLoggingForm;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogMode_setLoggingForm (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis,
  LLRP_tEThingMagicCustomIDSLoggingForm eValue)
{
    pThis->eLoggingForm = eValue;
    return LLRP_RC_OK;
}


LLRP_tEThingMagicCustomIDSStorageRule
LLRP_ThingMagicIDSSL900ASetLogMode_getStorageRule (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis)
{
    return pThis->eStorageRule;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogMode_setStorageRule (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis,
  LLRP_tEThingMagicCustomIDSStorageRule eValue)
{
    pThis->eStorageRule = eValue;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSSL900ASetLogMode_getExt1Enable (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis)
{
    return pThis->Ext1Enable;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogMode_setExt1Enable (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis,
  llrp_u1_t Value)
{
    pThis->Ext1Enable = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSSL900ASetLogMode_getExt2Enable (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis)
{
    return pThis->Ext2Enable;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogMode_setExt2Enable (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis,
  llrp_u1_t Value)
{
    pThis->Ext2Enable = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSSL900ASetLogMode_getTempEnable (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis)
{
    return pThis->TempEnable;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogMode_setTempEnable (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis,
  llrp_u1_t Value)
{
    pThis->TempEnable = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSSL900ASetLogMode_getBattEnable (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis)
{
    return pThis->BattEnable;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogMode_setBattEnable (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis,
  llrp_u1_t Value)
{
    pThis->BattEnable = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900ASetLogMode_getLogInterval (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis)
{
    return pThis->LogInterval;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogMode_setLogInterval (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis,
  llrp_u16_t Value)
{
    pThis->LogInterval = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900ASetLogMode_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogMode_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetLogMode_beginCustom (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogMode_addCustom (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ASetLogMode))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetLogMode_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ASetLogMode_encode (
  const LLRP_tSThingMagicIDSSL900ASetLogMode *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eLoggingForm,
        &LLRP_fdThingMagicIDSSL900ASetLogMode_LoggingForm);

    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eStorageRule,
        &LLRP_fdThingMagicIDSSL900ASetLogMode_StorageRule);

    pOps->pfPut_u1(pEncoderStream,
        pThis->Ext1Enable,
        &LLRP_fdThingMagicIDSSL900ASetLogMode_Ext1Enable);

    pOps->pfPut_u1(pEncoderStream,
        pThis->Ext2Enable,
        &LLRP_fdThingMagicIDSSL900ASetLogMode_Ext2Enable);

    pOps->pfPut_u1(pEncoderStream,
        pThis->TempEnable,
        &LLRP_fdThingMagicIDSSL900ASetLogMode_TempEnable);

    pOps->pfPut_u1(pEncoderStream,
        pThis->BattEnable,
        &LLRP_fdThingMagicIDSSL900ASetLogMode_BattEnable);

    pOps->pfPut_reserved(pEncoderStream, 4);

    pOps->pfPut_u16(pEncoderStream,
        pThis->LogInterval,
        &LLRP_fdThingMagicIDSSL900ASetLogMode_LogInterval);

    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ASetLogMode_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ASetLogModeOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ASetLogModeOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900ASetLogModeOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 85,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900ASetLogModeOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ASetLogModeOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900ASetLogModeOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900ASetLogModeOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetLogModeOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetLogModeOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult *
LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ASetLogModeOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetLogModeOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetLogModeOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetLogModeOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetLogModeOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ASetLogModeOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ASetLogModeOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900ASetLogModeOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900ASetLogModeOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AStartLog
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AStartLog =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900AStartLog",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 86,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900AStartLog,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900AStartLog),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AStartLog_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AStartLog_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AStartLog_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AStartLog_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AStartLog_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900AStartLog_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AStartLog[] =
{
  
    &LLRP_fdThingMagicIDSSL900AStartLog_StartTime,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AStartLog_StartTime =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "StartTime",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSSL900AStartLog *
LLRP_ThingMagicIDSSL900AStartLog_construct (void)
{
    LLRP_tSThingMagicIDSSL900AStartLog *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AStartLog *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AStartLog);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AStartLog_destruct (
  LLRP_tSThingMagicIDSSL900AStartLog *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AStartLog_decodeFields (
  LLRP_tSThingMagicIDSSL900AStartLog *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->StartTime =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AStartLog_StartTime);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AStartLog_StartTime);
    }
    
}

void
LLRP_ThingMagicIDSSL900AStartLog_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AStartLog *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AStartLog))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u32_t
LLRP_ThingMagicIDSSL900AStartLog_getStartTime (
  LLRP_tSThingMagicIDSSL900AStartLog *pThis)
{
    return pThis->StartTime;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AStartLog_setStartTime (
  LLRP_tSThingMagicIDSSL900AStartLog *pThis,
  llrp_u32_t Value)
{
    pThis->StartTime = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900AStartLog_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AStartLog *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AStartLog_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AStartLog *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AStartLog_beginCustom (
  LLRP_tSThingMagicIDSSL900AStartLog *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AStartLog_addCustom (
  LLRP_tSThingMagicIDSSL900AStartLog *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AStartLog))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AStartLog_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AStartLog_encode (
  const LLRP_tSThingMagicIDSSL900AStartLog *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u32(pEncoderStream,
        pThis->StartTime,
        &LLRP_fdThingMagicIDSSL900AStartLog_StartTime);

    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AStartLog_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AStartLogOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AStartLogOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900AStartLogOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 87,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900AStartLogOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AStartLogOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900AStartLogOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900AStartLogOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AStartLogOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AStartLogOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult *
LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AStartLogOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AStartLogOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AStartLogOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AStartLogOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AStartLogOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AStartLogOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AStartLogOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900AStartLogOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900AStartLogOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AEndLog
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AEndLog =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900AEndLog",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 88,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900AEndLog,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900AEndLog),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AEndLog_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AEndLog_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AEndLog_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AEndLog_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AEndLog_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900AEndLog_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AEndLog[] =
{
  
    NULL
};


LLRP_tSThingMagicIDSSL900AEndLog *
LLRP_ThingMagicIDSSL900AEndLog_construct (void)
{
    LLRP_tSThingMagicIDSSL900AEndLog *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AEndLog *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AEndLog);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AEndLog_destruct (
  LLRP_tSThingMagicIDSSL900AEndLog *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AEndLog_decodeFields (
  LLRP_tSThingMagicIDSSL900AEndLog *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicIDSSL900AEndLog_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AEndLog *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AEndLog))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900AEndLog_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AEndLog *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AEndLog_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AEndLog *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AEndLog_beginCustom (
  LLRP_tSThingMagicIDSSL900AEndLog *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AEndLog_addCustom (
  LLRP_tSThingMagicIDSSL900AEndLog *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AEndLog))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AEndLog_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AEndLog_encode (
  const LLRP_tSThingMagicIDSSL900AEndLog *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AEndLog_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AEndLogOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AEndLogOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900AEndLogOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 89,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900AEndLogOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AEndLogOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900AEndLogOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900AEndLogOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AEndLogOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AEndLogOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult *
LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AEndLogOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AEndLogOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AEndLogOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AEndLogOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AEndLogOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AEndLogOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AEndLogOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900AEndLogOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900AEndLogOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AInitialize
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AInitialize =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900AInitialize",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 90,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900AInitialize,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900AInitialize),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AInitialize_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AInitialize_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AInitialize_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AInitialize_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AInitialize_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900AInitialize_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AInitialize[] =
{
  
    NULL
};


LLRP_tSThingMagicIDSSL900AInitialize *
LLRP_ThingMagicIDSSL900AInitialize_construct (void)
{
    LLRP_tSThingMagicIDSSL900AInitialize *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AInitialize *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AInitialize);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AInitialize_destruct (
  LLRP_tSThingMagicIDSSL900AInitialize *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AInitialize_decodeFields (
  LLRP_tSThingMagicIDSSL900AInitialize *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicIDSSL900AInitialize_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AInitialize *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicIDSDelayTime
    pType = &LLRP_tdThingMagicIDSDelayTime;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSDelayTime = (LLRP_tSThingMagicIDSDelayTime *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicIDSApplicationData
    pType = &LLRP_tdThingMagicIDSApplicationData;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSApplicationData = (LLRP_tSThingMagicIDSApplicationData *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AInitialize))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900AInitialize_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AInitialize *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AInitialize_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AInitialize *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSDelayTime *
LLRP_ThingMagicIDSSL900AInitialize_getThingMagicIDSDelayTime (
  LLRP_tSThingMagicIDSSL900AInitialize *pThis)
{
    return pThis->pThingMagicIDSDelayTime;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AInitialize_setThingMagicIDSDelayTime (
  LLRP_tSThingMagicIDSSL900AInitialize *pThis,
  LLRP_tSThingMagicIDSDelayTime * pValue)
{
    SUBPARAM_SET(pThingMagicIDSDelayTime, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSApplicationData *
LLRP_ThingMagicIDSSL900AInitialize_getThingMagicIDSApplicationData (
  LLRP_tSThingMagicIDSSL900AInitialize *pThis)
{
    return pThis->pThingMagicIDSApplicationData;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AInitialize_setThingMagicIDSApplicationData (
  LLRP_tSThingMagicIDSSL900AInitialize *pThis,
  LLRP_tSThingMagicIDSApplicationData * pValue)
{
    SUBPARAM_SET(pThingMagicIDSApplicationData, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AInitialize_beginCustom (
  LLRP_tSThingMagicIDSSL900AInitialize *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AInitialize_addCustom (
  LLRP_tSThingMagicIDSSL900AInitialize *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AInitialize))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AInitialize_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AInitialize_encode (
  const LLRP_tSThingMagicIDSSL900AInitialize *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdThingMagicIDSDelayTime;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSDelayTime,
        pType);
      
    pType = &LLRP_tdThingMagicIDSApplicationData;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSApplicationData,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AInitialize_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AInitializeOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AInitializeOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900AInitializeOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 91,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900AInitializeOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AInitializeOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900AInitializeOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900AInitializeOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AInitializeOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AInitializeOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult *
LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AInitializeOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AInitializeOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AInitializeOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AInitializeOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AInitializeOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AInitializeOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AInitializeOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900AInitializeOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900AInitializeOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AGetMeasurementSetup
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AGetMeasurementSetup =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900AGetMeasurementSetup",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 92,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900AGetMeasurementSetup,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900AGetMeasurementSetup),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AGetMeasurementSetup_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AGetMeasurementSetup_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AGetMeasurementSetup_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AGetMeasurementSetup_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AGetMeasurementSetup_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900AGetMeasurementSetup_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AGetMeasurementSetup[] =
{
  
    NULL
};


LLRP_tSThingMagicIDSSL900AGetMeasurementSetup *
LLRP_ThingMagicIDSSL900AGetMeasurementSetup_construct (void)
{
    LLRP_tSThingMagicIDSSL900AGetMeasurementSetup *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AGetMeasurementSetup *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AGetMeasurementSetup);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AGetMeasurementSetup_destruct (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetup *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AGetMeasurementSetup_decodeFields (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetup *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicIDSSL900AGetMeasurementSetup_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetup *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AGetMeasurementSetup))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900AGetMeasurementSetup_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetup *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetMeasurementSetup_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetup *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetMeasurementSetup_beginCustom (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetup *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetMeasurementSetup_addCustom (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetup *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AGetMeasurementSetup))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetMeasurementSetup_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AGetMeasurementSetup_encode (
  const LLRP_tSThingMagicIDSSL900AGetMeasurementSetup *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AGetMeasurementSetup_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 93,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_logInterval,
    &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_measurementByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_logInterval =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "logInterval",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_measurementByteStream =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "measurementByteStream",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->measurementByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->logInterval =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_logInterval);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_logInterval);
    }
    
    if(NULL != pThis)
    {
        pThis->measurementByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_measurementByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_measurementByteStream);
    }
    
}

void
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSStartTime
    pType = &LLRP_tdThingMagicIDSStartTime;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSStartTime = (LLRP_tSThingMagicIDSStartTime *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicIDSLogLimits
    pType = &LLRP_tdThingMagicIDSLogLimits;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSLogLimits = (LLRP_tSThingMagicIDSLogLimits *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicIDSLogMode
    pType = &LLRP_tdThingMagicIDSLogMode;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSLogMode = (LLRP_tSThingMagicIDSLogMode *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicIDSDelayTime
    pType = &LLRP_tdThingMagicIDSDelayTime;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSDelayTime = (LLRP_tSThingMagicIDSDelayTime *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicIDSApplicationData
    pType = &LLRP_tdThingMagicIDSApplicationData;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSApplicationData = (LLRP_tSThingMagicIDSApplicationData *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_getlogInterval (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis)
{
    return pThis->logInterval;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_setlogInterval (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->logInterval = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_getmeasurementByteStream (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis)
{
    return pThis->measurementByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_setmeasurementByteStream (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->measurementByteStream);

    pThis->measurementByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSStartTime *
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_getThingMagicIDSStartTime (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis)
{
    return pThis->pThingMagicIDSStartTime;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_setThingMagicIDSStartTime (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis,
  LLRP_tSThingMagicIDSStartTime * pValue)
{
    SUBPARAM_SET(pThingMagicIDSStartTime, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSLogLimits *
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_getThingMagicIDSLogLimits (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis)
{
    return pThis->pThingMagicIDSLogLimits;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_setThingMagicIDSLogLimits (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis,
  LLRP_tSThingMagicIDSLogLimits * pValue)
{
    SUBPARAM_SET(pThingMagicIDSLogLimits, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSLogMode *
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_getThingMagicIDSLogMode (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis)
{
    return pThis->pThingMagicIDSLogMode;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_setThingMagicIDSLogMode (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis,
  LLRP_tSThingMagicIDSLogMode * pValue)
{
    SUBPARAM_SET(pThingMagicIDSLogMode, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSDelayTime *
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_getThingMagicIDSDelayTime (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis)
{
    return pThis->pThingMagicIDSDelayTime;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_setThingMagicIDSDelayTime (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis,
  LLRP_tSThingMagicIDSDelayTime * pValue)
{
    SUBPARAM_SET(pThingMagicIDSDelayTime, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSApplicationData *
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_getThingMagicIDSApplicationData (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis)
{
    return pThis->pThingMagicIDSApplicationData;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_setThingMagicIDSApplicationData (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis,
  LLRP_tSThingMagicIDSApplicationData * pValue)
{
    SUBPARAM_SET(pThingMagicIDSApplicationData, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_OpSpecID);

    pOps->pfPut_u16(pEncoderStream,
        pThis->logInterval,
        &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_logInterval);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->measurementByteStream,
        &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_measurementByteStream);

    pType = &LLRP_tdThingMagicIDSStartTime;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSStartTime,
        pType);
      
    pType = &LLRP_tdThingMagicIDSLogLimits;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSLogLimits,
        pType);
      
    pType = &LLRP_tdThingMagicIDSLogMode;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSLogMode,
        pType);
      
    pType = &LLRP_tdThingMagicIDSDelayTime;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSDelayTime,
        pType);
      
    pType = &LLRP_tdThingMagicIDSApplicationData;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSApplicationData,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AGetCalibrationData
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AGetCalibrationData =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900AGetCalibrationData",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 94,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900AGetCalibrationData,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900AGetCalibrationData),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AGetCalibrationData_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AGetCalibrationData_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AGetCalibrationData_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AGetCalibrationData_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AGetCalibrationData_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900AGetCalibrationData_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AGetCalibrationData[] =
{
  
    NULL
};


LLRP_tSThingMagicIDSSL900AGetCalibrationData *
LLRP_ThingMagicIDSSL900AGetCalibrationData_construct (void)
{
    LLRP_tSThingMagicIDSSL900AGetCalibrationData *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AGetCalibrationData *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AGetCalibrationData);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AGetCalibrationData_destruct (
  LLRP_tSThingMagicIDSSL900AGetCalibrationData *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AGetCalibrationData_decodeFields (
  LLRP_tSThingMagicIDSSL900AGetCalibrationData *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicIDSSL900AGetCalibrationData_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AGetCalibrationData *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AGetCalibrationData))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900AGetCalibrationData_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AGetCalibrationData *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetCalibrationData_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AGetCalibrationData *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetCalibrationData_beginCustom (
  LLRP_tSThingMagicIDSSL900AGetCalibrationData *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetCalibrationData_addCustom (
  LLRP_tSThingMagicIDSSL900AGetCalibrationData *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AGetCalibrationData))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetCalibrationData_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AGetCalibrationData_encode (
  const LLRP_tSThingMagicIDSSL900AGetCalibrationData *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AGetCalibrationData_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AGetCalibrationDataOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AGetCalibrationDataOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900AGetCalibrationDataOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 95,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900AGetCalibrationDataOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AGetCalibrationDataOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900AGetCalibrationDataOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900AGetCalibrationDataOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AGetCalibrationDataOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AGetCalibrationDataOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AGetCalibrationDataOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AGetCalibrationDataOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AGetCalibrationDataOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AGetCalibrationDataOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AGetCalibrationDataOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSCalibrationData
    pType = &LLRP_tdThingMagicIDSCalibrationData;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSCalibrationData = (LLRP_tSThingMagicIDSCalibrationData *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AGetCalibrationDataOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSCalibrationData *
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_getThingMagicIDSCalibrationData (
  LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *pThis)
{
    return pThis->pThingMagicIDSCalibrationData;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_setThingMagicIDSCalibrationData (
  LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *pThis,
  LLRP_tSThingMagicIDSCalibrationData * pValue)
{
    SUBPARAM_SET(pThingMagicIDSCalibrationData, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AGetCalibrationDataOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900AGetCalibrationDataOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900AGetCalibrationDataOpSpecResult_OpSpecID);

    pType = &LLRP_tdThingMagicIDSCalibrationData;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSCalibrationData,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ASetCalibrationData
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ASetCalibrationData =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900ASetCalibrationData",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 96,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900ASetCalibrationData,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900ASetCalibrationData),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ASetCalibrationData_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ASetCalibrationData_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ASetCalibrationData_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ASetCalibrationData_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ASetCalibrationData_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900ASetCalibrationData_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ASetCalibrationData[] =
{
  
    NULL
};


LLRP_tSThingMagicIDSSL900ASetCalibrationData *
LLRP_ThingMagicIDSSL900ASetCalibrationData_construct (void)
{
    LLRP_tSThingMagicIDSSL900ASetCalibrationData *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ASetCalibrationData *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ASetCalibrationData);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ASetCalibrationData_destruct (
  LLRP_tSThingMagicIDSSL900ASetCalibrationData *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ASetCalibrationData_decodeFields (
  LLRP_tSThingMagicIDSSL900ASetCalibrationData *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicIDSSL900ASetCalibrationData_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ASetCalibrationData *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicIDSCalibrationData
    pType = &LLRP_tdThingMagicIDSCalibrationData;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSCalibrationData = (LLRP_tSThingMagicIDSCalibrationData *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ASetCalibrationData))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900ASetCalibrationData_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900ASetCalibrationData *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetCalibrationData_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900ASetCalibrationData *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSCalibrationData *
LLRP_ThingMagicIDSSL900ASetCalibrationData_getThingMagicIDSCalibrationData (
  LLRP_tSThingMagicIDSSL900ASetCalibrationData *pThis)
{
    return pThis->pThingMagicIDSCalibrationData;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetCalibrationData_setThingMagicIDSCalibrationData (
  LLRP_tSThingMagicIDSSL900ASetCalibrationData *pThis,
  LLRP_tSThingMagicIDSCalibrationData * pValue)
{
    SUBPARAM_SET(pThingMagicIDSCalibrationData, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetCalibrationData_beginCustom (
  LLRP_tSThingMagicIDSSL900ASetCalibrationData *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetCalibrationData_addCustom (
  LLRP_tSThingMagicIDSSL900ASetCalibrationData *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ASetCalibrationData))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetCalibrationData_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ASetCalibrationData_encode (
  const LLRP_tSThingMagicIDSSL900ASetCalibrationData *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdThingMagicIDSCalibrationData;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSCalibrationData,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ASetCalibrationData_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ASetCalibrationDataOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ASetCalibrationDataOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900ASetCalibrationDataOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 97,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900ASetCalibrationDataOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ASetCalibrationDataOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900ASetCalibrationDataOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900ASetCalibrationDataOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetCalibrationDataOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetCalibrationDataOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult *
LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ASetCalibrationDataOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetCalibrationDataOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetCalibrationDataOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetCalibrationDataOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetCalibrationDataOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ASetCalibrationDataOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ASetCalibrationDataOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900ASetCalibrationDataOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900ASetCalibrationDataOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ASetSFEParams
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ASetSFEParams =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900ASetSFEParams",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 98,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900ASetSFEParams,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900ASetSFEParams),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ASetSFEParams_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ASetSFEParams_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ASetSFEParams_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ASetSFEParams_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ASetSFEParams_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900ASetSFEParams_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ASetSFEParams[] =
{
  
    NULL
};


LLRP_tSThingMagicIDSSL900ASetSFEParams *
LLRP_ThingMagicIDSSL900ASetSFEParams_construct (void)
{
    LLRP_tSThingMagicIDSSL900ASetSFEParams *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ASetSFEParams *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ASetSFEParams);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ASetSFEParams_destruct (
  LLRP_tSThingMagicIDSSL900ASetSFEParams *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ASetSFEParams_decodeFields (
  LLRP_tSThingMagicIDSSL900ASetSFEParams *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicIDSSL900ASetSFEParams_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ASetSFEParams *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicIDSSFEParam
    pType = &LLRP_tdThingMagicIDSSFEParam;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSFEParam = (LLRP_tSThingMagicIDSSFEParam *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ASetSFEParams))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900ASetSFEParams_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900ASetSFEParams *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetSFEParams_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900ASetSFEParams *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSSFEParam *
LLRP_ThingMagicIDSSL900ASetSFEParams_getThingMagicIDSSFEParam (
  LLRP_tSThingMagicIDSSL900ASetSFEParams *pThis)
{
    return pThis->pThingMagicIDSSFEParam;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetSFEParams_setThingMagicIDSSFEParam (
  LLRP_tSThingMagicIDSSL900ASetSFEParams *pThis,
  LLRP_tSThingMagicIDSSFEParam * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSFEParam, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetSFEParams_beginCustom (
  LLRP_tSThingMagicIDSSL900ASetSFEParams *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetSFEParams_addCustom (
  LLRP_tSThingMagicIDSSL900ASetSFEParams *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ASetSFEParams))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetSFEParams_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ASetSFEParams_encode (
  const LLRP_tSThingMagicIDSSL900ASetSFEParams *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdThingMagicIDSSFEParam;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSFEParam,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ASetSFEParams_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ASetSFEParamsOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ASetSFEParamsOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900ASetSFEParamsOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 99,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900ASetSFEParamsOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ASetSFEParamsOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900ASetSFEParamsOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900ASetSFEParamsOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetSFEParamsOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetSFEParamsOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult *
LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ASetSFEParamsOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetSFEParamsOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetSFEParamsOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetSFEParamsOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetSFEParamsOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ASetSFEParamsOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ASetSFEParamsOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900ASetSFEParamsOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900ASetSFEParamsOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AAccessFIFOStatus
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AAccessFIFOStatus =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900AAccessFIFOStatus",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 100,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900AAccessFIFOStatus,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900AAccessFIFOStatus),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AAccessFIFOStatus_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AAccessFIFOStatus_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AAccessFIFOStatus_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AAccessFIFOStatus_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AAccessFIFOStatus_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900AAccessFIFOStatus_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AAccessFIFOStatus[] =
{
  
    NULL
};


LLRP_tSThingMagicIDSSL900AAccessFIFOStatus *
LLRP_ThingMagicIDSSL900AAccessFIFOStatus_construct (void)
{
    LLRP_tSThingMagicIDSSL900AAccessFIFOStatus *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AAccessFIFOStatus *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AAccessFIFOStatus);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOStatus_destruct (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatus *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOStatus_decodeFields (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatus *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOStatus_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatus *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AAccessFIFOStatus))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900AAccessFIFOStatus_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatus *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOStatus_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatus *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AAccessFIFOStatus_beginCustom (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatus *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOStatus_addCustom (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatus *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AAccessFIFOStatus))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AAccessFIFOStatus_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AAccessFIFOStatus_encode (
  const LLRP_tSThingMagicIDSSL900AAccessFIFOStatus *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AAccessFIFOStatus_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 101,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusBusy,
    &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusDataReady,
    &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusNoData,
    &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_numValidBytes,
    &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOSource,
    &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusRawByte,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusBusy =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "FIFOStatusBusy",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusDataReady =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "FIFOStatusDataReady",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusNoData =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "FIFOStatusNoData",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_numValidBytes =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "numValidBytes",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOSource =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "FIFOSource",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusRawByte =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "FIFOStatusRawByte",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->FIFOStatusBusy =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusBusy);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusBusy);
    }
    
    if(NULL != pThis)
    {
        pThis->FIFOStatusDataReady =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusDataReady);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusDataReady);
    }
    
    if(NULL != pThis)
    {
        pThis->FIFOStatusNoData =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusNoData);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusNoData);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 5);

    if(NULL != pThis)
    {
        pThis->numValidBytes =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_numValidBytes);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_numValidBytes);
    }
    
    if(NULL != pThis)
    {
        pThis->FIFOSource =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOSource);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOSource);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

    if(NULL != pThis)
    {
        pThis->FIFOStatusRawByte =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusRawByte);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusRawByte);
    }
    
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_getFIFOStatusBusy (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis)
{
    return pThis->FIFOStatusBusy;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_setFIFOStatusBusy (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis,
  llrp_u1_t Value)
{
    pThis->FIFOStatusBusy = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_getFIFOStatusDataReady (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis)
{
    return pThis->FIFOStatusDataReady;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_setFIFOStatusDataReady (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis,
  llrp_u1_t Value)
{
    pThis->FIFOStatusDataReady = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_getFIFOStatusNoData (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis)
{
    return pThis->FIFOStatusNoData;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_setFIFOStatusNoData (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis,
  llrp_u1_t Value)
{
    pThis->FIFOStatusNoData = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_getnumValidBytes (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis)
{
    return pThis->numValidBytes;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_setnumValidBytes (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis,
  llrp_u8_t Value)
{
    pThis->numValidBytes = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_getFIFOSource (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis)
{
    return pThis->FIFOSource;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_setFIFOSource (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis,
  llrp_u1_t Value)
{
    pThis->FIFOSource = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_getFIFOStatusRawByte (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis)
{
    return pThis->FIFOStatusRawByte;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_setFIFOStatusRawByte (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis,
  llrp_u8_t Value)
{
    pThis->FIFOStatusRawByte = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_OpSpecID);

    pOps->pfPut_u1(pEncoderStream,
        pThis->FIFOStatusBusy,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusBusy);

    pOps->pfPut_u1(pEncoderStream,
        pThis->FIFOStatusDataReady,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusDataReady);

    pOps->pfPut_u1(pEncoderStream,
        pThis->FIFOStatusNoData,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusNoData);

    pOps->pfPut_reserved(pEncoderStream, 5);

    pOps->pfPut_u8(pEncoderStream,
        pThis->numValidBytes,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_numValidBytes);

    pOps->pfPut_u1(pEncoderStream,
        pThis->FIFOSource,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOSource);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pOps->pfPut_u8(pEncoderStream,
        pThis->FIFOStatusRawByte,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusRawByte);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AGetBatteryLevel
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AGetBatteryLevel =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900AGetBatteryLevel",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 102,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900AGetBatteryLevel,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900AGetBatteryLevel),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AGetBatteryLevel_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AGetBatteryLevel_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AGetBatteryLevel_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AGetBatteryLevel_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AGetBatteryLevel_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900AGetBatteryLevel_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AGetBatteryLevel[] =
{
  
    &LLRP_fdThingMagicIDSSL900AGetBatteryLevel_BatteryTrigger,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AGetBatteryLevel_BatteryTrigger =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "BatteryTrigger",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSSL900AGetBatteryLevel *
LLRP_ThingMagicIDSSL900AGetBatteryLevel_construct (void)
{
    LLRP_tSThingMagicIDSSL900AGetBatteryLevel *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AGetBatteryLevel *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AGetBatteryLevel);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AGetBatteryLevel_destruct (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevel *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AGetBatteryLevel_decodeFields (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevel *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->BatteryTrigger =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AGetBatteryLevel_BatteryTrigger);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AGetBatteryLevel_BatteryTrigger);
    }
    
}

void
LLRP_ThingMagicIDSSL900AGetBatteryLevel_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevel *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AGetBatteryLevel))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8_t
LLRP_ThingMagicIDSSL900AGetBatteryLevel_getBatteryTrigger (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevel *pThis)
{
    return pThis->BatteryTrigger;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetBatteryLevel_setBatteryTrigger (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevel *pThis,
  llrp_u8_t Value)
{
    pThis->BatteryTrigger = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900AGetBatteryLevel_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevel *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetBatteryLevel_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevel *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetBatteryLevel_beginCustom (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevel *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetBatteryLevel_addCustom (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevel *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AGetBatteryLevel))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetBatteryLevel_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AGetBatteryLevel_encode (
  const LLRP_tSThingMagicIDSSL900AGetBatteryLevel *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8(pEncoderStream,
        pThis->BatteryTrigger,
        &LLRP_fdThingMagicIDSSL900AGetBatteryLevel_BatteryTrigger);

    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AGetBatteryLevel_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AGetBatteryLevelOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AGetBatteryLevelOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900AGetBatteryLevelOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 103,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900AGetBatteryLevelOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AGetBatteryLevelOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900AGetBatteryLevelOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900AGetBatteryLevelOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AGetBatteryLevelOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AGetBatteryLevelOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AGetBatteryLevelOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AGetBatteryLevelOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AGetBatteryLevelOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AGetBatteryLevelOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AGetBatteryLevelOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSBatteryLevel
    pType = &LLRP_tdThingMagicIDSBatteryLevel;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSBatteryLevel = (LLRP_tSThingMagicIDSBatteryLevel *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AGetBatteryLevelOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSBatteryLevel *
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_getThingMagicIDSBatteryLevel (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *pThis)
{
    return pThis->pThingMagicIDSBatteryLevel;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_setThingMagicIDSBatteryLevel (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *pThis,
  LLRP_tSThingMagicIDSBatteryLevel * pValue)
{
    SUBPARAM_SET(pThingMagicIDSBatteryLevel, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AGetBatteryLevelOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900AGetBatteryLevelOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900AGetBatteryLevelOpSpecResult_OpSpecID);

    pType = &LLRP_tdThingMagicIDSBatteryLevel;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSBatteryLevel,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSDelayTime
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSDelayTime =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSDelayTime",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 104,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSDelayTime,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSDelayTime),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSDelayTime_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSDelayTime_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSDelayTime_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSDelayTime_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSDelayTime_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSDelayTime_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSDelayTime[] =
{
  
    &LLRP_fdThingMagicIDSDelayTime_delayMode,
    &LLRP_fdThingMagicIDSDelayTime_delayTime,
    &LLRP_fdThingMagicIDSDelayTime_timerEnable,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSDelayTime_delayMode =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "delayMode",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSDelayTime_delayTime =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "delayTime",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSDelayTime_timerEnable =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "timerEnable",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSDelayTime *
LLRP_ThingMagicIDSDelayTime_construct (void)
{
    LLRP_tSThingMagicIDSDelayTime *pNew;

    pNew = (LLRP_tSThingMagicIDSDelayTime *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSDelayTime);

    return pNew;
}

void
LLRP_ThingMagicIDSDelayTime_destruct (
  LLRP_tSThingMagicIDSDelayTime *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSDelayTime_decodeFields (
  LLRP_tSThingMagicIDSDelayTime *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->delayMode =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSDelayTime_delayMode);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSDelayTime_delayMode);
    }
    
    if(NULL != pThis)
    {
        pThis->delayTime =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSDelayTime_delayTime);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSDelayTime_delayTime);
    }
    
    if(NULL != pThis)
    {
        pThis->timerEnable =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSDelayTime_timerEnable);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSDelayTime_timerEnable);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

}

void
LLRP_ThingMagicIDSDelayTime_assimilateSubParameters (
  LLRP_tSThingMagicIDSDelayTime *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSDelayTime))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8_t
LLRP_ThingMagicIDSDelayTime_getdelayMode (
  LLRP_tSThingMagicIDSDelayTime *pThis)
{
    return pThis->delayMode;
}

LLRP_tResultCode
LLRP_ThingMagicIDSDelayTime_setdelayMode (
  LLRP_tSThingMagicIDSDelayTime *pThis,
  llrp_u8_t Value)
{
    pThis->delayMode = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSDelayTime_getdelayTime (
  LLRP_tSThingMagicIDSDelayTime *pThis)
{
    return pThis->delayTime;
}

LLRP_tResultCode
LLRP_ThingMagicIDSDelayTime_setdelayTime (
  LLRP_tSThingMagicIDSDelayTime *pThis,
  llrp_u16_t Value)
{
    pThis->delayTime = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSDelayTime_gettimerEnable (
  LLRP_tSThingMagicIDSDelayTime *pThis)
{
    return pThis->timerEnable;
}

LLRP_tResultCode
LLRP_ThingMagicIDSDelayTime_settimerEnable (
  LLRP_tSThingMagicIDSDelayTime *pThis,
  llrp_u1_t Value)
{
    pThis->timerEnable = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSDelayTime_beginCustom (
  LLRP_tSThingMagicIDSDelayTime *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSDelayTime_addCustom (
  LLRP_tSThingMagicIDSDelayTime *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSDelayTime))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSDelayTime_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSDelayTime_encode (
  const LLRP_tSThingMagicIDSDelayTime *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8(pEncoderStream,
        pThis->delayMode,
        &LLRP_fdThingMagicIDSDelayTime_delayMode);

    pOps->pfPut_u16(pEncoderStream,
        pThis->delayTime,
        &LLRP_fdThingMagicIDSDelayTime_delayTime);

    pOps->pfPut_u1(pEncoderStream,
        pThis->timerEnable,
        &LLRP_fdThingMagicIDSDelayTime_timerEnable);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSDelayTime_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSApplicationData
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSApplicationData =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSApplicationData",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 105,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSApplicationData,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSApplicationData),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSApplicationData_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSApplicationData_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSApplicationData_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSApplicationData_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSApplicationData_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSApplicationData_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSApplicationData[] =
{
  
    &LLRP_fdThingMagicIDSApplicationData_brokenWordPointer,
    &LLRP_fdThingMagicIDSApplicationData_numberOfWords,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSApplicationData_brokenWordPointer =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "brokenWordPointer",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSApplicationData_numberOfWords =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "numberOfWords",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSApplicationData *
LLRP_ThingMagicIDSApplicationData_construct (void)
{
    LLRP_tSThingMagicIDSApplicationData *pNew;

    pNew = (LLRP_tSThingMagicIDSApplicationData *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSApplicationData);

    return pNew;
}

void
LLRP_ThingMagicIDSApplicationData_destruct (
  LLRP_tSThingMagicIDSApplicationData *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSApplicationData_decodeFields (
  LLRP_tSThingMagicIDSApplicationData *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->brokenWordPointer =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSApplicationData_brokenWordPointer);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSApplicationData_brokenWordPointer);
    }
    
    if(NULL != pThis)
    {
        pThis->numberOfWords =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSApplicationData_numberOfWords);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSApplicationData_numberOfWords);
    }
    
}

void
LLRP_ThingMagicIDSApplicationData_assimilateSubParameters (
  LLRP_tSThingMagicIDSApplicationData *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSApplicationData))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8_t
LLRP_ThingMagicIDSApplicationData_getbrokenWordPointer (
  LLRP_tSThingMagicIDSApplicationData *pThis)
{
    return pThis->brokenWordPointer;
}

LLRP_tResultCode
LLRP_ThingMagicIDSApplicationData_setbrokenWordPointer (
  LLRP_tSThingMagicIDSApplicationData *pThis,
  llrp_u8_t Value)
{
    pThis->brokenWordPointer = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSApplicationData_getnumberOfWords (
  LLRP_tSThingMagicIDSApplicationData *pThis)
{
    return pThis->numberOfWords;
}

LLRP_tResultCode
LLRP_ThingMagicIDSApplicationData_setnumberOfWords (
  LLRP_tSThingMagicIDSApplicationData *pThis,
  llrp_u16_t Value)
{
    pThis->numberOfWords = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSApplicationData_beginCustom (
  LLRP_tSThingMagicIDSApplicationData *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSApplicationData_addCustom (
  LLRP_tSThingMagicIDSApplicationData *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSApplicationData))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSApplicationData_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSApplicationData_encode (
  const LLRP_tSThingMagicIDSApplicationData *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8(pEncoderStream,
        pThis->brokenWordPointer,
        &LLRP_fdThingMagicIDSApplicationData_brokenWordPointer);

    pOps->pfPut_u16(pEncoderStream,
        pThis->numberOfWords,
        &LLRP_fdThingMagicIDSApplicationData_numberOfWords);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSApplicationData_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSLogMode
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSLogMode =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSLogMode",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 106,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSLogMode,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSLogMode),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSLogMode_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSLogMode_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSLogMode_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSLogMode_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSLogMode_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSLogMode_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSLogMode[] =
{
  
    &LLRP_fdThingMagicIDSLogMode_Ext1Enable,
    &LLRP_fdThingMagicIDSLogMode_Ext2Enable,
    &LLRP_fdThingMagicIDSLogMode_TempEnable,
    &LLRP_fdThingMagicIDSLogMode_BattEnable,
    &LLRP_fdThingMagicIDSLogMode_StorageRule,
    &LLRP_fdThingMagicIDSLogMode_LoggingForm,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogMode_Ext1Enable =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Ext1Enable",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogMode_Ext2Enable =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Ext2Enable",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogMode_TempEnable =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "TempEnable",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogMode_BattEnable =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "BattEnable",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogMode_StorageRule =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "StorageRule",
    .pEnumTable         = LLRP_estThingMagicCustomIDSStorageRule,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogMode_LoggingForm =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "LoggingForm",
    .pEnumTable         = LLRP_estThingMagicCustomIDSLoggingForm,
};

LLRP_tSThingMagicIDSLogMode *
LLRP_ThingMagicIDSLogMode_construct (void)
{
    LLRP_tSThingMagicIDSLogMode *pNew;

    pNew = (LLRP_tSThingMagicIDSLogMode *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSLogMode);

    return pNew;
}

void
LLRP_ThingMagicIDSLogMode_destruct (
  LLRP_tSThingMagicIDSLogMode *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSLogMode_decodeFields (
  LLRP_tSThingMagicIDSLogMode *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->Ext1Enable =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogMode_Ext1Enable);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSLogMode_Ext1Enable);
    }
    
    if(NULL != pThis)
    {
        pThis->Ext2Enable =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogMode_Ext2Enable);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSLogMode_Ext2Enable);
    }
    
    if(NULL != pThis)
    {
        pThis->TempEnable =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogMode_TempEnable);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSLogMode_TempEnable);
    }
    
    if(NULL != pThis)
    {
        pThis->BattEnable =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogMode_BattEnable);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSLogMode_BattEnable);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 4);

    if(NULL != pThis)
    {
        pThis->eStorageRule =
                (LLRP_tEThingMagicCustomIDSStorageRule) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogMode_StorageRule);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSLogMode_StorageRule);
    }

    if(NULL != pThis)
    {
        pThis->eLoggingForm =
                (LLRP_tEThingMagicCustomIDSLoggingForm) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogMode_LoggingForm);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSLogMode_LoggingForm);
    }

}

void
LLRP_ThingMagicIDSLogMode_assimilateSubParameters (
  LLRP_tSThingMagicIDSLogMode *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSLogMode))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u1_t
LLRP_ThingMagicIDSLogMode_getExt1Enable (
  LLRP_tSThingMagicIDSLogMode *pThis)
{
    return pThis->Ext1Enable;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogMode_setExt1Enable (
  LLRP_tSThingMagicIDSLogMode *pThis,
  llrp_u1_t Value)
{
    pThis->Ext1Enable = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSLogMode_getExt2Enable (
  LLRP_tSThingMagicIDSLogMode *pThis)
{
    return pThis->Ext2Enable;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogMode_setExt2Enable (
  LLRP_tSThingMagicIDSLogMode *pThis,
  llrp_u1_t Value)
{
    pThis->Ext2Enable = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSLogMode_getTempEnable (
  LLRP_tSThingMagicIDSLogMode *pThis)
{
    return pThis->TempEnable;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogMode_setTempEnable (
  LLRP_tSThingMagicIDSLogMode *pThis,
  llrp_u1_t Value)
{
    pThis->TempEnable = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSLogMode_getBattEnable (
  LLRP_tSThingMagicIDSLogMode *pThis)
{
    return pThis->BattEnable;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogMode_setBattEnable (
  LLRP_tSThingMagicIDSLogMode *pThis,
  llrp_u1_t Value)
{
    pThis->BattEnable = Value;
    return LLRP_RC_OK;
}


LLRP_tEThingMagicCustomIDSStorageRule
LLRP_ThingMagicIDSLogMode_getStorageRule (
  LLRP_tSThingMagicIDSLogMode *pThis)
{
    return pThis->eStorageRule;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogMode_setStorageRule (
  LLRP_tSThingMagicIDSLogMode *pThis,
  LLRP_tEThingMagicCustomIDSStorageRule eValue)
{
    pThis->eStorageRule = eValue;
    return LLRP_RC_OK;
}


LLRP_tEThingMagicCustomIDSLoggingForm
LLRP_ThingMagicIDSLogMode_getLoggingForm (
  LLRP_tSThingMagicIDSLogMode *pThis)
{
    return pThis->eLoggingForm;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogMode_setLoggingForm (
  LLRP_tSThingMagicIDSLogMode *pThis,
  LLRP_tEThingMagicCustomIDSLoggingForm eValue)
{
    pThis->eLoggingForm = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSLogMode_beginCustom (
  LLRP_tSThingMagicIDSLogMode *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogMode_addCustom (
  LLRP_tSThingMagicIDSLogMode *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSLogMode))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSLogMode_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSLogMode_encode (
  const LLRP_tSThingMagicIDSLogMode *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u1(pEncoderStream,
        pThis->Ext1Enable,
        &LLRP_fdThingMagicIDSLogMode_Ext1Enable);

    pOps->pfPut_u1(pEncoderStream,
        pThis->Ext2Enable,
        &LLRP_fdThingMagicIDSLogMode_Ext2Enable);

    pOps->pfPut_u1(pEncoderStream,
        pThis->TempEnable,
        &LLRP_fdThingMagicIDSLogMode_TempEnable);

    pOps->pfPut_u1(pEncoderStream,
        pThis->BattEnable,
        &LLRP_fdThingMagicIDSLogMode_BattEnable);

    pOps->pfPut_reserved(pEncoderStream, 4);

    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eStorageRule,
        &LLRP_fdThingMagicIDSLogMode_StorageRule);

    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eLoggingForm,
        &LLRP_fdThingMagicIDSLogMode_LoggingForm);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSLogMode_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSLogLimits
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSLogLimits =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSLogLimits",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 107,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSLogLimits,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSLogLimits),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSLogLimits_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSLogLimits_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSLogLimits_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSLogLimits_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSLogLimits_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSLogLimits_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSLogLimits[] =
{
  
    &LLRP_fdThingMagicIDSLogLimits_extremeLower,
    &LLRP_fdThingMagicIDSLogLimits_lower,
    &LLRP_fdThingMagicIDSLogLimits_upper,
    &LLRP_fdThingMagicIDSLogLimits_extremeUpper,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogLimits_extremeLower =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "extremeLower",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogLimits_lower =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "lower",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogLimits_upper =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "upper",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogLimits_extremeUpper =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "extremeUpper",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSLogLimits *
LLRP_ThingMagicIDSLogLimits_construct (void)
{
    LLRP_tSThingMagicIDSLogLimits *pNew;

    pNew = (LLRP_tSThingMagicIDSLogLimits *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSLogLimits);

    return pNew;
}

void
LLRP_ThingMagicIDSLogLimits_destruct (
  LLRP_tSThingMagicIDSLogLimits *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSLogLimits_decodeFields (
  LLRP_tSThingMagicIDSLogLimits *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->extremeLower =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogLimits_extremeLower);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSLogLimits_extremeLower);
    }
    
    if(NULL != pThis)
    {
        pThis->lower =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogLimits_lower);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSLogLimits_lower);
    }
    
    if(NULL != pThis)
    {
        pThis->upper =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogLimits_upper);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSLogLimits_upper);
    }
    
    if(NULL != pThis)
    {
        pThis->extremeUpper =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogLimits_extremeUpper);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSLogLimits_extremeUpper);
    }
    
}

void
LLRP_ThingMagicIDSLogLimits_assimilateSubParameters (
  LLRP_tSThingMagicIDSLogLimits *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSLogLimits))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicIDSLogLimits_getextremeLower (
  LLRP_tSThingMagicIDSLogLimits *pThis)
{
    return pThis->extremeLower;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogLimits_setextremeLower (
  LLRP_tSThingMagicIDSLogLimits *pThis,
  llrp_u16_t Value)
{
    pThis->extremeLower = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSLogLimits_getlower (
  LLRP_tSThingMagicIDSLogLimits *pThis)
{
    return pThis->lower;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogLimits_setlower (
  LLRP_tSThingMagicIDSLogLimits *pThis,
  llrp_u16_t Value)
{
    pThis->lower = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSLogLimits_getupper (
  LLRP_tSThingMagicIDSLogLimits *pThis)
{
    return pThis->upper;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogLimits_setupper (
  LLRP_tSThingMagicIDSLogLimits *pThis,
  llrp_u16_t Value)
{
    pThis->upper = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSLogLimits_getextremeUpper (
  LLRP_tSThingMagicIDSLogLimits *pThis)
{
    return pThis->extremeUpper;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogLimits_setextremeUpper (
  LLRP_tSThingMagicIDSLogLimits *pThis,
  llrp_u16_t Value)
{
    pThis->extremeUpper = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSLogLimits_beginCustom (
  LLRP_tSThingMagicIDSLogLimits *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogLimits_addCustom (
  LLRP_tSThingMagicIDSLogLimits *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSLogLimits))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSLogLimits_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSLogLimits_encode (
  const LLRP_tSThingMagicIDSLogLimits *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->extremeLower,
        &LLRP_fdThingMagicIDSLogLimits_extremeLower);

    pOps->pfPut_u16(pEncoderStream,
        pThis->lower,
        &LLRP_fdThingMagicIDSLogLimits_lower);

    pOps->pfPut_u16(pEncoderStream,
        pThis->upper,
        &LLRP_fdThingMagicIDSLogLimits_upper);

    pOps->pfPut_u16(pEncoderStream,
        pThis->extremeUpper,
        &LLRP_fdThingMagicIDSLogLimits_extremeUpper);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSLogLimits_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSStartTime
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSStartTime =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSStartTime",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 108,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSStartTime,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSStartTime),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSStartTime_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSStartTime_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSStartTime_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSStartTime_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSStartTime_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSStartTime_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSStartTime[] =
{
  
    &LLRP_fdThingMagicIDSStartTime_seconds,
    &LLRP_fdThingMagicIDSStartTime_minutes,
    &LLRP_fdThingMagicIDSStartTime_hours,
    &LLRP_fdThingMagicIDSStartTime_day,
    &LLRP_fdThingMagicIDSStartTime_month,
    &LLRP_fdThingMagicIDSStartTime_year,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSStartTime_seconds =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "seconds",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSStartTime_minutes =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "minutes",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSStartTime_hours =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "hours",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSStartTime_day =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "day",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSStartTime_month =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "month",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSStartTime_year =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "year",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSStartTime *
LLRP_ThingMagicIDSStartTime_construct (void)
{
    LLRP_tSThingMagicIDSStartTime *pNew;

    pNew = (LLRP_tSThingMagicIDSStartTime *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSStartTime);

    return pNew;
}

void
LLRP_ThingMagicIDSStartTime_destruct (
  LLRP_tSThingMagicIDSStartTime *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSStartTime_decodeFields (
  LLRP_tSThingMagicIDSStartTime *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->seconds =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSStartTime_seconds);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSStartTime_seconds);
    }
    
    if(NULL != pThis)
    {
        pThis->minutes =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSStartTime_minutes);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSStartTime_minutes);
    }
    
    if(NULL != pThis)
    {
        pThis->hours =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSStartTime_hours);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSStartTime_hours);
    }
    
    if(NULL != pThis)
    {
        pThis->day =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSStartTime_day);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSStartTime_day);
    }
    
    if(NULL != pThis)
    {
        pThis->month =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSStartTime_month);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSStartTime_month);
    }
    
    if(NULL != pThis)
    {
        pThis->year =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSStartTime_year);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSStartTime_year);
    }
    
}

void
LLRP_ThingMagicIDSStartTime_assimilateSubParameters (
  LLRP_tSThingMagicIDSStartTime *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSStartTime))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8_t
LLRP_ThingMagicIDSStartTime_getseconds (
  LLRP_tSThingMagicIDSStartTime *pThis)
{
    return pThis->seconds;
}

LLRP_tResultCode
LLRP_ThingMagicIDSStartTime_setseconds (
  LLRP_tSThingMagicIDSStartTime *pThis,
  llrp_u8_t Value)
{
    pThis->seconds = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSStartTime_getminutes (
  LLRP_tSThingMagicIDSStartTime *pThis)
{
    return pThis->minutes;
}

LLRP_tResultCode
LLRP_ThingMagicIDSStartTime_setminutes (
  LLRP_tSThingMagicIDSStartTime *pThis,
  llrp_u8_t Value)
{
    pThis->minutes = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSStartTime_gethours (
  LLRP_tSThingMagicIDSStartTime *pThis)
{
    return pThis->hours;
}

LLRP_tResultCode
LLRP_ThingMagicIDSStartTime_sethours (
  LLRP_tSThingMagicIDSStartTime *pThis,
  llrp_u8_t Value)
{
    pThis->hours = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSStartTime_getday (
  LLRP_tSThingMagicIDSStartTime *pThis)
{
    return pThis->day;
}

LLRP_tResultCode
LLRP_ThingMagicIDSStartTime_setday (
  LLRP_tSThingMagicIDSStartTime *pThis,
  llrp_u8_t Value)
{
    pThis->day = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSStartTime_getmonth (
  LLRP_tSThingMagicIDSStartTime *pThis)
{
    return pThis->month;
}

LLRP_tResultCode
LLRP_ThingMagicIDSStartTime_setmonth (
  LLRP_tSThingMagicIDSStartTime *pThis,
  llrp_u8_t Value)
{
    pThis->month = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSStartTime_getyear (
  LLRP_tSThingMagicIDSStartTime *pThis)
{
    return pThis->year;
}

LLRP_tResultCode
LLRP_ThingMagicIDSStartTime_setyear (
  LLRP_tSThingMagicIDSStartTime *pThis,
  llrp_u8_t Value)
{
    pThis->year = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSStartTime_beginCustom (
  LLRP_tSThingMagicIDSStartTime *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSStartTime_addCustom (
  LLRP_tSThingMagicIDSStartTime *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSStartTime))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSStartTime_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSStartTime_encode (
  const LLRP_tSThingMagicIDSStartTime *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8(pEncoderStream,
        pThis->seconds,
        &LLRP_fdThingMagicIDSStartTime_seconds);

    pOps->pfPut_u8(pEncoderStream,
        pThis->minutes,
        &LLRP_fdThingMagicIDSStartTime_minutes);

    pOps->pfPut_u8(pEncoderStream,
        pThis->hours,
        &LLRP_fdThingMagicIDSStartTime_hours);

    pOps->pfPut_u8(pEncoderStream,
        pThis->day,
        &LLRP_fdThingMagicIDSStartTime_day);

    pOps->pfPut_u8(pEncoderStream,
        pThis->month,
        &LLRP_fdThingMagicIDSStartTime_month);

    pOps->pfPut_u8(pEncoderStream,
        pThis->year,
        &LLRP_fdThingMagicIDSStartTime_year);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSStartTime_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSFEParam
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSFEParam =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSFEParam",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 109,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSFEParam,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSFEParam),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSFEParam_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSFEParam_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSFEParam_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSFEParam_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSFEParam_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSFEParam_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSFEParam[] =
{
  
    &LLRP_fdThingMagicIDSSFEParam_raw,
    &LLRP_fdThingMagicIDSSFEParam_range,
    &LLRP_fdThingMagicIDSSFEParam_seti,
    &LLRP_fdThingMagicIDSSFEParam_Ext1,
    &LLRP_fdThingMagicIDSSFEParam_Ext2,
    &LLRP_fdThingMagicIDSSFEParam_AutoRangeDisable,
    &LLRP_fdThingMagicIDSSFEParam_VerifySensorID,
    &LLRP_fdThingMagicIDSSFEParam_SFEType,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSFEParam_raw =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "raw",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSFEParam_range =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "range",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSFEParam_seti =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "seti",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSFEParam_Ext1 =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Ext1",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSFEParam_Ext2 =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Ext2",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSFEParam_AutoRangeDisable =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AutoRangeDisable",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSFEParam_VerifySensorID =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "VerifySensorID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSFEParam_SFEType =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "SFEType",
    .pEnumTable         = LLRP_estThingMagicCustomIDSSFEType,
};

LLRP_tSThingMagicIDSSFEParam *
LLRP_ThingMagicIDSSFEParam_construct (void)
{
    LLRP_tSThingMagicIDSSFEParam *pNew;

    pNew = (LLRP_tSThingMagicIDSSFEParam *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSFEParam);

    return pNew;
}

void
LLRP_ThingMagicIDSSFEParam_destruct (
  LLRP_tSThingMagicIDSSFEParam *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSFEParam_decodeFields (
  LLRP_tSThingMagicIDSSFEParam *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->raw =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSFEParam_raw);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSFEParam_raw);
    }
    
    if(NULL != pThis)
    {
        pThis->range =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSFEParam_range);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSFEParam_range);
    }
    
    if(NULL != pThis)
    {
        pThis->seti =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSFEParam_seti);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSFEParam_seti);
    }
    
    if(NULL != pThis)
    {
        pThis->Ext1 =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSFEParam_Ext1);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSFEParam_Ext1);
    }
    
    if(NULL != pThis)
    {
        pThis->Ext2 =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSFEParam_Ext2);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSFEParam_Ext2);
    }
    
    if(NULL != pThis)
    {
        pThis->AutoRangeDisable =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSSFEParam_AutoRangeDisable);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSSFEParam_AutoRangeDisable);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

    if(NULL != pThis)
    {
        pThis->VerifySensorID =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSFEParam_VerifySensorID);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSFEParam_VerifySensorID);
    }
    
    if(NULL != pThis)
    {
        pThis->eSFEType =
                (LLRP_tEThingMagicCustomIDSSFEType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSFEParam_SFEType);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSFEParam_SFEType);
    }

}

void
LLRP_ThingMagicIDSSFEParam_assimilateSubParameters (
  LLRP_tSThingMagicIDSSFEParam *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSFEParam))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicIDSSFEParam_getraw (
  LLRP_tSThingMagicIDSSFEParam *pThis)
{
    return pThis->raw;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSFEParam_setraw (
  LLRP_tSThingMagicIDSSFEParam *pThis,
  llrp_u16_t Value)
{
    pThis->raw = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSFEParam_getrange (
  LLRP_tSThingMagicIDSSFEParam *pThis)
{
    return pThis->range;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSFEParam_setrange (
  LLRP_tSThingMagicIDSSFEParam *pThis,
  llrp_u8_t Value)
{
    pThis->range = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSFEParam_getseti (
  LLRP_tSThingMagicIDSSFEParam *pThis)
{
    return pThis->seti;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSFEParam_setseti (
  LLRP_tSThingMagicIDSSFEParam *pThis,
  llrp_u8_t Value)
{
    pThis->seti = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSFEParam_getExt1 (
  LLRP_tSThingMagicIDSSFEParam *pThis)
{
    return pThis->Ext1;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSFEParam_setExt1 (
  LLRP_tSThingMagicIDSSFEParam *pThis,
  llrp_u8_t Value)
{
    pThis->Ext1 = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSFEParam_getExt2 (
  LLRP_tSThingMagicIDSSFEParam *pThis)
{
    return pThis->Ext2;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSFEParam_setExt2 (
  LLRP_tSThingMagicIDSSFEParam *pThis,
  llrp_u8_t Value)
{
    pThis->Ext2 = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSSFEParam_getAutoRangeDisable (
  LLRP_tSThingMagicIDSSFEParam *pThis)
{
    return pThis->AutoRangeDisable;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSFEParam_setAutoRangeDisable (
  LLRP_tSThingMagicIDSSFEParam *pThis,
  llrp_u1_t Value)
{
    pThis->AutoRangeDisable = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSFEParam_getVerifySensorID (
  LLRP_tSThingMagicIDSSFEParam *pThis)
{
    return pThis->VerifySensorID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSFEParam_setVerifySensorID (
  LLRP_tSThingMagicIDSSFEParam *pThis,
  llrp_u8_t Value)
{
    pThis->VerifySensorID = Value;
    return LLRP_RC_OK;
}


LLRP_tEThingMagicCustomIDSSFEType
LLRP_ThingMagicIDSSFEParam_getSFEType (
  LLRP_tSThingMagicIDSSFEParam *pThis)
{
    return pThis->eSFEType;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSFEParam_setSFEType (
  LLRP_tSThingMagicIDSSFEParam *pThis,
  LLRP_tEThingMagicCustomIDSSFEType eValue)
{
    pThis->eSFEType = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSFEParam_beginCustom (
  LLRP_tSThingMagicIDSSFEParam *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSFEParam_addCustom (
  LLRP_tSThingMagicIDSSFEParam *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSFEParam))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSFEParam_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSFEParam_encode (
  const LLRP_tSThingMagicIDSSFEParam *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->raw,
        &LLRP_fdThingMagicIDSSFEParam_raw);

    pOps->pfPut_u8(pEncoderStream,
        pThis->range,
        &LLRP_fdThingMagicIDSSFEParam_range);

    pOps->pfPut_u8(pEncoderStream,
        pThis->seti,
        &LLRP_fdThingMagicIDSSFEParam_seti);

    pOps->pfPut_u8(pEncoderStream,
        pThis->Ext1,
        &LLRP_fdThingMagicIDSSFEParam_Ext1);

    pOps->pfPut_u8(pEncoderStream,
        pThis->Ext2,
        &LLRP_fdThingMagicIDSSFEParam_Ext2);

    pOps->pfPut_u1(pEncoderStream,
        pThis->AutoRangeDisable,
        &LLRP_fdThingMagicIDSSFEParam_AutoRangeDisable);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pOps->pfPut_u8(pEncoderStream,
        pThis->VerifySensorID,
        &LLRP_fdThingMagicIDSSFEParam_VerifySensorID);

    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eSFEType,
        &LLRP_fdThingMagicIDSSFEParam_SFEType);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSFEParam_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSCalibrationData
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSCalibrationData =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSCalibrationData",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 110,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSCalibrationData,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSCalibrationData),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSCalibrationData_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSCalibrationData_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSCalibrationData_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSCalibrationData_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSCalibrationData_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSCalibrationData_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSCalibrationData[] =
{
  
    &LLRP_fdThingMagicIDSCalibrationData_raw,
    &LLRP_fdThingMagicIDSCalibrationData_ad1,
    &LLRP_fdThingMagicIDSCalibrationData_coars1,
    &LLRP_fdThingMagicIDSCalibrationData_ad2,
    &LLRP_fdThingMagicIDSCalibrationData_coars2,
    &LLRP_fdThingMagicIDSCalibrationData_gndSwitch,
    &LLRP_fdThingMagicIDSCalibrationData_selp12,
    &LLRP_fdThingMagicIDSCalibrationData_adf,
    &LLRP_fdThingMagicIDSCalibrationData_df,
    &LLRP_fdThingMagicIDSCalibrationData_swExtEn,
    &LLRP_fdThingMagicIDSCalibrationData_selp22,
    &LLRP_fdThingMagicIDSCalibrationData_irlev,
    &LLRP_fdThingMagicIDSCalibrationData_ringCal,
    &LLRP_fdThingMagicIDSCalibrationData_offInt,
    &LLRP_fdThingMagicIDSCalibrationData_reftc,
    &LLRP_fdThingMagicIDSCalibrationData_excRes,
    &LLRP_fdThingMagicIDSCalibrationData_RFU,
    &LLRP_fdThingMagicIDSCalibrationData_CalibrationType,
    &LLRP_fdThingMagicIDSCalibrationData_calibrationValueByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_raw =
{
    .eFieldType         = LLRP_FT_U64,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "raw",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_ad1 =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ad1",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_coars1 =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "coars1",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_ad2 =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ad2",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_coars2 =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "coars2",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_gndSwitch =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "gndSwitch",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_selp12 =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "selp12",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_adf =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "adf",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_df =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "df",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_swExtEn =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "swExtEn",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_selp22 =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "selp22",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_irlev =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "irlev",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_ringCal =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ringCal",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_offInt =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "offInt",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_reftc =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "reftc",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_excRes =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "excRes",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_RFU =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "RFU",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_CalibrationType =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "CalibrationType",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_calibrationValueByteStream =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "calibrationValueByteStream",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSCalibrationData *
LLRP_ThingMagicIDSCalibrationData_construct (void)
{
    LLRP_tSThingMagicIDSCalibrationData *pNew;

    pNew = (LLRP_tSThingMagicIDSCalibrationData *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSCalibrationData);

    return pNew;
}

void
LLRP_ThingMagicIDSCalibrationData_destruct (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
  
    LLRP_u8v_clear(&pThis->calibrationValueByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSCalibrationData_decodeFields (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->raw =
                pOps->pfGet_u64(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_raw);
    }
    else
    {
        pOps->pfGet_u64(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_raw);
    }
    
    if(NULL != pThis)
    {
        pThis->ad1 =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_ad1);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_ad1);
    }
    
    if(NULL != pThis)
    {
        pThis->coars1 =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_coars1);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_coars1);
    }
    
    if(NULL != pThis)
    {
        pThis->ad2 =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_ad2);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_ad2);
    }
    
    if(NULL != pThis)
    {
        pThis->coars2 =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_coars2);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_coars2);
    }
    
    if(NULL != pThis)
    {
        pThis->gndSwitch =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_gndSwitch);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_gndSwitch);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

    if(NULL != pThis)
    {
        pThis->selp12 =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_selp12);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_selp12);
    }
    
    if(NULL != pThis)
    {
        pThis->adf =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_adf);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_adf);
    }
    
    if(NULL != pThis)
    {
        pThis->df =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_df);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_df);
    }
    
    if(NULL != pThis)
    {
        pThis->swExtEn =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_swExtEn);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_swExtEn);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

    if(NULL != pThis)
    {
        pThis->selp22 =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_selp22);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_selp22);
    }
    
    if(NULL != pThis)
    {
        pThis->irlev =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_irlev);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_irlev);
    }
    
    if(NULL != pThis)
    {
        pThis->ringCal =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_ringCal);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_ringCal);
    }
    
    if(NULL != pThis)
    {
        pThis->offInt =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_offInt);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_offInt);
    }
    
    if(NULL != pThis)
    {
        pThis->reftc =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_reftc);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_reftc);
    }
    
    if(NULL != pThis)
    {
        pThis->excRes =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_excRes);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_excRes);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

    if(NULL != pThis)
    {
        pThis->RFU =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_RFU);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_RFU);
    }
    
    if(NULL != pThis)
    {
        pThis->CalibrationType =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_CalibrationType);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_CalibrationType);
    }
    
    if(NULL != pThis)
    {
        pThis->calibrationValueByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_calibrationValueByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_calibrationValueByteStream);
    }
    
}

void
LLRP_ThingMagicIDSCalibrationData_assimilateSubParameters (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSCalibrationData))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u64_t
LLRP_ThingMagicIDSCalibrationData_getraw (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->raw;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setraw (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u64_t Value)
{
    pThis->raw = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getad1 (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->ad1;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setad1 (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->ad1 = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getcoars1 (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->coars1;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setcoars1 (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->coars1 = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getad2 (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->ad2;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setad2 (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->ad2 = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getcoars2 (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->coars2;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setcoars2 (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->coars2 = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSCalibrationData_getgndSwitch (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->gndSwitch;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setgndSwitch (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u1_t Value)
{
    pThis->gndSwitch = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getselp12 (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->selp12;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setselp12 (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->selp12 = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getadf (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->adf;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setadf (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->adf = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getdf (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->df;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setdf (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->df = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSCalibrationData_getswExtEn (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->swExtEn;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setswExtEn (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u1_t Value)
{
    pThis->swExtEn = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getselp22 (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->selp22;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setselp22 (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->selp22 = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getirlev (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->irlev;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setirlev (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->irlev = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getringCal (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->ringCal;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setringCal (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->ringCal = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getoffInt (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->offInt;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setoffInt (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->offInt = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getreftc (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->reftc;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setreftc (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->reftc = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSCalibrationData_getexcRes (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->excRes;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setexcRes (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u1_t Value)
{
    pThis->excRes = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getRFU (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->RFU;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setRFU (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->RFU = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getCalibrationType (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->CalibrationType;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setCalibrationType (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->CalibrationType = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicIDSCalibrationData_getcalibrationValueByteStream (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->calibrationValueByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setcalibrationValueByteStream (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->calibrationValueByteStream);

    pThis->calibrationValueByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSCalibrationData_beginCustom (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_addCustom (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSCalibrationData))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSCalibrationData_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSCalibrationData_encode (
  const LLRP_tSThingMagicIDSCalibrationData *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u64(pEncoderStream,
        pThis->raw,
        &LLRP_fdThingMagicIDSCalibrationData_raw);

    pOps->pfPut_u8(pEncoderStream,
        pThis->ad1,
        &LLRP_fdThingMagicIDSCalibrationData_ad1);

    pOps->pfPut_u8(pEncoderStream,
        pThis->coars1,
        &LLRP_fdThingMagicIDSCalibrationData_coars1);

    pOps->pfPut_u8(pEncoderStream,
        pThis->ad2,
        &LLRP_fdThingMagicIDSCalibrationData_ad2);

    pOps->pfPut_u8(pEncoderStream,
        pThis->coars2,
        &LLRP_fdThingMagicIDSCalibrationData_coars2);

    pOps->pfPut_u1(pEncoderStream,
        pThis->gndSwitch,
        &LLRP_fdThingMagicIDSCalibrationData_gndSwitch);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pOps->pfPut_u8(pEncoderStream,
        pThis->selp12,
        &LLRP_fdThingMagicIDSCalibrationData_selp12);

    pOps->pfPut_u8(pEncoderStream,
        pThis->adf,
        &LLRP_fdThingMagicIDSCalibrationData_adf);

    pOps->pfPut_u8(pEncoderStream,
        pThis->df,
        &LLRP_fdThingMagicIDSCalibrationData_df);

    pOps->pfPut_u1(pEncoderStream,
        pThis->swExtEn,
        &LLRP_fdThingMagicIDSCalibrationData_swExtEn);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pOps->pfPut_u8(pEncoderStream,
        pThis->selp22,
        &LLRP_fdThingMagicIDSCalibrationData_selp22);

    pOps->pfPut_u8(pEncoderStream,
        pThis->irlev,
        &LLRP_fdThingMagicIDSCalibrationData_irlev);

    pOps->pfPut_u8(pEncoderStream,
        pThis->ringCal,
        &LLRP_fdThingMagicIDSCalibrationData_ringCal);

    pOps->pfPut_u8(pEncoderStream,
        pThis->offInt,
        &LLRP_fdThingMagicIDSCalibrationData_offInt);

    pOps->pfPut_u8(pEncoderStream,
        pThis->reftc,
        &LLRP_fdThingMagicIDSCalibrationData_reftc);

    pOps->pfPut_u1(pEncoderStream,
        pThis->excRes,
        &LLRP_fdThingMagicIDSCalibrationData_excRes);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pOps->pfPut_u8(pEncoderStream,
        pThis->RFU,
        &LLRP_fdThingMagicIDSCalibrationData_RFU);

    pOps->pfPut_u8(pEncoderStream,
        pThis->CalibrationType,
        &LLRP_fdThingMagicIDSCalibrationData_CalibrationType);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->calibrationValueByteStream,
        &LLRP_fdThingMagicIDSCalibrationData_calibrationValueByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSCalibrationData_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AAccessFIFORead
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AAccessFIFORead =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900AAccessFIFORead",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 111,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900AAccessFIFORead,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900AAccessFIFORead),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AAccessFIFORead_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AAccessFIFORead_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AAccessFIFORead_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AAccessFIFORead_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AAccessFIFORead_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900AAccessFIFORead_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AAccessFIFORead[] =
{
  
    &LLRP_fdThingMagicIDSSL900AAccessFIFORead_FIFOReadLength,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFORead_FIFOReadLength =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "FIFOReadLength",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSSL900AAccessFIFORead *
LLRP_ThingMagicIDSSL900AAccessFIFORead_construct (void)
{
    LLRP_tSThingMagicIDSSL900AAccessFIFORead *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AAccessFIFORead *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AAccessFIFORead);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AAccessFIFORead_destruct (
  LLRP_tSThingMagicIDSSL900AAccessFIFORead *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AAccessFIFORead_decodeFields (
  LLRP_tSThingMagicIDSSL900AAccessFIFORead *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->FIFOReadLength =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFORead_FIFOReadLength);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFORead_FIFOReadLength);
    }
    
}

void
LLRP_ThingMagicIDSSL900AAccessFIFORead_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AAccessFIFORead *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AAccessFIFORead))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8_t
LLRP_ThingMagicIDSSL900AAccessFIFORead_getFIFOReadLength (
  LLRP_tSThingMagicIDSSL900AAccessFIFORead *pThis)
{
    return pThis->FIFOReadLength;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFORead_setFIFOReadLength (
  LLRP_tSThingMagicIDSSL900AAccessFIFORead *pThis,
  llrp_u8_t Value)
{
    pThis->FIFOReadLength = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900AAccessFIFORead_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AAccessFIFORead *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFORead_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AAccessFIFORead *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AAccessFIFORead_beginCustom (
  LLRP_tSThingMagicIDSSL900AAccessFIFORead *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFORead_addCustom (
  LLRP_tSThingMagicIDSSL900AAccessFIFORead *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AAccessFIFORead))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AAccessFIFORead_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AAccessFIFORead_encode (
  const LLRP_tSThingMagicIDSSL900AAccessFIFORead *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8(pEncoderStream,
        pThis->FIFOReadLength,
        &LLRP_fdThingMagicIDSSL900AAccessFIFORead_FIFOReadLength);

    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AAccessFIFORead_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AAccessFIFOReadOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AAccessFIFOReadOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900AAccessFIFOReadOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 112,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900AAccessFIFOReadOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AAccessFIFOReadOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_readPayLoad,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_readPayLoad =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "readPayLoad",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AAccessFIFOReadOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->readPayLoad);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->readPayLoad =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_readPayLoad);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_readPayLoad);
    }
    
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AAccessFIFOReadOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_getreadPayLoad (
  LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *pThis)
{
    return pThis->readPayLoad;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_setreadPayLoad (
  LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->readPayLoad);

    pThis->readPayLoad = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AAccessFIFOReadOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->readPayLoad,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_readPayLoad);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AAccessFIFOWrite
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AAccessFIFOWrite =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900AAccessFIFOWrite",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 113,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900AAccessFIFOWrite,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900AAccessFIFOWrite),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AAccessFIFOWrite_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AAccessFIFOWrite_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AAccessFIFOWrite_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AAccessFIFOWrite_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AAccessFIFOWrite_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900AAccessFIFOWrite_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AAccessFIFOWrite[] =
{
  
    &LLRP_fdThingMagicIDSSL900AAccessFIFOWrite_writePayLoad,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOWrite_writePayLoad =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "writePayLoad",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSSL900AAccessFIFOWrite *
LLRP_ThingMagicIDSSL900AAccessFIFOWrite_construct (void)
{
    LLRP_tSThingMagicIDSSL900AAccessFIFOWrite *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AAccessFIFOWrite *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AAccessFIFOWrite);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOWrite_destruct (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWrite *pThis)
{
  
    LLRP_u8v_clear(&pThis->writePayLoad);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOWrite_decodeFields (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWrite *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->writePayLoad =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOWrite_writePayLoad);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOWrite_writePayLoad);
    }
    
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOWrite_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWrite *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AAccessFIFOWrite))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8v_t
LLRP_ThingMagicIDSSL900AAccessFIFOWrite_getwritePayLoad (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWrite *pThis)
{
    return pThis->writePayLoad;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOWrite_setwritePayLoad (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWrite *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->writePayLoad);

    pThis->writePayLoad = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900AAccessFIFOWrite_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWrite *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOWrite_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWrite *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AAccessFIFOWrite_beginCustom (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWrite *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOWrite_addCustom (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWrite *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AAccessFIFOWrite))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AAccessFIFOWrite_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AAccessFIFOWrite_encode (
  const LLRP_tSThingMagicIDSSL900AAccessFIFOWrite *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8v(pEncoderStream,
        pThis->writePayLoad,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOWrite_writePayLoad);

    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AAccessFIFOWrite_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 114,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult *
LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ASetLogLimits
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ASetLogLimits =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900ASetLogLimits",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 115,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900ASetLogLimits,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900ASetLogLimits),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ASetLogLimits_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ASetLogLimits_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ASetLogLimits_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ASetLogLimits_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ASetLogLimits_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900ASetLogLimits_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ASetLogLimits[] =
{
  
    NULL
};


LLRP_tSThingMagicIDSSL900ASetLogLimits *
LLRP_ThingMagicIDSSL900ASetLogLimits_construct (void)
{
    LLRP_tSThingMagicIDSSL900ASetLogLimits *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ASetLogLimits *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ASetLogLimits);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ASetLogLimits_destruct (
  LLRP_tSThingMagicIDSSL900ASetLogLimits *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ASetLogLimits_decodeFields (
  LLRP_tSThingMagicIDSSL900ASetLogLimits *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicIDSSL900ASetLogLimits_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ASetLogLimits *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicIDSLogLimits
    pType = &LLRP_tdThingMagicIDSLogLimits;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSLogLimits = (LLRP_tSThingMagicIDSLogLimits *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ASetLogLimits))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900ASetLogLimits_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900ASetLogLimits *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogLimits_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900ASetLogLimits *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSLogLimits *
LLRP_ThingMagicIDSSL900ASetLogLimits_getThingMagicIDSLogLimits (
  LLRP_tSThingMagicIDSSL900ASetLogLimits *pThis)
{
    return pThis->pThingMagicIDSLogLimits;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogLimits_setThingMagicIDSLogLimits (
  LLRP_tSThingMagicIDSSL900ASetLogLimits *pThis,
  LLRP_tSThingMagicIDSLogLimits * pValue)
{
    SUBPARAM_SET(pThingMagicIDSLogLimits, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetLogLimits_beginCustom (
  LLRP_tSThingMagicIDSSL900ASetLogLimits *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogLimits_addCustom (
  LLRP_tSThingMagicIDSSL900ASetLogLimits *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ASetLogLimits))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetLogLimits_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ASetLogLimits_encode (
  const LLRP_tSThingMagicIDSSL900ASetLogLimits *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdThingMagicIDSLogLimits;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSLogLimits,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ASetLogLimits_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ASetLogLimitsOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ASetLogLimitsOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900ASetLogLimitsOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 116,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900ASetLogLimitsOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ASetLogLimitsOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900ASetLogLimitsOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900ASetLogLimitsOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetLogLimitsOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetLogLimitsOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult *
LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ASetLogLimitsOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetLogLimitsOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetLogLimitsOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetLogLimitsOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetLogLimitsOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ASetLogLimitsOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ASetLogLimitsOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900ASetLogLimitsOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900ASetLogLimitsOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ASetIDSPassword
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ASetIDSPassword =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900ASetIDSPassword",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 117,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900ASetIDSPassword,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900ASetIDSPassword),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ASetIDSPassword_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ASetIDSPassword_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ASetIDSPassword_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ASetIDSPassword_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ASetIDSPassword_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900ASetIDSPassword_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ASetIDSPassword[] =
{
  
    &LLRP_fdThingMagicIDSSL900ASetIDSPassword_NewPasswordLevel,
    &LLRP_fdThingMagicIDSSL900ASetIDSPassword_NewIDSPassword,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetIDSPassword_NewPasswordLevel =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "NewPasswordLevel",
    .pEnumTable         = LLRP_estThingMagicCustomIDSPasswordLevel,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetIDSPassword_NewIDSPassword =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "NewIDSPassword",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSSL900ASetIDSPassword *
LLRP_ThingMagicIDSSL900ASetIDSPassword_construct (void)
{
    LLRP_tSThingMagicIDSSL900ASetIDSPassword *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ASetIDSPassword *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ASetIDSPassword);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ASetIDSPassword_destruct (
  LLRP_tSThingMagicIDSSL900ASetIDSPassword *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ASetIDSPassword_decodeFields (
  LLRP_tSThingMagicIDSSL900ASetIDSPassword *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eNewPasswordLevel =
                (LLRP_tEThingMagicCustomIDSPasswordLevel) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetIDSPassword_NewPasswordLevel);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetIDSPassword_NewPasswordLevel);
    }

    if(NULL != pThis)
    {
        pThis->NewIDSPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetIDSPassword_NewIDSPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetIDSPassword_NewIDSPassword);
    }
    
}

void
LLRP_ThingMagicIDSSL900ASetIDSPassword_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ASetIDSPassword *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ASetIDSPassword))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomIDSPasswordLevel
LLRP_ThingMagicIDSSL900ASetIDSPassword_getNewPasswordLevel (
  LLRP_tSThingMagicIDSSL900ASetIDSPassword *pThis)
{
    return pThis->eNewPasswordLevel;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetIDSPassword_setNewPasswordLevel (
  LLRP_tSThingMagicIDSSL900ASetIDSPassword *pThis,
  LLRP_tEThingMagicCustomIDSPasswordLevel eValue)
{
    pThis->eNewPasswordLevel = eValue;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicIDSSL900ASetIDSPassword_getNewIDSPassword (
  LLRP_tSThingMagicIDSSL900ASetIDSPassword *pThis)
{
    return pThis->NewIDSPassword;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetIDSPassword_setNewIDSPassword (
  LLRP_tSThingMagicIDSSL900ASetIDSPassword *pThis,
  llrp_u32_t Value)
{
    pThis->NewIDSPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900ASetIDSPassword_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900ASetIDSPassword *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetIDSPassword_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900ASetIDSPassword *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetIDSPassword_beginCustom (
  LLRP_tSThingMagicIDSSL900ASetIDSPassword *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetIDSPassword_addCustom (
  LLRP_tSThingMagicIDSSL900ASetIDSPassword *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ASetIDSPassword))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetIDSPassword_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ASetIDSPassword_encode (
  const LLRP_tSThingMagicIDSSL900ASetIDSPassword *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eNewPasswordLevel,
        &LLRP_fdThingMagicIDSSL900ASetIDSPassword_NewPasswordLevel);

    pOps->pfPut_u32(pEncoderStream,
        pThis->NewIDSPassword,
        &LLRP_fdThingMagicIDSSL900ASetIDSPassword_NewIDSPassword);

    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ASetIDSPassword_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ASetPasswordOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ASetPasswordOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSL900ASetPasswordOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 118,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSL900ASetPasswordOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ASetPasswordOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900ASetPasswordOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900ASetPasswordOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetPasswordOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetPasswordOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult *
LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ASetPasswordOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetPasswordOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetPasswordOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetPasswordOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetPasswordOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ASetPasswordOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ASetPasswordOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900ASetPasswordOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900ASetPasswordOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSBatteryLevel
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSBatteryLevel =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSBatteryLevel",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 120,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSBatteryLevel,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSBatteryLevel),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSBatteryLevel_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSBatteryLevel_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSBatteryLevel_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSBatteryLevel_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSBatteryLevel_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSBatteryLevel_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSBatteryLevel[] =
{
  
    &LLRP_fdThingMagicIDSBatteryLevel_reply,
    &LLRP_fdThingMagicIDSBatteryLevel_ADError,
    &LLRP_fdThingMagicIDSBatteryLevel_batteryType,
    &LLRP_fdThingMagicIDSBatteryLevel_batteryValue,
    &LLRP_fdThingMagicIDSBatteryLevel_batteryValueByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSBatteryLevel_reply =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "reply",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSBatteryLevel_ADError =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ADError",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSBatteryLevel_batteryType =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "batteryType",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSBatteryLevel_batteryValue =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "batteryValue",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSBatteryLevel_batteryValueByteStream =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "batteryValueByteStream",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSBatteryLevel *
LLRP_ThingMagicIDSBatteryLevel_construct (void)
{
    LLRP_tSThingMagicIDSBatteryLevel *pNew;

    pNew = (LLRP_tSThingMagicIDSBatteryLevel *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSBatteryLevel);

    return pNew;
}

void
LLRP_ThingMagicIDSBatteryLevel_destruct (
  LLRP_tSThingMagicIDSBatteryLevel *pThis)
{
  
    LLRP_u8v_clear(&pThis->batteryValueByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSBatteryLevel_decodeFields (
  LLRP_tSThingMagicIDSBatteryLevel *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->reply =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSBatteryLevel_reply);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSBatteryLevel_reply);
    }
    
    if(NULL != pThis)
    {
        pThis->ADError =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSBatteryLevel_ADError);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSBatteryLevel_ADError);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

    if(NULL != pThis)
    {
        pThis->batteryType =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSBatteryLevel_batteryType);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSBatteryLevel_batteryType);
    }
    
    if(NULL != pThis)
    {
        pThis->batteryValue =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSBatteryLevel_batteryValue);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSBatteryLevel_batteryValue);
    }
    
    if(NULL != pThis)
    {
        pThis->batteryValueByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicIDSBatteryLevel_batteryValueByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicIDSBatteryLevel_batteryValueByteStream);
    }
    
}

void
LLRP_ThingMagicIDSBatteryLevel_assimilateSubParameters (
  LLRP_tSThingMagicIDSBatteryLevel *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSBatteryLevel))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicIDSBatteryLevel_getreply (
  LLRP_tSThingMagicIDSBatteryLevel *pThis)
{
    return pThis->reply;
}

LLRP_tResultCode
LLRP_ThingMagicIDSBatteryLevel_setreply (
  LLRP_tSThingMagicIDSBatteryLevel *pThis,
  llrp_u16_t Value)
{
    pThis->reply = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSBatteryLevel_getADError (
  LLRP_tSThingMagicIDSBatteryLevel *pThis)
{
    return pThis->ADError;
}

LLRP_tResultCode
LLRP_ThingMagicIDSBatteryLevel_setADError (
  LLRP_tSThingMagicIDSBatteryLevel *pThis,
  llrp_u1_t Value)
{
    pThis->ADError = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSBatteryLevel_getbatteryType (
  LLRP_tSThingMagicIDSBatteryLevel *pThis)
{
    return pThis->batteryType;
}

LLRP_tResultCode
LLRP_ThingMagicIDSBatteryLevel_setbatteryType (
  LLRP_tSThingMagicIDSBatteryLevel *pThis,
  llrp_u8_t Value)
{
    pThis->batteryType = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSBatteryLevel_getbatteryValue (
  LLRP_tSThingMagicIDSBatteryLevel *pThis)
{
    return pThis->batteryValue;
}

LLRP_tResultCode
LLRP_ThingMagicIDSBatteryLevel_setbatteryValue (
  LLRP_tSThingMagicIDSBatteryLevel *pThis,
  llrp_u16_t Value)
{
    pThis->batteryValue = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicIDSBatteryLevel_getbatteryValueByteStream (
  LLRP_tSThingMagicIDSBatteryLevel *pThis)
{
    return pThis->batteryValueByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicIDSBatteryLevel_setbatteryValueByteStream (
  LLRP_tSThingMagicIDSBatteryLevel *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->batteryValueByteStream);

    pThis->batteryValueByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSBatteryLevel_beginCustom (
  LLRP_tSThingMagicIDSBatteryLevel *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSBatteryLevel_addCustom (
  LLRP_tSThingMagicIDSBatteryLevel *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSBatteryLevel))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSBatteryLevel_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSBatteryLevel_encode (
  const LLRP_tSThingMagicIDSBatteryLevel *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->reply,
        &LLRP_fdThingMagicIDSBatteryLevel_reply);

    pOps->pfPut_u1(pEncoderStream,
        pThis->ADError,
        &LLRP_fdThingMagicIDSBatteryLevel_ADError);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pOps->pfPut_u8(pEncoderStream,
        pThis->batteryType,
        &LLRP_fdThingMagicIDSBatteryLevel_batteryType);

    pOps->pfPut_u16(pEncoderStream,
        pThis->batteryValue,
        &LLRP_fdThingMagicIDSBatteryLevel_batteryValue);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->batteryValueByteStream,
        &LLRP_fdThingMagicIDSBatteryLevel_batteryValueByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSBatteryLevel_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSetShelfLife
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSetShelfLife =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSetShelfLife",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 121,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSetShelfLife,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSetShelfLife),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSetShelfLife_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSetShelfLife_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSetShelfLife_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSetShelfLife_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSetShelfLife_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSetShelfLife_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSetShelfLife[] =
{
  
    NULL
};


LLRP_tSThingMagicIDSSetShelfLife *
LLRP_ThingMagicIDSSetShelfLife_construct (void)
{
    LLRP_tSThingMagicIDSSetShelfLife *pNew;

    pNew = (LLRP_tSThingMagicIDSSetShelfLife *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSetShelfLife);

    return pNew;
}

void
LLRP_ThingMagicIDSSetShelfLife_destruct (
  LLRP_tSThingMagicIDSSetShelfLife *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSetShelfLife_decodeFields (
  LLRP_tSThingMagicIDSSetShelfLife *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicIDSSetShelfLife_assimilateSubParameters (
  LLRP_tSThingMagicIDSSetShelfLife *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicIDSSLBlock0
    pType = &LLRP_tdThingMagicIDSSLBlock0;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSLBlock0 = (LLRP_tSThingMagicIDSSLBlock0 *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicIDSSLBlock1
    pType = &LLRP_tdThingMagicIDSSLBlock1;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSLBlock1 = (LLRP_tSThingMagicIDSSLBlock1 *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSetShelfLife))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSetShelfLife_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSetShelfLife *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSetShelfLife_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSetShelfLife *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSSLBlock0 *
LLRP_ThingMagicIDSSetShelfLife_getThingMagicIDSSLBlock0 (
  LLRP_tSThingMagicIDSSetShelfLife *pThis)
{
    return pThis->pThingMagicIDSSLBlock0;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSetShelfLife_setThingMagicIDSSLBlock0 (
  LLRP_tSThingMagicIDSSetShelfLife *pThis,
  LLRP_tSThingMagicIDSSLBlock0 * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSLBlock0, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSSLBlock1 *
LLRP_ThingMagicIDSSetShelfLife_getThingMagicIDSSLBlock1 (
  LLRP_tSThingMagicIDSSetShelfLife *pThis)
{
    return pThis->pThingMagicIDSSLBlock1;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSetShelfLife_setThingMagicIDSSLBlock1 (
  LLRP_tSThingMagicIDSSetShelfLife *pThis,
  LLRP_tSThingMagicIDSSLBlock1 * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSLBlock1, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSetShelfLife_beginCustom (
  LLRP_tSThingMagicIDSSetShelfLife *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSetShelfLife_addCustom (
  LLRP_tSThingMagicIDSSetShelfLife *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSetShelfLife))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSetShelfLife_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSetShelfLife_encode (
  const LLRP_tSThingMagicIDSSetShelfLife *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdThingMagicIDSSLBlock0;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSLBlock0,
        pType);
      
    pType = &LLRP_tdThingMagicIDSSLBlock1;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSLBlock1,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSetShelfLife_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSLBlock0
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSLBlock0 =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSLBlock0",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 122,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSLBlock0,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSLBlock0),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSLBlock0_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSLBlock0_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSLBlock0_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSLBlock0_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSLBlock0_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSLBlock0_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSLBlock0[] =
{
  
    &LLRP_fdThingMagicIDSSLBlock0_raw,
    &LLRP_fdThingMagicIDSSLBlock0_TimeMax,
    &LLRP_fdThingMagicIDSSLBlock0_TimeMin,
    &LLRP_fdThingMagicIDSSLBlock0_TimeStd,
    &LLRP_fdThingMagicIDSSLBlock0_Ea,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSLBlock0_raw =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "raw",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSLBlock0_TimeMax =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "TimeMax",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSLBlock0_TimeMin =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "TimeMin",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSLBlock0_TimeStd =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "TimeStd",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSLBlock0_Ea =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Ea",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSSLBlock0 *
LLRP_ThingMagicIDSSLBlock0_construct (void)
{
    LLRP_tSThingMagicIDSSLBlock0 *pNew;

    pNew = (LLRP_tSThingMagicIDSSLBlock0 *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSLBlock0);

    return pNew;
}

void
LLRP_ThingMagicIDSSLBlock0_destruct (
  LLRP_tSThingMagicIDSSLBlock0 *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSLBlock0_decodeFields (
  LLRP_tSThingMagicIDSSLBlock0 *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->raw =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicIDSSLBlock0_raw);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicIDSSLBlock0_raw);
    }
    
    if(NULL != pThis)
    {
        pThis->TimeMax =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSLBlock0_TimeMax);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSLBlock0_TimeMax);
    }
    
    if(NULL != pThis)
    {
        pThis->TimeMin =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSLBlock0_TimeMin);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSLBlock0_TimeMin);
    }
    
    if(NULL != pThis)
    {
        pThis->TimeStd =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSLBlock0_TimeStd);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSLBlock0_TimeStd);
    }
    
    if(NULL != pThis)
    {
        pThis->Ea =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSLBlock0_Ea);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSLBlock0_Ea);
    }
    
}

void
LLRP_ThingMagicIDSSLBlock0_assimilateSubParameters (
  LLRP_tSThingMagicIDSSLBlock0 *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSLBlock0))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u32_t
LLRP_ThingMagicIDSSLBlock0_getraw (
  LLRP_tSThingMagicIDSSLBlock0 *pThis)
{
    return pThis->raw;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock0_setraw (
  LLRP_tSThingMagicIDSSLBlock0 *pThis,
  llrp_u32_t Value)
{
    pThis->raw = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSLBlock0_getTimeMax (
  LLRP_tSThingMagicIDSSLBlock0 *pThis)
{
    return pThis->TimeMax;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock0_setTimeMax (
  LLRP_tSThingMagicIDSSLBlock0 *pThis,
  llrp_u8_t Value)
{
    pThis->TimeMax = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSLBlock0_getTimeMin (
  LLRP_tSThingMagicIDSSLBlock0 *pThis)
{
    return pThis->TimeMin;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock0_setTimeMin (
  LLRP_tSThingMagicIDSSLBlock0 *pThis,
  llrp_u8_t Value)
{
    pThis->TimeMin = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSLBlock0_getTimeStd (
  LLRP_tSThingMagicIDSSLBlock0 *pThis)
{
    return pThis->TimeStd;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock0_setTimeStd (
  LLRP_tSThingMagicIDSSLBlock0 *pThis,
  llrp_u8_t Value)
{
    pThis->TimeStd = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSLBlock0_getEa (
  LLRP_tSThingMagicIDSSLBlock0 *pThis)
{
    return pThis->Ea;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock0_setEa (
  LLRP_tSThingMagicIDSSLBlock0 *pThis,
  llrp_u8_t Value)
{
    pThis->Ea = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSLBlock0_beginCustom (
  LLRP_tSThingMagicIDSSLBlock0 *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock0_addCustom (
  LLRP_tSThingMagicIDSSLBlock0 *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSLBlock0))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSLBlock0_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSLBlock0_encode (
  const LLRP_tSThingMagicIDSSLBlock0 *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u32(pEncoderStream,
        pThis->raw,
        &LLRP_fdThingMagicIDSSLBlock0_raw);

    pOps->pfPut_u8(pEncoderStream,
        pThis->TimeMax,
        &LLRP_fdThingMagicIDSSLBlock0_TimeMax);

    pOps->pfPut_u8(pEncoderStream,
        pThis->TimeMin,
        &LLRP_fdThingMagicIDSSLBlock0_TimeMin);

    pOps->pfPut_u8(pEncoderStream,
        pThis->TimeStd,
        &LLRP_fdThingMagicIDSSLBlock0_TimeStd);

    pOps->pfPut_u8(pEncoderStream,
        pThis->Ea,
        &LLRP_fdThingMagicIDSSLBlock0_Ea);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSLBlock0_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSLBlock1
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSLBlock1 =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSLBlock1",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 123,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSLBlock1,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSLBlock1),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSLBlock1_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSLBlock1_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSLBlock1_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSLBlock1_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSLBlock1_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSLBlock1_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSLBlock1[] =
{
  
    &LLRP_fdThingMagicIDSSLBlock1_raw,
    &LLRP_fdThingMagicIDSSLBlock1_SLInit,
    &LLRP_fdThingMagicIDSSLBlock1_TInit,
    &LLRP_fdThingMagicIDSSLBlock1_SensorID,
    &LLRP_fdThingMagicIDSSLBlock1_enableNegative,
    &LLRP_fdThingMagicIDSSLBlock1_algorithmEnable,
    &LLRP_fdThingMagicIDSSLBlock1_RFU,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSLBlock1_raw =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "raw",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSLBlock1_SLInit =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "SLInit",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSLBlock1_TInit =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "TInit",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSLBlock1_SensorID =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "SensorID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSLBlock1_enableNegative =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "enableNegative",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSLBlock1_algorithmEnable =
{
    .eFieldType         = LLRP_FT_U1,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "algorithmEnable",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSLBlock1_RFU =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "RFU",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSSLBlock1 *
LLRP_ThingMagicIDSSLBlock1_construct (void)
{
    LLRP_tSThingMagicIDSSLBlock1 *pNew;

    pNew = (LLRP_tSThingMagicIDSSLBlock1 *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSLBlock1);

    return pNew;
}

void
LLRP_ThingMagicIDSSLBlock1_destruct (
  LLRP_tSThingMagicIDSSLBlock1 *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSLBlock1_decodeFields (
  LLRP_tSThingMagicIDSSLBlock1 *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->raw =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicIDSSLBlock1_raw);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicIDSSLBlock1_raw);
    }
    
    if(NULL != pThis)
    {
        pThis->SLInit =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSLBlock1_SLInit);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSLBlock1_SLInit);
    }
    
    if(NULL != pThis)
    {
        pThis->TInit =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSLBlock1_TInit);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSLBlock1_TInit);
    }
    
    if(NULL != pThis)
    {
        pThis->SensorID =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSLBlock1_SensorID);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSLBlock1_SensorID);
    }
    
    if(NULL != pThis)
    {
        pThis->enableNegative =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSSLBlock1_enableNegative);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSSLBlock1_enableNegative);
    }
    
    if(NULL != pThis)
    {
        pThis->algorithmEnable =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSSLBlock1_algorithmEnable);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSSLBlock1_algorithmEnable);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 6);

    if(NULL != pThis)
    {
        pThis->RFU =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSLBlock1_RFU);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSLBlock1_RFU);
    }
    
}

void
LLRP_ThingMagicIDSSLBlock1_assimilateSubParameters (
  LLRP_tSThingMagicIDSSLBlock1 *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSLBlock1))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u32_t
LLRP_ThingMagicIDSSLBlock1_getraw (
  LLRP_tSThingMagicIDSSLBlock1 *pThis)
{
    return pThis->raw;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock1_setraw (
  LLRP_tSThingMagicIDSSLBlock1 *pThis,
  llrp_u32_t Value)
{
    pThis->raw = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSLBlock1_getSLInit (
  LLRP_tSThingMagicIDSSLBlock1 *pThis)
{
    return pThis->SLInit;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock1_setSLInit (
  LLRP_tSThingMagicIDSSLBlock1 *pThis,
  llrp_u16_t Value)
{
    pThis->SLInit = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSLBlock1_getTInit (
  LLRP_tSThingMagicIDSSLBlock1 *pThis)
{
    return pThis->TInit;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock1_setTInit (
  LLRP_tSThingMagicIDSSLBlock1 *pThis,
  llrp_u16_t Value)
{
    pThis->TInit = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSLBlock1_getSensorID (
  LLRP_tSThingMagicIDSSLBlock1 *pThis)
{
    return pThis->SensorID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock1_setSensorID (
  LLRP_tSThingMagicIDSSLBlock1 *pThis,
  llrp_u8_t Value)
{
    pThis->SensorID = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSSLBlock1_getenableNegative (
  LLRP_tSThingMagicIDSSLBlock1 *pThis)
{
    return pThis->enableNegative;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock1_setenableNegative (
  LLRP_tSThingMagicIDSSLBlock1 *pThis,
  llrp_u1_t Value)
{
    pThis->enableNegative = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSSLBlock1_getalgorithmEnable (
  LLRP_tSThingMagicIDSSLBlock1 *pThis)
{
    return pThis->algorithmEnable;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock1_setalgorithmEnable (
  LLRP_tSThingMagicIDSSLBlock1 *pThis,
  llrp_u1_t Value)
{
    pThis->algorithmEnable = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSLBlock1_getRFU (
  LLRP_tSThingMagicIDSSLBlock1 *pThis)
{
    return pThis->RFU;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock1_setRFU (
  LLRP_tSThingMagicIDSSLBlock1 *pThis,
  llrp_u8_t Value)
{
    pThis->RFU = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSLBlock1_beginCustom (
  LLRP_tSThingMagicIDSSLBlock1 *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock1_addCustom (
  LLRP_tSThingMagicIDSSLBlock1 *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSLBlock1))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSLBlock1_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSLBlock1_encode (
  const LLRP_tSThingMagicIDSSLBlock1 *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u32(pEncoderStream,
        pThis->raw,
        &LLRP_fdThingMagicIDSSLBlock1_raw);

    pOps->pfPut_u16(pEncoderStream,
        pThis->SLInit,
        &LLRP_fdThingMagicIDSSLBlock1_SLInit);

    pOps->pfPut_u16(pEncoderStream,
        pThis->TInit,
        &LLRP_fdThingMagicIDSSLBlock1_TInit);

    pOps->pfPut_u8(pEncoderStream,
        pThis->SensorID,
        &LLRP_fdThingMagicIDSSLBlock1_SensorID);

    pOps->pfPut_u1(pEncoderStream,
        pThis->enableNegative,
        &LLRP_fdThingMagicIDSSLBlock1_enableNegative);

    pOps->pfPut_u1(pEncoderStream,
        pThis->algorithmEnable,
        &LLRP_fdThingMagicIDSSLBlock1_algorithmEnable);

    pOps->pfPut_reserved(pEncoderStream, 6);

    pOps->pfPut_u8(pEncoderStream,
        pThis->RFU,
        &LLRP_fdThingMagicIDSSLBlock1_RFU);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSLBlock1_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSetShelfLifeOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSetShelfLifeOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicIDSSetShelfLifeOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 124,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicIDSSetShelfLifeOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSetShelfLifeOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSetShelfLifeOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSetShelfLifeOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSetShelfLifeOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSetShelfLifeOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult *
LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSetShelfLifeOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSetShelfLifeOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSetShelfLifeOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSetShelfLifeOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSetShelfLifeOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSetShelfLifeOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSetShelfLifeOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSetShelfLifeOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSetShelfLifeOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicHopTime
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicHopTime =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicHopTime",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 125,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicHopTime,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicHopTime),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicHopTime_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicHopTime_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicHopTime_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicHopTime_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicHopTime_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicHopTime_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicHopTime[] =
{
  
    &LLRP_fdThingMagicHopTime_HopTime,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHopTime_HopTime =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "HopTime",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicHopTime *
LLRP_ThingMagicHopTime_construct (void)
{
    LLRP_tSThingMagicHopTime *pNew;

    pNew = (LLRP_tSThingMagicHopTime *)
        LLRP_Element_construct(&LLRP_tdThingMagicHopTime);

    return pNew;
}

void
LLRP_ThingMagicHopTime_destruct (
  LLRP_tSThingMagicHopTime *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicHopTime_decodeFields (
  LLRP_tSThingMagicHopTime *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->HopTime =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHopTime_HopTime);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHopTime_HopTime);
    }
    
}

void
LLRP_ThingMagicHopTime_assimilateSubParameters (
  LLRP_tSThingMagicHopTime *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicHopTime))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u32_t
LLRP_ThingMagicHopTime_getHopTime (
  LLRP_tSThingMagicHopTime *pThis)
{
    return pThis->HopTime;
}

LLRP_tResultCode
LLRP_ThingMagicHopTime_setHopTime (
  LLRP_tSThingMagicHopTime *pThis,
  llrp_u32_t Value)
{
    pThis->HopTime = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicHopTime_beginCustom (
  LLRP_tSThingMagicHopTime *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicHopTime_addCustom (
  LLRP_tSThingMagicHopTime *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicHopTime))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicHopTime_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicHopTime_encode (
  const LLRP_tSThingMagicHopTime *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u32(pEncoderStream,
        pThis->HopTime,
        &LLRP_fdThingMagicHopTime_HopTime);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicHopTime_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVActivateSecureMode
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVActivateSecureMode =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicDenatranIAVActivateSecureMode",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 126,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicDenatranIAVActivateSecureMode,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicDenatranIAVActivateSecureMode),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVActivateSecureMode_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVActivateSecureMode_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVActivateSecureMode_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVActivateSecureMode_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVActivateSecureMode_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicDenatranIAVActivateSecureMode_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVActivateSecureMode[] =
{
  
    NULL
};


LLRP_tSThingMagicDenatranIAVActivateSecureMode *
LLRP_ThingMagicDenatranIAVActivateSecureMode_construct (void)
{
    LLRP_tSThingMagicDenatranIAVActivateSecureMode *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVActivateSecureMode *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVActivateSecureMode);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVActivateSecureMode_destruct (
  LLRP_tSThingMagicDenatranIAVActivateSecureMode *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVActivateSecureMode_decodeFields (
  LLRP_tSThingMagicDenatranIAVActivateSecureMode *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicDenatranIAVActivateSecureMode_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVActivateSecureMode *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicDenatranIAVCommandRequest
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicDenatranIAVCommandRequest = (LLRP_tSThingMagicDenatranIAVCommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVActivateSecureMode))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicDenatranIAVCommandRequest *
LLRP_ThingMagicDenatranIAVActivateSecureMode_getThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVActivateSecureMode *pThis)
{
    return pThis->pThingMagicDenatranIAVCommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVActivateSecureMode_setThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVActivateSecureMode *pThis,
  LLRP_tSThingMagicDenatranIAVCommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicDenatranIAVCommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVActivateSecureMode_beginCustom (
  LLRP_tSThingMagicDenatranIAVActivateSecureMode *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVActivateSecureMode_addCustom (
  LLRP_tSThingMagicDenatranIAVActivateSecureMode *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVActivateSecureMode))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVActivateSecureMode_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVActivateSecureMode_encode (
  const LLRP_tSThingMagicDenatranIAVActivateSecureMode *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicDenatranIAVCommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVActivateSecureMode_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVActivateSecureModeOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVActivateSecureModeOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicDenatranIAVActivateSecureModeOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 127,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicDenatranIAVActivateSecureModeOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVActivateSecureModeOpSpecResult[] =
{
  
    &LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_Result,
    &LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_ActivateSecureModeByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_ActivateSecureModeByteStream =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ActivateSecureModeByteStream",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_construct (void)
{
    LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVActivateSecureModeOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_destruct (
  LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->ActivateSecureModeByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_decodeFields (
  LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->ActivateSecureModeByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_ActivateSecureModeByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_ActivateSecureModeByteStream);
    }
    
}

void
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVActivateSecureModeOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_getResult (
  LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_setResult (
  LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_getActivateSecureModeByteStream (
  LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *pThis)
{
    return pThis->ActivateSecureModeByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_setActivateSecureModeByteStream (
  LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->ActivateSecureModeByteStream);

    pThis->ActivateSecureModeByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_beginCustom (
  LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_addCustom (
  LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVActivateSecureModeOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_encode (
  const LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->ActivateSecureModeByteStream,
        &LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_ActivateSecureModeByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVAuthenticateOBU
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVAuthenticateOBU =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicDenatranIAVAuthenticateOBU",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 128,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicDenatranIAVAuthenticateOBU,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicDenatranIAVAuthenticateOBU),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVAuthenticateOBU_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVAuthenticateOBU_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVAuthenticateOBU_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVAuthenticateOBU_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVAuthenticateOBU_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicDenatranIAVAuthenticateOBU_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVAuthenticateOBU[] =
{
  
    NULL
};


LLRP_tSThingMagicDenatranIAVAuthenticateOBU *
LLRP_ThingMagicDenatranIAVAuthenticateOBU_construct (void)
{
    LLRP_tSThingMagicDenatranIAVAuthenticateOBU *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVAuthenticateOBU *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVAuthenticateOBU);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVAuthenticateOBU_destruct (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBU *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVAuthenticateOBU_decodeFields (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBU *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicDenatranIAVAuthenticateOBU_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBU *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicDenatranIAVCommandRequest
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicDenatranIAVCommandRequest = (LLRP_tSThingMagicDenatranIAVCommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVAuthenticateOBU))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicDenatranIAVCommandRequest *
LLRP_ThingMagicDenatranIAVAuthenticateOBU_getThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBU *pThis)
{
    return pThis->pThingMagicDenatranIAVCommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVAuthenticateOBU_setThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBU *pThis,
  LLRP_tSThingMagicDenatranIAVCommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicDenatranIAVCommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVAuthenticateOBU_beginCustom (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBU *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVAuthenticateOBU_addCustom (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBU *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVAuthenticateOBU))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVAuthenticateOBU_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVAuthenticateOBU_encode (
  const LLRP_tSThingMagicDenatranIAVAuthenticateOBU *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicDenatranIAVCommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVAuthenticateOBU_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVAuthenticateOBUOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVAuthenticateOBUOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicDenatranIAVAuthenticateOBUOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 129,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicDenatranIAVAuthenticateOBUOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVAuthenticateOBUOpSpecResult[] =
{
  
    &LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_Result,
    &LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_AuthenitcateOBUByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_AuthenitcateOBUByteStream =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AuthenitcateOBUByteStream",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_construct (void)
{
    LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVAuthenticateOBUOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_destruct (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->AuthenitcateOBUByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_decodeFields (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AuthenitcateOBUByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_AuthenitcateOBUByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_AuthenitcateOBUByteStream);
    }
    
}

void
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVAuthenticateOBUOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_getResult (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_setResult (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_getAuthenitcateOBUByteStream (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *pThis)
{
    return pThis->AuthenitcateOBUByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_setAuthenitcateOBUByteStream (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->AuthenitcateOBUByteStream);

    pThis->AuthenitcateOBUByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_beginCustom (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_addCustom (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVAuthenticateOBUOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_encode (
  const LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->AuthenitcateOBUByteStream,
        &LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_AuthenitcateOBUByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVActivateSiniavMode
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVActivateSiniavMode =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicDenatranIAVActivateSiniavMode",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 130,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicDenatranIAVActivateSiniavMode,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicDenatranIAVActivateSiniavMode),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVActivateSiniavMode_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVActivateSiniavMode_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVActivateSiniavMode_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVActivateSiniavMode_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVActivateSiniavMode_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicDenatranIAVActivateSiniavMode_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVActivateSiniavMode[] =
{
  
    &LLRP_fdThingMagicDenatranIAVActivateSiniavMode_tokenData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVActivateSiniavMode_tokenData =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "tokenData",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicDenatranIAVActivateSiniavMode *
LLRP_ThingMagicDenatranIAVActivateSiniavMode_construct (void)
{
    LLRP_tSThingMagicDenatranIAVActivateSiniavMode *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVActivateSiniavMode *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVActivateSiniavMode);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVActivateSiniavMode_destruct (
  LLRP_tSThingMagicDenatranIAVActivateSiniavMode *pThis)
{
  
    LLRP_u8v_clear(&pThis->tokenData);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVActivateSiniavMode_decodeFields (
  LLRP_tSThingMagicDenatranIAVActivateSiniavMode *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->tokenData =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVActivateSiniavMode_tokenData);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVActivateSiniavMode_tokenData);
    }
    
}

void
LLRP_ThingMagicDenatranIAVActivateSiniavMode_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVActivateSiniavMode *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicDenatranIAVCommandRequest
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicDenatranIAVCommandRequest = (LLRP_tSThingMagicDenatranIAVCommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVActivateSiniavMode))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8v_t
LLRP_ThingMagicDenatranIAVActivateSiniavMode_gettokenData (
  LLRP_tSThingMagicDenatranIAVActivateSiniavMode *pThis)
{
    return pThis->tokenData;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVActivateSiniavMode_settokenData (
  LLRP_tSThingMagicDenatranIAVActivateSiniavMode *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->tokenData);

    pThis->tokenData = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicDenatranIAVCommandRequest *
LLRP_ThingMagicDenatranIAVActivateSiniavMode_getThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVActivateSiniavMode *pThis)
{
    return pThis->pThingMagicDenatranIAVCommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVActivateSiniavMode_setThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVActivateSiniavMode *pThis,
  LLRP_tSThingMagicDenatranIAVCommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicDenatranIAVCommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVActivateSiniavMode_beginCustom (
  LLRP_tSThingMagicDenatranIAVActivateSiniavMode *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVActivateSiniavMode_addCustom (
  LLRP_tSThingMagicDenatranIAVActivateSiniavMode *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVActivateSiniavMode))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVActivateSiniavMode_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVActivateSiniavMode_encode (
  const LLRP_tSThingMagicDenatranIAVActivateSiniavMode *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8v(pEncoderStream,
        pThis->tokenData,
        &LLRP_fdThingMagicDenatranIAVActivateSiniavMode_tokenData);

    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicDenatranIAVCommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVActivateSiniavMode_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVActivateSiniavModeOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVActivateSiniavModeOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicDenatranIAVActivateSiniavModeOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 131,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicDenatranIAVActivateSiniavModeOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVActivateSiniavModeOpSpecResult[] =
{
  
    &LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_Result,
    &LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_ActivateSiniavModeByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_ActivateSiniavModeByteStream =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ActivateSiniavModeByteStream",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_construct (void)
{
    LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVActivateSiniavModeOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_destruct (
  LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->ActivateSiniavModeByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_decodeFields (
  LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->ActivateSiniavModeByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_ActivateSiniavModeByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_ActivateSiniavModeByteStream);
    }
    
}

void
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVActivateSiniavModeOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_getResult (
  LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_setResult (
  LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_getActivateSiniavModeByteStream (
  LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *pThis)
{
    return pThis->ActivateSiniavModeByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_setActivateSiniavModeByteStream (
  LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->ActivateSiniavModeByteStream);

    pThis->ActivateSiniavModeByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_beginCustom (
  LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_addCustom (
  LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVActivateSiniavModeOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_encode (
  const LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->ActivateSiniavModeByteStream,
        &LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_ActivateSiniavModeByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVOBUAuthenticateID
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVOBUAuthenticateID =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicDenatranIAVOBUAuthenticateID",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 132,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicDenatranIAVOBUAuthenticateID,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicDenatranIAVOBUAuthenticateID),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVOBUAuthenticateID_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVOBUAuthenticateID_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateID_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateID_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateID_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicDenatranIAVOBUAuthenticateID_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVOBUAuthenticateID[] =
{
  
    NULL
};


LLRP_tSThingMagicDenatranIAVOBUAuthenticateID *
LLRP_ThingMagicDenatranIAVOBUAuthenticateID_construct (void)
{
    LLRP_tSThingMagicDenatranIAVOBUAuthenticateID *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVOBUAuthenticateID *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVOBUAuthenticateID);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateID_destruct (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateID *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateID_decodeFields (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateID *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateID_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateID *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicDenatranIAVCommandRequest
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicDenatranIAVCommandRequest = (LLRP_tSThingMagicDenatranIAVCommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVOBUAuthenticateID))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicDenatranIAVCommandRequest *
LLRP_ThingMagicDenatranIAVOBUAuthenticateID_getThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateID *pThis)
{
    return pThis->pThingMagicDenatranIAVCommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateID_setThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateID *pThis,
  LLRP_tSThingMagicDenatranIAVCommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicDenatranIAVCommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthenticateID_beginCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateID *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateID_addCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateID *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVOBUAuthenticateID))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthenticateID_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVOBUAuthenticateID_encode (
  const LLRP_tSThingMagicDenatranIAVOBUAuthenticateID *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicDenatranIAVCommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVOBUAuthenticateID_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 133,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult[] =
{
  
    &LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_Result,
    &LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_OBUAuthenticateIDByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_OBUAuthenticateIDByteStream =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OBUAuthenticateIDByteStream",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_construct (void)
{
    LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_destruct (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->OBUAuthenticateIDByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_decodeFields (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->OBUAuthenticateIDByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_OBUAuthenticateIDByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_OBUAuthenticateIDByteStream);
    }
    
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_getResult (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_setResult (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_getOBUAuthenticateIDByteStream (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *pThis)
{
    return pThis->OBUAuthenticateIDByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_setOBUAuthenticateIDByteStream (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->OBUAuthenticateIDByteStream);

    pThis->OBUAuthenticateIDByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_beginCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_addCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_encode (
  const LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->OBUAuthenticateIDByteStream,
        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_OBUAuthenticateIDByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVOBUAuthenticateFullPass1
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass1 =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicDenatranIAVOBUAuthenticateFullPass1",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 134,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicDenatranIAVOBUAuthenticateFullPass1,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVOBUAuthenticateFullPass1[] =
{
  
    NULL
};


LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1 *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_construct (void)
{
    LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1 *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1 *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass1);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_destruct (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1 *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_decodeFields (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1 *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1 *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicDenatranIAVCommandRequest
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicDenatranIAVCommandRequest = (LLRP_tSThingMagicDenatranIAVCommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass1))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicDenatranIAVCommandRequest *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_getThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1 *pThis)
{
    return pThis->pThingMagicDenatranIAVCommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_setThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1 *pThis,
  LLRP_tSThingMagicDenatranIAVCommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicDenatranIAVCommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_beginCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1 *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_addCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1 *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass1))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_encode (
  const LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1 *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicDenatranIAVCommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 135,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult[] =
{
  
    &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_Result,
    &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_OpSpecID,
    &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_OBUAuthenticateFullPass1ByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_OBUAuthenticateFullPass1ByteStream =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OBUAuthenticateFullPass1ByteStream",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_construct (void)
{
    LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_destruct (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->OBUAuthenticateFullPass1ByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_decodeFields (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->OBUAuthenticateFullPass1ByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_OBUAuthenticateFullPass1ByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_OBUAuthenticateFullPass1ByteStream);
    }
    
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_getResult (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_setResult (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_getOpSpecID (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_setOpSpecID (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_getOBUAuthenticateFullPass1ByteStream (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *pThis)
{
    return pThis->OBUAuthenticateFullPass1ByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_setOBUAuthenticateFullPass1ByteStream (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->OBUAuthenticateFullPass1ByteStream);

    pThis->OBUAuthenticateFullPass1ByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_beginCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_addCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_encode (
  const LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->OBUAuthenticateFullPass1ByteStream,
        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_OBUAuthenticateFullPass1ByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVOBUAuthenticateFullPass2
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass2 =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicDenatranIAVOBUAuthenticateFullPass2",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 136,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicDenatranIAVOBUAuthenticateFullPass2,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVOBUAuthenticateFullPass2[] =
{
  
    NULL
};


LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2 *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_construct (void)
{
    LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2 *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2 *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass2);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_destruct (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2 *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_decodeFields (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2 *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2 *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicDenatranIAVCommandRequest
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicDenatranIAVCommandRequest = (LLRP_tSThingMagicDenatranIAVCommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass2))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicDenatranIAVCommandRequest *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_getThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2 *pThis)
{
    return pThis->pThingMagicDenatranIAVCommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_setThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2 *pThis,
  LLRP_tSThingMagicDenatranIAVCommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicDenatranIAVCommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_beginCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2 *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_addCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2 *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass2))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_encode (
  const LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2 *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicDenatranIAVCommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 137,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult[] =
{
  
    &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_Result,
    &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_OpSpecID,
    &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_OBUAuthenticateFullPass2ByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_OBUAuthenticateFullPass2ByteStream =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OBUAuthenticateFullPass2ByteStream",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_construct (void)
{
    LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_destruct (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->OBUAuthenticateFullPass2ByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_decodeFields (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->OBUAuthenticateFullPass2ByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_OBUAuthenticateFullPass2ByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_OBUAuthenticateFullPass2ByteStream);
    }
    
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_getResult (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_setResult (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_getOpSpecID (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_setOpSpecID (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_getOBUAuthenticateFullPass2ByteStream (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *pThis)
{
    return pThis->OBUAuthenticateFullPass2ByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_setOBUAuthenticateFullPass2ByteStream (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->OBUAuthenticateFullPass2ByteStream);

    pThis->OBUAuthenticateFullPass2ByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_beginCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_addCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_encode (
  const LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->OBUAuthenticateFullPass2ByteStream,
        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_OBUAuthenticateFullPass2ByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVOBUReadFromMemMap
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVOBUReadFromMemMap =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicDenatranIAVOBUReadFromMemMap",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 138,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicDenatranIAVOBUReadFromMemMap,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVOBUReadFromMemMap[] =
{
  
    &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMap_ReadPtr,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUReadFromMemMap_ReadPtr =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ReadPtr",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap *
LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_construct (void)
{
    LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVOBUReadFromMemMap);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_destruct (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_decodeFields (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->ReadPtr =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMap_ReadPtr);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMap_ReadPtr);
    }
    
}

void
LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicDenatranIAVCommandRequest
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicDenatranIAVCommandRequest = (LLRP_tSThingMagicDenatranIAVCommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVOBUReadFromMemMap))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_getReadPtr (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap *pThis)
{
    return pThis->ReadPtr;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_setReadPtr (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap *pThis,
  llrp_u16_t Value)
{
    pThis->ReadPtr = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicDenatranIAVCommandRequest *
LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_getThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap *pThis)
{
    return pThis->pThingMagicDenatranIAVCommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_setThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap *pThis,
  LLRP_tSThingMagicDenatranIAVCommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicDenatranIAVCommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_beginCustom (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_addCustom (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVOBUReadFromMemMap))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_encode (
  const LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->ReadPtr,
        &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMap_ReadPtr);

    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicDenatranIAVCommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 139,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult[] =
{
  
    &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_Result,
    &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_OBUReadMemoryMapByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_OBUReadMemoryMapByteStream =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OBUReadMemoryMapByteStream",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_construct (void)
{
    LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_destruct (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->OBUReadMemoryMapByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_decodeFields (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->OBUReadMemoryMapByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_OBUReadMemoryMapByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_OBUReadMemoryMapByteStream);
    }
    
}

void
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_getResult (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_setResult (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_getOBUReadMemoryMapByteStream (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *pThis)
{
    return pThis->OBUReadMemoryMapByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_setOBUReadMemoryMapByteStream (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->OBUReadMemoryMapByteStream);

    pThis->OBUReadMemoryMapByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_beginCustom (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_addCustom (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_encode (
  const LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->OBUReadMemoryMapByteStream,
        &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_OBUReadMemoryMapByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVOBUWriteToMemMap
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVOBUWriteToMemMap =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicDenatranIAVOBUWriteToMemMap",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 140,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicDenatranIAVOBUWriteToMemMap,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVOBUWriteToMemMap[] =
{
  
    &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_WritePtr,
    &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_WordData,
    &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_TagIdentification,
    &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_DataBuf,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_WritePtr =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "WritePtr",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_WordData =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "WordData",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_TagIdentification =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "TagIdentification",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_DataBuf =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "DataBuf",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_construct (void)
{
    LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVOBUWriteToMemMap);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_destruct (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis)
{
  
    LLRP_u8v_clear(&pThis->TagIdentification);
      
    LLRP_u8v_clear(&pThis->DataBuf);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_decodeFields (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->WritePtr =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_WritePtr);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_WritePtr);
    }
    
    if(NULL != pThis)
    {
        pThis->WordData =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_WordData);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_WordData);
    }
    
    if(NULL != pThis)
    {
        pThis->TagIdentification =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_TagIdentification);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_TagIdentification);
    }
    
    if(NULL != pThis)
    {
        pThis->DataBuf =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_DataBuf);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_DataBuf);
    }
    
}

void
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicDenatranIAVCommandRequest
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicDenatranIAVCommandRequest = (LLRP_tSThingMagicDenatranIAVCommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVOBUWriteToMemMap))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_getWritePtr (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis)
{
    return pThis->WritePtr;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_setWritePtr (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis,
  llrp_u16_t Value)
{
    pThis->WritePtr = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_getWordData (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis)
{
    return pThis->WordData;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_setWordData (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis,
  llrp_u16_t Value)
{
    pThis->WordData = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_getTagIdentification (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis)
{
    return pThis->TagIdentification;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_setTagIdentification (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->TagIdentification);

    pThis->TagIdentification = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_getDataBuf (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis)
{
    return pThis->DataBuf;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_setDataBuf (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->DataBuf);

    pThis->DataBuf = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicDenatranIAVCommandRequest *
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_getThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis)
{
    return pThis->pThingMagicDenatranIAVCommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_setThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis,
  LLRP_tSThingMagicDenatranIAVCommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicDenatranIAVCommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_beginCustom (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_addCustom (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVOBUWriteToMemMap))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_encode (
  const LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->WritePtr,
        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_WritePtr);

    pOps->pfPut_u16(pEncoderStream,
        pThis->WordData,
        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_WordData);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->TagIdentification,
        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_TagIdentification);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->DataBuf,
        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_DataBuf);

    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicDenatranIAVCommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 141,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult[] =
{
  
    &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_Result,
    &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_OBUWriteMemoryMapByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_Result =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Result",
    .pEnumTable         = LLRP_estThingMagicCustomTagOpSpecResultType,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_OBUWriteMemoryMapByteStream =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OBUWriteMemoryMapByteStream",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_construct (void)
{
    LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_destruct (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->OBUWriteMemoryMapByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_decodeFields (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->OBUWriteMemoryMapByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_OBUWriteMemoryMapByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_OBUWriteMemoryMapByteStream);
    }
    
}

void
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_getResult (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_setResult (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_getOBUWriteMemoryMapByteStream (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *pThis)
{
    return pThis->OBUWriteMemoryMapByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_setOBUWriteMemoryMapByteStream (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->OBUWriteMemoryMapByteStream);

    pThis->OBUWriteMemoryMapByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_beginCustom (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_addCustom (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_encode (
  const LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->OBUWriteMemoryMapByteStream,
        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_OBUWriteMemoryMapByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVCommandRequest
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVCommandRequest =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicDenatranIAVCommandRequest",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 201,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicDenatranIAVCommandRequest,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicDenatranIAVCommandRequest),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVCommandRequest_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVCommandRequest_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVCommandRequest_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVCommandRequest_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVCommandRequest_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicDenatranIAVCommandRequest_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVCommandRequest[] =
{
  
    &LLRP_fdThingMagicDenatranIAVCommandRequest_OpSpecID,
    &LLRP_fdThingMagicDenatranIAVCommandRequest_PayLoad,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVCommandRequest_OpSpecID =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "OpSpecID",
    .pEnumTable         = NULL,
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVCommandRequest_PayLoad =
{
    .eFieldType         = LLRP_FT_U8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "PayLoad",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicDenatranIAVCommandRequest *
LLRP_ThingMagicDenatranIAVCommandRequest_construct (void)
{
    LLRP_tSThingMagicDenatranIAVCommandRequest *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVCommandRequest *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVCommandRequest);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVCommandRequest_destruct (
  LLRP_tSThingMagicDenatranIAVCommandRequest *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVCommandRequest_decodeFields (
  LLRP_tSThingMagicDenatranIAVCommandRequest *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVCommandRequest_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVCommandRequest_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->PayLoad =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVCommandRequest_PayLoad);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVCommandRequest_PayLoad);
    }
    
}

void
LLRP_ThingMagicDenatranIAVCommandRequest_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVCommandRequest *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVCommandRequest))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicDenatranIAVCommandRequest_getOpSpecID (
  LLRP_tSThingMagicDenatranIAVCommandRequest *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVCommandRequest_setOpSpecID (
  LLRP_tSThingMagicDenatranIAVCommandRequest *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicDenatranIAVCommandRequest_getPayLoad (
  LLRP_tSThingMagicDenatranIAVCommandRequest *pThis)
{
    return pThis->PayLoad;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVCommandRequest_setPayLoad (
  LLRP_tSThingMagicDenatranIAVCommandRequest *pThis,
  llrp_u8_t Value)
{
    pThis->PayLoad = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVCommandRequest_beginCustom (
  LLRP_tSThingMagicDenatranIAVCommandRequest *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVCommandRequest_addCustom (
  LLRP_tSThingMagicDenatranIAVCommandRequest *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVCommandRequest))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVCommandRequest_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVCommandRequest_encode (
  const LLRP_tSThingMagicDenatranIAVCommandRequest *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicDenatranIAVCommandRequest_OpSpecID);

    pOps->pfPut_u8(pEncoderStream,
        pThis->PayLoad,
        &LLRP_fdThingMagicDenatranIAVCommandRequest_PayLoad);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVCommandRequest_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicTagReportContentSelector
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicTagReportContentSelector =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicTagReportContentSelector",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 142,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicTagReportContentSelector,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicTagReportContentSelector),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicTagReportContentSelector_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicTagReportContentSelector_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicTagReportContentSelector_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicTagReportContentSelector_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicTagReportContentSelector_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicTagReportContentSelector_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicTagReportContentSelector[] =
{
  
    &LLRP_fdThingMagicTagReportContentSelector_PhaseMode,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicTagReportContentSelector_PhaseMode =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "PhaseMode",
    .pEnumTable         = LLRP_estThingMagicPhaseMode,
};

LLRP_tSThingMagicTagReportContentSelector *
LLRP_ThingMagicTagReportContentSelector_construct (void)
{
    LLRP_tSThingMagicTagReportContentSelector *pNew;

    pNew = (LLRP_tSThingMagicTagReportContentSelector *)
        LLRP_Element_construct(&LLRP_tdThingMagicTagReportContentSelector);

    return pNew;
}

void
LLRP_ThingMagicTagReportContentSelector_destruct (
  LLRP_tSThingMagicTagReportContentSelector *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicTagReportContentSelector_decodeFields (
  LLRP_tSThingMagicTagReportContentSelector *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->ePhaseMode =
                (LLRP_tEThingMagicPhaseMode) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicTagReportContentSelector_PhaseMode);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicTagReportContentSelector_PhaseMode);
    }

}

void
LLRP_ThingMagicTagReportContentSelector_assimilateSubParameters (
  LLRP_tSThingMagicTagReportContentSelector *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicTagReportContentSelector))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicPhaseMode
LLRP_ThingMagicTagReportContentSelector_getPhaseMode (
  LLRP_tSThingMagicTagReportContentSelector *pThis)
{
    return pThis->ePhaseMode;
}

LLRP_tResultCode
LLRP_ThingMagicTagReportContentSelector_setPhaseMode (
  LLRP_tSThingMagicTagReportContentSelector *pThis,
  LLRP_tEThingMagicPhaseMode eValue)
{
    pThis->ePhaseMode = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicTagReportContentSelector_beginCustom (
  LLRP_tSThingMagicTagReportContentSelector *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicTagReportContentSelector_addCustom (
  LLRP_tSThingMagicTagReportContentSelector *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicTagReportContentSelector))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicTagReportContentSelector_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicTagReportContentSelector_encode (
  const LLRP_tSThingMagicTagReportContentSelector *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->ePhaseMode,
        &LLRP_fdThingMagicTagReportContentSelector_PhaseMode);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicTagReportContentSelector_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdROReportSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicRFPhase
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicRFPhase =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicRFPhase",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 143,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicRFPhase,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicRFPhase),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicRFPhase_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicRFPhase_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicRFPhase_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicRFPhase_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicRFPhase_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicRFPhase_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicRFPhase[] =
{
  
    &LLRP_fdThingMagicRFPhase_Phase,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicRFPhase_Phase =
{
    .eFieldType         = LLRP_FT_U16,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "Phase",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicRFPhase *
LLRP_ThingMagicRFPhase_construct (void)
{
    LLRP_tSThingMagicRFPhase *pNew;

    pNew = (LLRP_tSThingMagicRFPhase *)
        LLRP_Element_construct(&LLRP_tdThingMagicRFPhase);

    return pNew;
}

void
LLRP_ThingMagicRFPhase_destruct (
  LLRP_tSThingMagicRFPhase *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicRFPhase_decodeFields (
  LLRP_tSThingMagicRFPhase *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->Phase =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicRFPhase_Phase);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicRFPhase_Phase);
    }
    
}

void
LLRP_ThingMagicRFPhase_assimilateSubParameters (
  LLRP_tSThingMagicRFPhase *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicRFPhase))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicRFPhase_getPhase (
  LLRP_tSThingMagicRFPhase *pThis)
{
    return pThis->Phase;
}

LLRP_tResultCode
LLRP_ThingMagicRFPhase_setPhase (
  LLRP_tSThingMagicRFPhase *pThis,
  llrp_u16_t Value)
{
    pThis->Phase = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicRFPhase_beginCustom (
  LLRP_tSThingMagicRFPhase *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicRFPhase_addCustom (
  LLRP_tSThingMagicRFPhase *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicRFPhase))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicRFPhase_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicRFPhase_encode (
  const LLRP_tSThingMagicRFPhase *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->Phase,
        &LLRP_fdThingMagicRFPhase_Phase);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicRFPhase_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdTagReportData)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicFastSearchMode
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicFastSearchMode =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicFastSearchMode",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 144,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicFastSearchMode,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicFastSearchMode),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicFastSearchMode_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicFastSearchMode_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicFastSearchMode_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicFastSearchMode_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicFastSearchMode_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicFastSearchMode_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicFastSearchMode[] =
{
  
    &LLRP_fdThingMagicFastSearchMode_ThingMagicFastSearch,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicFastSearchMode_ThingMagicFastSearch =
{
    .eFieldType         = LLRP_FT_E8,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "ThingMagicFastSearch",
    .pEnumTable         = LLRP_estThingMagicFastSearchValue,
};

LLRP_tSThingMagicFastSearchMode *
LLRP_ThingMagicFastSearchMode_construct (void)
{
    LLRP_tSThingMagicFastSearchMode *pNew;

    pNew = (LLRP_tSThingMagicFastSearchMode *)
        LLRP_Element_construct(&LLRP_tdThingMagicFastSearchMode);

    return pNew;
}

void
LLRP_ThingMagicFastSearchMode_destruct (
  LLRP_tSThingMagicFastSearchMode *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicFastSearchMode_decodeFields (
  LLRP_tSThingMagicFastSearchMode *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eThingMagicFastSearch =
                (LLRP_tEThingMagicFastSearchValue) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicFastSearchMode_ThingMagicFastSearch);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicFastSearchMode_ThingMagicFastSearch);
    }

}

void
LLRP_ThingMagicFastSearchMode_assimilateSubParameters (
  LLRP_tSThingMagicFastSearchMode *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicFastSearchMode))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicFastSearchValue
LLRP_ThingMagicFastSearchMode_getThingMagicFastSearch (
  LLRP_tSThingMagicFastSearchMode *pThis)
{
    return pThis->eThingMagicFastSearch;
}

LLRP_tResultCode
LLRP_ThingMagicFastSearchMode_setThingMagicFastSearch (
  LLRP_tSThingMagicFastSearchMode *pThis,
  LLRP_tEThingMagicFastSearchValue eValue)
{
    pThis->eThingMagicFastSearch = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicFastSearchMode_beginCustom (
  LLRP_tSThingMagicFastSearchMode *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicFastSearchMode_addCustom (
  LLRP_tSThingMagicFastSearchMode *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicFastSearchMode))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicFastSearchMode_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicFastSearchMode_encode (
  const LLRP_tSThingMagicFastSearchMode *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eThingMagicFastSearch,
        &LLRP_fdThingMagicFastSearchMode_ThingMagicFastSearch);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicFastSearchMode_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdC1G2InventoryCommand)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicAsyncOFFTime
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicAsyncOFFTime =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicAsyncOFFTime",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 145,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicAsyncOFFTime,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicAsyncOFFTime),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicAsyncOFFTime_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicAsyncOFFTime_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicAsyncOFFTime_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicAsyncOFFTime_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicAsyncOFFTime_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicAsyncOFFTime_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicAsyncOFFTime[] =
{
  
    &LLRP_fdThingMagicAsyncOFFTime_AsyncOFFTime,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicAsyncOFFTime_AsyncOFFTime =
{
    .eFieldType         = LLRP_FT_U32,
    .eFieldFormat       = LLRP_FMT_NORMAL,
    .pName              = "AsyncOFFTime",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicAsyncOFFTime *
LLRP_ThingMagicAsyncOFFTime_construct (void)
{
    LLRP_tSThingMagicAsyncOFFTime *pNew;

    pNew = (LLRP_tSThingMagicAsyncOFFTime *)
        LLRP_Element_construct(&LLRP_tdThingMagicAsyncOFFTime);

    return pNew;
}

void
LLRP_ThingMagicAsyncOFFTime_destruct (
  LLRP_tSThingMagicAsyncOFFTime *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicAsyncOFFTime_decodeFields (
  LLRP_tSThingMagicAsyncOFFTime *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->AsyncOFFTime =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicAsyncOFFTime_AsyncOFFTime);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicAsyncOFFTime_AsyncOFFTime);
    }
    
}

void
LLRP_ThingMagicAsyncOFFTime_assimilateSubParameters (
  LLRP_tSThingMagicAsyncOFFTime *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicAsyncOFFTime))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u32_t
LLRP_ThingMagicAsyncOFFTime_getAsyncOFFTime (
  LLRP_tSThingMagicAsyncOFFTime *pThis)
{
    return pThis->AsyncOFFTime;
}

LLRP_tResultCode
LLRP_ThingMagicAsyncOFFTime_setAsyncOFFTime (
  LLRP_tSThingMagicAsyncOFFTime *pThis,
  llrp_u32_t Value)
{
    pThis->AsyncOFFTime = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicAsyncOFFTime_beginCustom (
  LLRP_tSThingMagicAsyncOFFTime *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicAsyncOFFTime_addCustom (
  LLRP_tSThingMagicAsyncOFFTime *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicAsyncOFFTime))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicAsyncOFFTime_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicAsyncOFFTime_encode (
  const LLRP_tSThingMagicAsyncOFFTime *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u32(pEncoderStream,
        pThis->AsyncOFFTime,
        &LLRP_fdThingMagicAsyncOFFTime_AsyncOFFTime);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicAsyncOFFTime_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicLicensedFeatures
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicLicensedFeatures =
{
    .bIsMessage             = FALSE,
    .pName                  = "ThingMagicLicensedFeatures",
    .pVendorDescriptor      = &LLRP_vdescthingmagic,
    .pNamespaceDescriptor   = &LLRP_nsdescthingmagic,
    .TypeNum                = 146,
    .pResponseType          = NULL,
    .ppFieldDescriptorTable = LLRP_apfdThingMagicLicensedFeatures,
    .nSizeBytes             = sizeof(LLRP_tSThingMagicLicensedFeatures),
    .pfConstruct            = (LLRP_tSElement *(*)(void)) LLRP_ThingMagicLicensedFeatures_construct,
    .pfDestruct             = (void (*)(LLRP_tSElement *)) LLRP_ThingMagicLicensedFeatures_destruct,

    .pfDecodeFields         =
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicLicensedFeatures_decodeFields,

    .pfAssimilateSubParameters =
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicLicensedFeatures_assimilateSubParameters,

    .pfEncode               =
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicLicensedFeatures_encode,

  
    .pfIsAllowedIn          = LLRP_ThingMagicLicensedFeatures_isAllowedIn,
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicLicensedFeatures[] =
{
  
    &LLRP_fdThingMagicLicensedFeatures_LicensedFeatures,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicLicensedFeatures_LicensedFeatures =
{
    .eFieldType         = LLRP_FT_U8V,
    .eFieldFormat       = LLRP_FMT_HEX,
    .pName              = "LicensedFeatures",
    .pEnumTable         = NULL,
};

LLRP_tSThingMagicLicensedFeatures *
LLRP_ThingMagicLicensedFeatures_construct (void)
{
    LLRP_tSThingMagicLicensedFeatures *pNew;

    pNew = (LLRP_tSThingMagicLicensedFeatures *)
        LLRP_Element_construct(&LLRP_tdThingMagicLicensedFeatures);

    return pNew;
}

void
LLRP_ThingMagicLicensedFeatures_destruct (
  LLRP_tSThingMagicLicensedFeatures *pThis)
{
  
    LLRP_u8v_clear(&pThis->LicensedFeatures);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicLicensedFeatures_decodeFields (
  LLRP_tSThingMagicLicensedFeatures *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->LicensedFeatures =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicLicensedFeatures_LicensedFeatures);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicLicensedFeatures_LicensedFeatures);
    }
    
}

void
LLRP_ThingMagicLicensedFeatures_assimilateSubParameters (
  LLRP_tSThingMagicLicensedFeatures *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicLicensedFeatures))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8v_t
LLRP_ThingMagicLicensedFeatures_getLicensedFeatures (
  LLRP_tSThingMagicLicensedFeatures *pThis)
{
    return pThis->LicensedFeatures;
}

LLRP_tResultCode
LLRP_ThingMagicLicensedFeatures_setLicensedFeatures (
  LLRP_tSThingMagicLicensedFeatures *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->LicensedFeatures);

    pThis->LicensedFeatures = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicLicensedFeatures_beginCustom (
  LLRP_tSThingMagicLicensedFeatures *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicLicensedFeatures_addCustom (
  LLRP_tSThingMagicLicensedFeatures *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicLicensedFeatures))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicLicensedFeatures_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicLicensedFeatures_encode (
  const LLRP_tSThingMagicLicensedFeatures *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8v(pEncoderStream,
        pThis->LicensedFeatures,
        &LLRP_fdThingMagicLicensedFeatures_LicensedFeatures);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicLicensedFeatures_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    return FALSE;
}

void
LLRP_enrollTmTypesIntoRegistry (
  LLRP_tSTypeRegistry *         pTypeRegistry)
{
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDeviceControlCapabilities);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdDeviceInformationCapabilities);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDeviceControlConfiguration);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicReaderConfiguration);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicRegionConfiguration);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicProtocolConfiguration);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdGen2CustomParameters);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicAntennaConfiguration);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicCurrentTime);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDeDuplication);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdDeviceProtocolCapabilities);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdSupportedProtocols);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicReaderModuleTemperature);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdGen2Q);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicAntennaDetection);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdWriteTransmitPower);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdReadPointDescription);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdAntennaMode);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicTargetStrategy);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicLicenseKey);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicBlockPermalock);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicBlockPermalockOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicHiggs2PartialLoadImage);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicHiggs2PartialLoadImageOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicHiggs2FullLoadImage);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicHiggs2FullLoadImageOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicHiggs3FastLoadImage);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicHiggs3FastLoadImageOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicHiggs3LoadImage);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicHiggs3LoadImageOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicHiggs3BlockReadLock);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicHiggs3BlockReadLockOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2ISetReadProtect);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2ISetReadProtectOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2XSetReadProtect);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2XSetReadProtectOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2IResetReadProtect);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2IResetReadProtectOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2XResetReadProtect);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2XResetReadProtectOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2IChangeEAS);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2IChangeEASOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2XChangeEAS);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2XChangeEASOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2IEASAlarm);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2IEASAlarmOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2XEASAlarm);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2XEASAlarmOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2ICalibrate);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2ICalibrateOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2XCalibrate);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2XCalibrateOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2IChangeConfig);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2IChangeConfigOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPConfigWord);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicImpinjMonza4QTReadWrite);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicImpinjMonza4QTReadWriteOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicMonza4ControlByte);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicMonza4Payload);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicWriteTag);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicWriteTagOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicISO180006BInventoryCommand);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicISO180006BTagPattern);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicISO180006BRead);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicISO180006BReadOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicCustomAirProtocols);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicISO180006BWrite);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicISO180006BWriteOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicISO180006BLock);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicISO180006BLockOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdISO18K6BCustomParameters);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicISO180006BDelimiter);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicISO18K6BModulationDepth);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicISO18K6BLinkFrequency);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicISO18K6BLLRPCapabilities);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ASensorValue);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ACommandRequest);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ASensorValueOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AGetLogState);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ALogStateOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSLogState);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSLogStateLimitCounter);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSLogStateSystemStatus);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSLogStateStatusFlag);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ASetLogMode);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ASetLogModeOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AStartLog);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AStartLogOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AEndLog);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AEndLogOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AInitialize);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AInitializeOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AGetMeasurementSetup);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AGetCalibrationData);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AGetCalibrationDataOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ASetCalibrationData);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ASetCalibrationDataOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ASetSFEParams);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ASetSFEParamsOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AAccessFIFOStatus);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AGetBatteryLevel);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AGetBatteryLevelOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSDelayTime);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSApplicationData);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSLogMode);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSLogLimits);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSStartTime);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSFEParam);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSCalibrationData);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AAccessFIFORead);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AAccessFIFOReadOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AAccessFIFOWrite);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ASetLogLimits);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ASetLogLimitsOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ASetIDSPassword);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ASetPasswordOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSBatteryLevel);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSetShelfLife);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSLBlock0);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSLBlock1);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSetShelfLifeOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicHopTime);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVActivateSecureMode);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVActivateSecureModeOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVAuthenticateOBU);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVAuthenticateOBUOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVActivateSiniavMode);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVActivateSiniavModeOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVOBUAuthenticateID);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass1);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass2);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVOBUReadFromMemMap);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVOBUWriteToMemMap);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVCommandRequest);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicTagReportContentSelector);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicRFPhase);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicFastSearchMode);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicAsyncOFFTime);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicLicensedFeatures);
  
}
